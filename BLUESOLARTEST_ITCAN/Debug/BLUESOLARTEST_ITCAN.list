
BLUESOLARTEST_ITCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a5c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003b68  08003b68  00004b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be0  08003be0  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003be0  08003be0  00005068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003be0  08003be0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be0  08003be0  00004be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003be4  08003be4  00004be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003be8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000068  08003c50  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08003c50  00005248  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009758  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b88  00000000  00000000  0000e7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  00010378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ba  00000000  00000000  00010c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018031  00000000  00000000  00011312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a151  00000000  00000000  00029343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000868f1  00000000  00000000  00033494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9d85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002984  00000000  00000000  000b9dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000bc74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b50 	.word	0x08003b50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003b50 	.word	0x08003b50

0800014c <main>:
void UART_INIT();
void Error_Handler();

CAN_HandleTypeDef hcan;
UART_HandleTypeDef huart;
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000150:	f000 fc32 	bl	80009b8 <HAL_Init>
	SystemClock_Config();
 8000154:	f000 f824 	bl	80001a0 <SystemClock_Config>
	MX_GPIO_INIT();
 8000158:	f000 f9b2 	bl	80004c0 <MX_GPIO_INIT>
	UART_INIT();
 800015c:	f000 f968 	bl	8000430 <UART_INIT>
	CAN_INIT();
 8000160:	f000 f9dc 	bl	800051c <CAN_INIT>
	CAN_FILTER_CONFIG();
 8000164:	f000 f898 	bl	8000298 <CAN_FILTER_CONFIG>
	if (HAL_CAN_ActivateNotification(&hcan,
 8000168:	f240 4103 	movw	r1, #1027	@ 0x403
 800016c:	4809      	ldr	r0, [pc, #36]	@ (8000194 <main+0x48>)
 800016e:	f001 f8a1 	bl	80012b4 <HAL_CAN_ActivateNotification>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d001      	beq.n	800017c <main+0x30>
	CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)
			!= HAL_OK) {
		Error_Handler();
 8000178:	f000 f80e 	bl	8000198 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800017c:	4805      	ldr	r0, [pc, #20]	@ (8000194 <main+0x48>)
 800017e:	f000 fe65 	bl	8000e4c <HAL_CAN_Start>
 8000182:	4603      	mov	r3, r0
 8000184:	2b00      	cmp	r3, #0
 8000186:	d001      	beq.n	800018c <main+0x40>
		Error_Handler();
 8000188:	f000 f806 	bl	8000198 <Error_Handler>
	}
	CAN_TX();
 800018c:	f000 f84a 	bl	8000224 <CAN_TX>
	while(1)
 8000190:	bf00      	nop
 8000192:	e7fd      	b.n	8000190 <main+0x44>
 8000194:	20000084 	.word	0x20000084

08000198 <Error_Handler>:

	}

}

void Error_Handler(void) {
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	while (1) {
 800019c:	bf00      	nop
 800019e:	e7fd      	b.n	800019c <Error_Handler+0x4>

080001a0 <SystemClock_Config>:

	}
}

void SystemClock_Config() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b090      	sub	sp, #64	@ 0x40
 80001a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef osc_init = { 0 };
 80001a6:	f107 0318 	add.w	r3, r7, #24
 80001aa:	2228      	movs	r2, #40	@ 0x28
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f003 fa20 	bl	80035f4 <memset>
	RCC_ClkInitTypeDef clk_init = { 0 };
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]
 80001c0:	611a      	str	r2, [r3, #16]
	osc_init.HSEState = RCC_HSE_OFF;
 80001c2:	2300      	movs	r3, #0
 80001c4:	61fb      	str	r3, [r7, #28]
	osc_init.HSIState = RCC_HSI_ON;
 80001c6:	2301      	movs	r3, #1
 80001c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	osc_init.HSICalibrationValue = 16;
 80001ca:	2310      	movs	r3, #16
 80001cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	osc_init.PLL.PLLState = RCC_PLL_ON;
 80001ce:	2302      	movs	r3, #2
 80001d0:	637b      	str	r3, [r7, #52]	@ 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001d2:	2300      	movs	r3, #0
 80001d4:	63bb      	str	r3, [r7, #56]	@ 0x38
	osc_init.PLL.PLLMUL = RCC_PLL_MUL10;
 80001d6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80001da:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&osc_init) != HAL_OK) {
 80001dc:	f107 0318 	add.w	r3, r7, #24
 80001e0:	4618      	mov	r0, r3
 80001e2:	f001 fde9 	bl	8001db8 <HAL_RCC_OscConfig>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <SystemClock_Config+0x50>
		Error_Handler();
 80001ec:	f7ff ffd4 	bl	8000198 <Error_Handler>
	}

	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 80001f0:	230f      	movs	r3, #15
 80001f2:	607b      	str	r3, [r7, #4]
	RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f4:	2302      	movs	r3, #2
 80001f6:	60bb      	str	r3, [r7, #8]
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	60fb      	str	r3, [r7, #12]
	clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000200:	613b      	str	r3, [r7, #16]
	clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]
	if (HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_1) != HAL_OK) {
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2102      	movs	r1, #2
 800020a:	4618      	mov	r0, r3
 800020c:	f002 f856 	bl	80022bc <HAL_RCC_ClockConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x7a>
		Error_Handler();
 8000216:	f7ff ffbf 	bl	8000198 <Error_Handler>
	}
}
 800021a:	bf00      	nop
 800021c:	3740      	adds	r7, #64	@ 0x40
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <CAN_TX>:

void CAN_TX() {
 8000224:	b580      	push	{r7, lr}
 8000226:	b08a      	sub	sp, #40	@ 0x28
 8000228:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txheader;
	uint32_t txmailbox;
	uint8_t test[6] = "test\n\r";
 800022a:	4a17      	ldr	r2, [pc, #92]	@ (8000288 <CAN_TX+0x64>)
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000232:	6018      	str	r0, [r3, #0]
 8000234:	3304      	adds	r3, #4
 8000236:	8019      	strh	r1, [r3, #0]

	txheader.DLC = 6;
 8000238:	2306      	movs	r3, #6
 800023a:	623b      	str	r3, [r7, #32]
	txheader.StdId = 0x01;
 800023c:	2301      	movs	r3, #1
 800023e:	613b      	str	r3, [r7, #16]
	txheader.IDE = CAN_ID_STD;
 8000240:	2300      	movs	r3, #0
 8000242:	61bb      	str	r3, [r7, #24]
	txheader.RTR = CAN_RTR_DATA;
 8000244:	2300      	movs	r3, #0
 8000246:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_AddTxMessage(&hcan, &txheader, test, &txmailbox) != HAL_OK) {
 8000248:	f107 030c 	add.w	r3, r7, #12
 800024c:	1d3a      	adds	r2, r7, #4
 800024e:	f107 0110 	add.w	r1, r7, #16
 8000252:	480e      	ldr	r0, [pc, #56]	@ (800028c <CAN_TX+0x68>)
 8000254:	f000 fe3e 	bl	8000ed4 <HAL_CAN_AddTxMessage>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d00f      	beq.n	800027e <CAN_TX+0x5a>
		Error_Handler();
 800025e:	f7ff ff9b 	bl	8000198 <Error_Handler>
		while (1) {
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000262:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000266:	480a      	ldr	r0, [pc, #40]	@ (8000290 <CAN_TX+0x6c>)
 8000268:	f001 fd8c 	bl	8001d84 <HAL_GPIO_TogglePin>
			HAL_Delay(800);
 800026c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000270:	f000 fc04 	bl	8000a7c <HAL_Delay>
			printf("1\n");
 8000274:	4807      	ldr	r0, [pc, #28]	@ (8000294 <CAN_TX+0x70>)
 8000276:	f003 f8dd 	bl	8003434 <puts>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800027a:	bf00      	nop
 800027c:	e7f1      	b.n	8000262 <CAN_TX+0x3e>
		}
	}

}
 800027e:	bf00      	nop
 8000280:	3728      	adds	r7, #40	@ 0x28
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	08003b6c 	.word	0x08003b6c
 800028c:	20000084 	.word	0x20000084
 8000290:	40011000 	.word	0x40011000
 8000294:	08003b68 	.word	0x08003b68

08000298 <CAN_FILTER_CONFIG>:

void CAN_FILTER_CONFIG() {
 8000298:	b580      	push	{r7, lr}
 800029a:	b08a      	sub	sp, #40	@ 0x28
 800029c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef canfilter = { 0 };
 800029e:	463b      	mov	r3, r7
 80002a0:	2228      	movs	r2, #40	@ 0x28
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f003 f9a5 	bl	80035f4 <memset>

	canfilter.FilterActivation = ENABLE;
 80002aa:	2301      	movs	r3, #1
 80002ac:	623b      	str	r3, [r7, #32]
	canfilter.FilterBank = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]
	canfilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	613b      	str	r3, [r7, #16]
	canfilter.FilterIdHigh = 0x0000;
 80002b6:	2300      	movs	r3, #0
 80002b8:	603b      	str	r3, [r7, #0]
	canfilter.FilterIdLow = 0x0000;
 80002ba:	2300      	movs	r3, #0
 80002bc:	607b      	str	r3, [r7, #4]
	canfilter.FilterMaskIdHigh = 0x0000;
 80002be:	2300      	movs	r3, #0
 80002c0:	60bb      	str	r3, [r7, #8]
	canfilter.FilterMaskIdLow = 0x0000;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60fb      	str	r3, [r7, #12]
	canfilter.FilterMode = CAN_FILTERMODE_IDMASK;
 80002c6:	2300      	movs	r3, #0
 80002c8:	61bb      	str	r3, [r7, #24]
	canfilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80002ca:	2301      	movs	r3, #1
 80002cc:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(&hcan, &canfilter) != HAL_OK) {
 80002ce:	463b      	mov	r3, r7
 80002d0:	4619      	mov	r1, r3
 80002d2:	4806      	ldr	r0, [pc, #24]	@ (80002ec <CAN_FILTER_CONFIG+0x54>)
 80002d4:	f000 fcf1 	bl	8000cba <HAL_CAN_ConfigFilter>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <CAN_FILTER_CONFIG+0x4a>
		Error_Handler();
 80002de:	f7ff ff5b 	bl	8000198 <Error_Handler>
	}

}
 80002e2:	bf00      	nop
 80002e4:	3728      	adds	r7, #40	@ 0x28
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000084 	.word	0x20000084

080002f0 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 80002f0:	b5b0      	push	{r4, r5, r7, lr}
 80002f2:	b08a      	sub	sp, #40	@ 0x28
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	const char msg[] = "Message sent from mailbox 1\n\r";
 80002f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000330 <HAL_CAN_TxMailbox0CompleteCallback+0x40>)
 80002fa:	f107 0408 	add.w	r4, r7, #8
 80002fe:	461d      	mov	r5, r3
 8000300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000304:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000308:	c407      	stmia	r4!, {r0, r1, r2}
 800030a:	8023      	strh	r3, [r4, #0]

	if (HAL_UART_Transmit(&huart, (uint8_t*) msg, sizeof(msg) - 1,
 800030c:	f107 0108 	add.w	r1, r7, #8
 8000310:	f04f 33ff 	mov.w	r3, #4294967295
 8000314:	221d      	movs	r2, #29
 8000316:	4807      	ldr	r0, [pc, #28]	@ (8000334 <HAL_CAN_TxMailbox0CompleteCallback+0x44>)
 8000318:	f002 f9ae 	bl	8002678 <HAL_UART_Transmit>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <HAL_CAN_TxMailbox0CompleteCallback+0x36>
	HAL_MAX_DELAY) != HAL_OK) {
		Error_Handler();
 8000322:	f7ff ff39 	bl	8000198 <Error_Handler>
	}
}
 8000326:	bf00      	nop
 8000328:	3728      	adds	r7, #40	@ 0x28
 800032a:	46bd      	mov	sp, r7
 800032c:	bdb0      	pop	{r4, r5, r7, pc}
 800032e:	bf00      	nop
 8000330:	08003b74 	.word	0x08003b74
 8000334:	200000ac 	.word	0x200000ac

08000338 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000338:	b5b0      	push	{r4, r5, r7, lr}
 800033a:	b08a      	sub	sp, #40	@ 0x28
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	const char msg[] = "Message sent from mailbox 1\n\r";
 8000340:	4b0d      	ldr	r3, [pc, #52]	@ (8000378 <HAL_CAN_TxMailbox1CompleteCallback+0x40>)
 8000342:	f107 0408 	add.w	r4, r7, #8
 8000346:	461d      	mov	r5, r3
 8000348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800034a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800034c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000350:	c407      	stmia	r4!, {r0, r1, r2}
 8000352:	8023      	strh	r3, [r4, #0]

	if (HAL_UART_Transmit(&huart, (uint8_t*) msg, sizeof(msg) - 1,
 8000354:	f107 0108 	add.w	r1, r7, #8
 8000358:	f04f 33ff 	mov.w	r3, #4294967295
 800035c:	221d      	movs	r2, #29
 800035e:	4807      	ldr	r0, [pc, #28]	@ (800037c <HAL_CAN_TxMailbox1CompleteCallback+0x44>)
 8000360:	f002 f98a 	bl	8002678 <HAL_UART_Transmit>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <HAL_CAN_TxMailbox1CompleteCallback+0x36>
	HAL_MAX_DELAY) != HAL_OK) {
		Error_Handler();
 800036a:	f7ff ff15 	bl	8000198 <Error_Handler>
	}
}
 800036e:	bf00      	nop
 8000370:	3728      	adds	r7, #40	@ 0x28
 8000372:	46bd      	mov	sp, r7
 8000374:	bdb0      	pop	{r4, r5, r7, pc}
 8000376:	bf00      	nop
 8000378:	08003b74 	.word	0x08003b74
 800037c:	200000ac 	.word	0x200000ac

08000380 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000380:	b5b0      	push	{r4, r5, r7, lr}
 8000382:	b08a      	sub	sp, #40	@ 0x28
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	const char msg[] = "Message sent from mailbox 2\n\r";
 8000388:	4b0d      	ldr	r3, [pc, #52]	@ (80003c0 <HAL_CAN_TxMailbox2CompleteCallback+0x40>)
 800038a:	f107 0408 	add.w	r4, r7, #8
 800038e:	461d      	mov	r5, r3
 8000390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000394:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000398:	c407      	stmia	r4!, {r0, r1, r2}
 800039a:	8023      	strh	r3, [r4, #0]

	if (HAL_UART_Transmit(&huart, (uint8_t*) msg, sizeof(msg) - 1,
 800039c:	f107 0108 	add.w	r1, r7, #8
 80003a0:	f04f 33ff 	mov.w	r3, #4294967295
 80003a4:	221d      	movs	r2, #29
 80003a6:	4807      	ldr	r0, [pc, #28]	@ (80003c4 <HAL_CAN_TxMailbox2CompleteCallback+0x44>)
 80003a8:	f002 f966 	bl	8002678 <HAL_UART_Transmit>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <HAL_CAN_TxMailbox2CompleteCallback+0x36>
	HAL_MAX_DELAY) != HAL_OK) {
		Error_Handler();
 80003b2:	f7ff fef1 	bl	8000198 <Error_Handler>
	}
}
 80003b6:	bf00      	nop
 80003b8:	3728      	adds	r7, #40	@ 0x28
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bdb0      	pop	{r4, r5, r7, pc}
 80003be:	bf00      	nop
 80003c0:	08003b94 	.word	0x08003b94
 80003c4:	200000ac 	.word	0x200000ac

080003c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b08c      	sub	sp, #48	@ 0x30
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxheader = { 0 };
 80003d0:	f107 0314 	add.w	r3, r7, #20
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	615a      	str	r2, [r3, #20]
 80003e2:	619a      	str	r2, [r3, #24]
	uint8_t recieved_msg[8];

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxheader, recieved_msg)
 80003e4:	f107 030c 	add.w	r3, r7, #12
 80003e8:	f107 0214 	add.w	r2, r7, #20
 80003ec:	2100      	movs	r1, #0
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f000 fe3f 	bl	8001072 <HAL_CAN_GetRxMessage>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
			!= HAL_OK) {
		Error_Handler();
 80003fa:	f7ff fecd 	bl	8000198 <Error_Handler>
	}
	HAL_UART_Transmit(&huart, (uint8_t*) recieved_msg, sizeof(recieved_msg) - 1,
 80003fe:	f107 010c 	add.w	r1, r7, #12
 8000402:	f04f 33ff 	mov.w	r3, #4294967295
 8000406:	2207      	movs	r2, #7
 8000408:	4803      	ldr	r0, [pc, #12]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800040a:	f002 f935 	bl	8002678 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

}
 800040e:	bf00      	nop
 8000410:	3730      	adds	r7, #48	@ 0x30
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	200000ac 	.word	0x200000ac

0800041c <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]

}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
	...

08000430 <UART_INIT>:

void UART_INIT() {
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	huart.Instance = USART1;
 8000434:	4b0f      	ldr	r3, [pc, #60]	@ (8000474 <UART_INIT+0x44>)
 8000436:	4a10      	ldr	r2, [pc, #64]	@ (8000478 <UART_INIT+0x48>)
 8000438:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate = 115200;
 800043a:	4b0e      	ldr	r3, [pc, #56]	@ (8000474 <UART_INIT+0x44>)
 800043c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000440:	605a      	str	r2, [r3, #4]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 8000442:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <UART_INIT+0x44>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
	huart.Init.StopBits = UART_STOPBITS_1;
 8000448:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <UART_INIT+0x44>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
	huart.Init.Parity = UART_PARITY_NONE;
 800044e:	4b09      	ldr	r3, [pc, #36]	@ (8000474 <UART_INIT+0x44>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000454:	4b07      	ldr	r3, [pc, #28]	@ (8000474 <UART_INIT+0x44>)
 8000456:	2200      	movs	r2, #0
 8000458:	619a      	str	r2, [r3, #24]
	huart.Init.Mode = UART_MODE_TX_RX;
 800045a:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <UART_INIT+0x44>)
 800045c:	220c      	movs	r2, #12
 800045e:	615a      	str	r2, [r3, #20]
	if (HAL_UART_Init(&huart) != HAL_OK) {
 8000460:	4804      	ldr	r0, [pc, #16]	@ (8000474 <UART_INIT+0x44>)
 8000462:	f002 f8b9 	bl	80025d8 <HAL_UART_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <UART_INIT+0x40>
		Error_Handler();
 800046c:	f7ff fe94 	bl	8000198 <Error_Handler>
	}
}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	200000ac 	.word	0x200000ac
 8000478:	40013800 	.word	0x40013800

0800047c <HAL_MspInit>:

#include "main.h"
#include "stm32f1xx_hal.h"
void HAL_MspInit(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0


  //Here we will do low level processor specific inits.
 	//1. Set up the priority grouping of the arm cortex mx processor
 	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000480:	2003      	movs	r0, #3
 8000482:	f001 fa07 	bl	8001894 <HAL_NVIC_SetPriorityGrouping>
 	//2. Enable the required system exceptions of the arm cortex processor
 	SCB->SHCSR |= 0x7 << 16; //usage fault,bus fault and memory fault system exceptions
 8000486:	4b0d      	ldr	r3, [pc, #52]	@ (80004bc <HAL_MspInit+0x40>)
 8000488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800048a:	4a0c      	ldr	r2, [pc, #48]	@ (80004bc <HAL_MspInit+0x40>)
 800048c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000490:	6253      	str	r3, [r2, #36]	@ 0x24

 	//3. configure the priority of the system exceptions
 	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000492:	2200      	movs	r2, #0
 8000494:	2100      	movs	r1, #0
 8000496:	f06f 000b 	mvn.w	r0, #11
 800049a:	f001 fa06 	bl	80018aa <HAL_NVIC_SetPriority>
 	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800049e:	2200      	movs	r2, #0
 80004a0:	2100      	movs	r1, #0
 80004a2:	f06f 000a 	mvn.w	r0, #10
 80004a6:	f001 fa00 	bl	80018aa <HAL_NVIC_SetPriority>
 	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	f06f 0009 	mvn.w	r0, #9
 80004b2:	f001 f9fa 	bl	80018aa <HAL_NVIC_SetPriority>



}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	e000ed00 	.word	0xe000ed00

080004c0 <MX_GPIO_INIT>:
void MX_GPIO_INIT()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioLED = {0};
 80004c6:	f107 0308 	add.w	r3, r7, #8
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <MX_GPIO_INIT+0x54>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000514 <MX_GPIO_INIT+0x54>)
 80004da:	f043 0310 	orr.w	r3, r3, #16
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000514 <MX_GPIO_INIT+0x54>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0310 	and.w	r3, r3, #16
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
	gpioLED.Pin = GPIO_PIN_13;
 80004ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004f0:	60bb      	str	r3, [r7, #8]
	gpioLED.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	2301      	movs	r3, #1
 80004f4:	60fb      	str	r3, [r7, #12]
	gpioLED.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	613b      	str	r3, [r7, #16]
	gpioLED.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	2302      	movs	r3, #2
 80004fc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &gpioLED);
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	4619      	mov	r1, r3
 8000504:	4804      	ldr	r0, [pc, #16]	@ (8000518 <MX_GPIO_INIT+0x58>)
 8000506:	f001 fab9 	bl	8001a7c <HAL_GPIO_Init>


}
 800050a:	bf00      	nop
 800050c:	3718      	adds	r7, #24
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000
 8000518:	40011000 	.word	0x40011000

0800051c <CAN_INIT>:
void CAN_INIT()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
	//CAN_HandleTypeDef hcan ={0};
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000522:	4b1f      	ldr	r3, [pc, #124]	@ (80005a0 <CAN_INIT+0x84>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	4a1e      	ldr	r2, [pc, #120]	@ (80005a0 <CAN_INIT+0x84>)
 8000528:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800052c:	61d3      	str	r3, [r2, #28]
 800052e:	4b1c      	ldr	r3, [pc, #112]	@ (80005a0 <CAN_INIT+0x84>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]


	hcan.Instance = CAN1;
 800053a:	4b1a      	ldr	r3, [pc, #104]	@ (80005a4 <CAN_INIT+0x88>)
 800053c:	4a1a      	ldr	r2, [pc, #104]	@ (80005a8 <CAN_INIT+0x8c>)
 800053e:	601a      	str	r2, [r3, #0]
	hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000540:	4b18      	ldr	r3, [pc, #96]	@ (80005a4 <CAN_INIT+0x88>)
 8000542:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000546:	609a      	str	r2, [r3, #8]
	hcan.Init.AutoBusOff = DISABLE;
 8000548:	4b16      	ldr	r3, [pc, #88]	@ (80005a4 <CAN_INIT+0x88>)
 800054a:	2200      	movs	r2, #0
 800054c:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoRetransmission = ENABLE;
 800054e:	4b15      	ldr	r3, [pc, #84]	@ (80005a4 <CAN_INIT+0x88>)
 8000550:	2201      	movs	r2, #1
 8000552:	76da      	strb	r2, [r3, #27]
	hcan.Init.AutoWakeUp = DISABLE;
 8000554:	4b13      	ldr	r3, [pc, #76]	@ (80005a4 <CAN_INIT+0x88>)
 8000556:	2200      	movs	r2, #0
 8000558:	769a      	strb	r2, [r3, #26]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800055a:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <CAN_INIT+0x88>)
 800055c:	2200      	movs	r2, #0
 800055e:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000560:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <CAN_INIT+0x88>)
 8000562:	2200      	movs	r2, #0
 8000564:	775a      	strb	r2, [r3, #29]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000566:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <CAN_INIT+0x88>)
 8000568:	2200      	movs	r2, #0
 800056a:	761a      	strb	r2, [r3, #24]

	hcan.Init.Prescaler = 5;
 800056c:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <CAN_INIT+0x88>)
 800056e:	2205      	movs	r2, #5
 8000570:	605a      	str	r2, [r3, #4]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <CAN_INIT+0x88>)
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000578:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <CAN_INIT+0x88>)
 800057a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800057e:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000580:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <CAN_INIT+0x88>)
 8000582:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000586:	615a      	str	r2, [r3, #20]
	if(HAL_CAN_Init(&hcan) != HAL_OK)
 8000588:	4806      	ldr	r0, [pc, #24]	@ (80005a4 <CAN_INIT+0x88>)
 800058a:	f000 fa9b 	bl	8000ac4 <HAL_CAN_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <CAN_INIT+0x7c>
	{
		Error_Handler();
 8000594:	f7ff fe00 	bl	8000198 <Error_Handler>
	}


}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	20000084 	.word	0x20000084
 80005a8:	40006400 	.word	0x40006400

080005ac <HAL_CAN_MspInit>:
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000670 <HAL_CAN_MspInit+0xc4>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000670 <HAL_CAN_MspInit+0xc4>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6193      	str	r3, [r2, #24]
 80005ce:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <HAL_CAN_MspInit+0xc4>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_CAN1_CLK_ENABLE();
 80005da:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <HAL_CAN_MspInit+0xc4>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	4a24      	ldr	r2, [pc, #144]	@ (8000670 <HAL_CAN_MspInit+0xc4>)
 80005e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005e4:	61d3      	str	r3, [r2, #28]
 80005e6:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <HAL_CAN_MspInit+0xc4>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]

	    GPIO_InitStruct.Pin  = GPIO_PIN_11;
 80005f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005f6:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	481b      	ldr	r0, [pc, #108]	@ (8000674 <HAL_CAN_MspInit+0xc8>)
 8000608:	f001 fa38 	bl	8001a7c <HAL_GPIO_Init>

	    // PA12 - CAN_TX (AF push-pull)
	    GPIO_InitStruct.Pin   = GPIO_PIN_12;
 800060c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000610:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8000612:	2302      	movs	r3, #2
 8000614:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000616:	2303      	movs	r3, #3
 8000618:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	4619      	mov	r1, r3
 8000620:	4814      	ldr	r0, [pc, #80]	@ (8000674 <HAL_CAN_MspInit+0xc8>)
 8000622:	f001 fa2b 	bl	8001a7c <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 15, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	210f      	movs	r1, #15
 800062a:	2013      	movs	r0, #19
 800062c:	f001 f93d 	bl	80018aa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 15, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	210f      	movs	r1, #15
 8000634:	2014      	movs	r0, #20
 8000636:	f001 f938 	bl	80018aa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	210f      	movs	r1, #15
 800063e:	2015      	movs	r0, #21
 8000640:	f001 f933 	bl	80018aa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8000644:	2200      	movs	r2, #0
 8000646:	210f      	movs	r1, #15
 8000648:	2016      	movs	r0, #22
 800064a:	f001 f92e 	bl	80018aa <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800064e:	2013      	movs	r0, #19
 8000650:	f001 f947 	bl	80018e2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000654:	2014      	movs	r0, #20
 8000656:	f001 f944 	bl	80018e2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800065a:	2015      	movs	r0, #21
 800065c:	f001 f941 	bl	80018e2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000660:	2016      	movs	r0, #22
 8000662:	f001 f93e 	bl	80018e2 <HAL_NVIC_EnableIRQ>


}
 8000666:	bf00      	nop
 8000668:	3720      	adds	r7, #32
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000
 8000674:	40010800 	.word	0x40010800

08000678 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart ={0};
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]

	//1. here we will do the low level inits of the usart2 peripheral
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b20      	ldr	r3, [pc, #128]	@ (8000710 <HAL_UART_MspInit+0x98>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a1f      	ldr	r2, [pc, #124]	@ (8000710 <HAL_UART_MspInit+0x98>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6193      	str	r3, [r2, #24]
 800069a:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <HAL_UART_MspInit+0x98>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_USART1_CLK_ENABLE();
 80006a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <HAL_UART_MspInit+0x98>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	4a19      	ldr	r2, [pc, #100]	@ (8000710 <HAL_UART_MspInit+0x98>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b0:	6193      	str	r3, [r2, #24]
 80006b2:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <HAL_UART_MspInit+0x98>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
	//2. do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_9;
 80006be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006c2:	613b      	str	r3, [r7, #16]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	617b      	str	r3, [r7, #20]
	gpio_uart.Pull= GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
	gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	4619      	mov	r1, r3
 80006d6:	480f      	ldr	r0, [pc, #60]	@ (8000714 <HAL_UART_MspInit+0x9c>)
 80006d8:	f001 f9d0 	bl	8001a7c <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_10;
 80006dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006e0:	613b      	str	r3, [r7, #16]
	gpio_uart.Mode = GPIO_MODE_INPUT;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
	gpio_uart.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	4619      	mov	r1, r3
 80006f0:	4808      	ldr	r0, [pc, #32]	@ (8000714 <HAL_UART_MspInit+0x9c>)
 80006f2:	f001 f9c3 	bl	8001a7c <HAL_GPIO_Init>

	//3. enable the irq and set up the priority (NVIC settings
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006f6:	2025      	movs	r0, #37	@ 0x25
 80006f8:	f001 f8f3 	bl	80018e2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	210f      	movs	r1, #15
 8000700:	2025      	movs	r0, #37	@ 0x25
 8000702:	f001 f8d2 	bl	80018aa <HAL_NVIC_SetPriority>
}
 8000706:	bf00      	nop
 8000708:	3720      	adds	r7, #32
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000
 8000714:	40010800 	.word	0x40010800

08000718 <USART1_IRQHandler>:
/**
 * @brief This function handles Non maskable interrupt.
 */
extern UART_HandleTypeDef huart;

void USART1_IRQHandler(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart);
 800071c:	4802      	ldr	r0, [pc, #8]	@ (8000728 <USART1_IRQHandler+0x10>)
 800071e:	f002 f837 	bl	8002790 <HAL_UART_IRQHandler>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000ac 	.word	0x200000ac

0800072c <USB_HP_CAN1_TX_IRQHandler>:

void USB_HP_CAN1_TX_IRQHandler(void)  { HAL_CAN_IRQHandler(&hcan); }
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
 8000730:	4802      	ldr	r0, [pc, #8]	@ (800073c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000732:	f000 fde4 	bl	80012fe <HAL_CAN_IRQHandler>
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000084 	.word	0x20000084

08000740 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void) { HAL_CAN_IRQHandler(&hcan); }
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
 8000744:	4802      	ldr	r0, [pc, #8]	@ (8000750 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000746:	f000 fdda 	bl	80012fe <HAL_CAN_IRQHandler>
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000084 	.word	0x20000084

08000754 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)        { HAL_CAN_IRQHandler(&hcan); }
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
 8000758:	4802      	ldr	r0, [pc, #8]	@ (8000764 <CAN1_RX1_IRQHandler+0x10>)
 800075a:	f000 fdd0 	bl	80012fe <HAL_CAN_IRQHandler>
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000084 	.word	0x20000084

08000768 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void)        { HAL_CAN_IRQHandler(&hcan); }
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
 800076c:	4802      	ldr	r0, [pc, #8]	@ (8000778 <CAN1_SCE_IRQHandler+0x10>)
 800076e:	f000 fdc6 	bl	80012fe <HAL_CAN_IRQHandler>
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000084 	.word	0x20000084

0800077c <NMI_Handler>:
void NMI_Handler(void) {
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <NMI_Handler+0x4>

08000784 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <MemManage_Handler+0x4>

08000794 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <BusFault_Handler+0x4>

0800079c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <UsageFault_Handler+0x4>

080007a4 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80007cc:	f000 f93a 	bl	8000a44 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <ITM_SendChar+0x44>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000818 <ITM_SendChar+0x44>)
 80007e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007e8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <ITM_SendChar+0x48>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a0b      	ldr	r2, [pc, #44]	@ (800081c <ITM_SendChar+0x48>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007f6:	bf00      	nop
 80007f8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	2b00      	cmp	r3, #0
 8000804:	d0f8      	beq.n	80007f8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000806:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	6013      	str	r3, [r2, #0]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	e000edfc 	.word	0xe000edfc
 800081c:	e0000e00 	.word	0xe0000e00

08000820 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	e00a      	b.n	8000848 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000832:	f3af 8000 	nop.w
 8000836:	4601      	mov	r1, r0
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	60ba      	str	r2, [r7, #8]
 800083e:	b2ca      	uxtb	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	3301      	adds	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	429a      	cmp	r2, r3
 800084e:	dbf0      	blt.n	8000832 <_read+0x12>
  }

  return len;
 8000850:	687b      	ldr	r3, [r7, #4]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af00      	add	r7, sp, #0
 8000860:	60f8      	str	r0, [r7, #12]
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	e009      	b.n	8000880 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	60ba      	str	r2, [r7, #8]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ffad 	bl	80007d4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697a      	ldr	r2, [r7, #20]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	429a      	cmp	r2, r3
 8000886:	dbf1      	blt.n	800086c <_write+0x12>
  }
  return len;
 8000888:	687b      	ldr	r3, [r7, #4]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <_close>:

int _close(int file)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800089a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008b8:	605a      	str	r2, [r3, #4]
  return 0;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <_isatty>:

int _isatty(int file)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008da:	b480      	push	{r7}
 80008dc:	b085      	sub	sp, #20
 80008de:	af00      	add	r7, sp, #0
 80008e0:	60f8      	str	r0, [r7, #12]
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
	...

080008f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008fc:	4a14      	ldr	r2, [pc, #80]	@ (8000950 <_sbrk+0x5c>)
 80008fe:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <_sbrk+0x60>)
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000908:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d102      	bne.n	8000916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000910:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <_sbrk+0x64>)
 8000912:	4a12      	ldr	r2, [pc, #72]	@ (800095c <_sbrk+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000916:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	429a      	cmp	r2, r3
 8000922:	d207      	bcs.n	8000934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000924:	f002 feb4 	bl	8003690 <__errno>
 8000928:	4603      	mov	r3, r0
 800092a:	220c      	movs	r2, #12
 800092c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	e009      	b.n	8000948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093a:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	4a05      	ldr	r2, [pc, #20]	@ (8000958 <_sbrk+0x64>)
 8000944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000946:	68fb      	ldr	r3, [r7, #12]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20005000 	.word	0x20005000
 8000954:	00000400 	.word	0x00000400
 8000958:	200000f4 	.word	0x200000f4
 800095c:	20000248 	.word	0x20000248

08000960 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800096c:	f7ff fff8 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000970:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000972:	490c      	ldr	r1, [pc, #48]	@ (80009a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000974:	4a0c      	ldr	r2, [pc, #48]	@ (80009a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a09      	ldr	r2, [pc, #36]	@ (80009ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000988:	4c09      	ldr	r4, [pc, #36]	@ (80009b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000996:	f002 fe81 	bl	800369c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800099a:	f7ff fbd7 	bl	800014c <main>
  bx lr
 800099e:	4770      	bx	lr
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009a8:	08003be8 	.word	0x08003be8
  ldr r2, =_sbss
 80009ac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009b0:	20000248 	.word	0x20000248

080009b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC1_2_IRQHandler>
	...

080009b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <HAL_Init+0x28>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a07      	ldr	r2, [pc, #28]	@ (80009e0 <HAL_Init+0x28>)
 80009c2:	f043 0310 	orr.w	r3, r3, #16
 80009c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 ff63 	bl	8001894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ce:	200f      	movs	r0, #15
 80009d0:	f000 f808 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d4:	f7ff fd52 	bl	800047c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40022000 	.word	0x40022000

080009e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <HAL_InitTick+0x54>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <HAL_InitTick+0x58>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4619      	mov	r1, r3
 80009f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 ff7b 	bl	80018fe <HAL_SYSTICK_Config>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00e      	b.n	8000a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b0f      	cmp	r3, #15
 8000a16:	d80a      	bhi.n	8000a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f000 ff43 	bl	80018aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a24:	4a06      	ldr	r2, [pc, #24]	@ (8000a40 <HAL_InitTick+0x5c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000004 	.word	0x20000004

08000a44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <HAL_IncTick+0x1c>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <HAL_IncTick+0x20>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	4a03      	ldr	r2, [pc, #12]	@ (8000a64 <HAL_IncTick+0x20>)
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	20000008 	.word	0x20000008
 8000a64:	200000f8 	.word	0x200000f8

08000a68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a6c:	4b02      	ldr	r3, [pc, #8]	@ (8000a78 <HAL_GetTick+0x10>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	200000f8 	.word	0x200000f8

08000a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a84:	f7ff fff0 	bl	8000a68 <HAL_GetTick>
 8000a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a94:	d005      	beq.n	8000aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <HAL_Delay+0x44>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aa2:	bf00      	nop
 8000aa4:	f7ff ffe0 	bl	8000a68 <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d8f7      	bhi.n	8000aa4 <HAL_Delay+0x28>
  {
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000008 	.word	0x20000008

08000ac4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e0ed      	b.n	8000cb2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d102      	bne.n	8000ae8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff fd62 	bl	80005ac <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f042 0201 	orr.w	r2, r2, #1
 8000af6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000af8:	f7ff ffb6 	bl	8000a68 <HAL_GetTick>
 8000afc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000afe:	e012      	b.n	8000b26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b00:	f7ff ffb2 	bl	8000a68 <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	2b0a      	cmp	r3, #10
 8000b0c:	d90b      	bls.n	8000b26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b12:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2205      	movs	r2, #5
 8000b1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e0c5      	b.n	8000cb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0e5      	beq.n	8000b00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f022 0202 	bic.w	r2, r2, #2
 8000b42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b44:	f7ff ff90 	bl	8000a68 <HAL_GetTick>
 8000b48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b4a:	e012      	b.n	8000b72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b4c:	f7ff ff8c 	bl	8000a68 <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	2b0a      	cmp	r3, #10
 8000b58:	d90b      	bls.n	8000b72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b5e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2205      	movs	r2, #5
 8000b6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e09f      	b.n	8000cb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1e5      	bne.n	8000b4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	7e1b      	ldrb	r3, [r3, #24]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d108      	bne.n	8000b9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	e007      	b.n	8000baa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ba8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7e5b      	ldrb	r3, [r3, #25]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d108      	bne.n	8000bc4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	e007      	b.n	8000bd4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000bd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	7e9b      	ldrb	r3, [r3, #26]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d108      	bne.n	8000bee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f042 0220 	orr.w	r2, r2, #32
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	e007      	b.n	8000bfe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f022 0220 	bic.w	r2, r2, #32
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7edb      	ldrb	r3, [r3, #27]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d108      	bne.n	8000c18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f022 0210 	bic.w	r2, r2, #16
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	e007      	b.n	8000c28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f042 0210 	orr.w	r2, r2, #16
 8000c26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7f1b      	ldrb	r3, [r3, #28]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d108      	bne.n	8000c42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f042 0208 	orr.w	r2, r2, #8
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	e007      	b.n	8000c52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 0208 	bic.w	r2, r2, #8
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7f5b      	ldrb	r3, [r3, #29]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d108      	bne.n	8000c6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f042 0204 	orr.w	r2, r2, #4
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e007      	b.n	8000c7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0204 	bic.w	r2, r2, #4
 8000c7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	431a      	orrs	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	ea42 0103 	orr.w	r1, r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	1e5a      	subs	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2201      	movs	r2, #1
 8000cac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b087      	sub	sp, #28
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000cd2:	7cfb      	ldrb	r3, [r7, #19]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d003      	beq.n	8000ce0 <HAL_CAN_ConfigFilter+0x26>
 8000cd8:	7cfb      	ldrb	r3, [r7, #19]
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	f040 80aa 	bne.w	8000e34 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000ce6:	f043 0201 	orr.w	r2, r3, #1
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	f003 031f 	and.w	r3, r3, #31
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d123      	bne.n	8000d62 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	43db      	mvns	r3, r3
 8000d24:	401a      	ands	r2, r3
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d3c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3248      	adds	r2, #72	@ 0x48
 8000d42:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d56:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d58:	6979      	ldr	r1, [r7, #20]
 8000d5a:	3348      	adds	r3, #72	@ 0x48
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	440b      	add	r3, r1
 8000d60:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d122      	bne.n	8000db0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	431a      	orrs	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d8a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	3248      	adds	r2, #72	@ 0x48
 8000d90:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000da4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000da6:	6979      	ldr	r1, [r7, #20]
 8000da8:	3348      	adds	r3, #72	@ 0x48
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	440b      	add	r3, r1
 8000dae:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d109      	bne.n	8000dcc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000dca:	e007      	b.n	8000ddc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d109      	bne.n	8000df8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000df6:	e007      	b.n	8000e08 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	431a      	orrs	r2, r3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d107      	bne.n	8000e20 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000e26:	f023 0201 	bic.w	r2, r3, #1
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	e006      	b.n	8000e42 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e38:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
  }
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	371c      	adds	r7, #28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d12e      	bne.n	8000ebe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2202      	movs	r2, #2
 8000e64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 0201 	bic.w	r2, r2, #1
 8000e76:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e78:	f7ff fdf6 	bl	8000a68 <HAL_GetTick>
 8000e7c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e7e:	e012      	b.n	8000ea6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e80:	f7ff fdf2 	bl	8000a68 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b0a      	cmp	r3, #10
 8000e8c:	d90b      	bls.n	8000ea6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e92:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2205      	movs	r2, #5
 8000e9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e012      	b.n	8000ecc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1e5      	bne.n	8000e80 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e006      	b.n	8000ecc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
  }
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	@ 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ef2:	7ffb      	ldrb	r3, [r7, #31]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d003      	beq.n	8000f00 <HAL_CAN_AddTxMessage+0x2c>
 8000ef8:	7ffb      	ldrb	r3, [r7, #31]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	f040 80ad 	bne.w	800105a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10a      	bne.n	8000f20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d105      	bne.n	8000f20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 8095 	beq.w	800104a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	0e1b      	lsrs	r3, r3, #24
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10d      	bne.n	8000f58 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f46:	68f9      	ldr	r1, [r7, #12]
 8000f48:	6809      	ldr	r1, [r1, #0]
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	3318      	adds	r3, #24
 8000f50:	011b      	lsls	r3, r3, #4
 8000f52:	440b      	add	r3, r1
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	e00f      	b.n	8000f78 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f62:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f68:	68f9      	ldr	r1, [r7, #12]
 8000f6a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f6c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3318      	adds	r3, #24
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	440b      	add	r3, r1
 8000f76:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6819      	ldr	r1, [r3, #0]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	691a      	ldr	r2, [r3, #16]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3318      	adds	r3, #24
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	440b      	add	r3, r1
 8000f88:	3304      	adds	r3, #4
 8000f8a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	7d1b      	ldrb	r3, [r3, #20]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d111      	bne.n	8000fb8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3318      	adds	r3, #24
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	4413      	add	r3, r2
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	6811      	ldr	r1, [r2, #0]
 8000fa8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	3318      	adds	r3, #24
 8000fb0:	011b      	lsls	r3, r3, #4
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3307      	adds	r3, #7
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	061a      	lsls	r2, r3, #24
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3306      	adds	r3, #6
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	041b      	lsls	r3, r3, #16
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3305      	adds	r3, #5
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	3204      	adds	r2, #4
 8000fd8:	7812      	ldrb	r2, [r2, #0]
 8000fda:	4610      	mov	r0, r2
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	6811      	ldr	r1, [r2, #0]
 8000fe0:	ea43 0200 	orr.w	r2, r3, r0
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	440b      	add	r3, r1
 8000fea:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000fee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3303      	adds	r3, #3
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	061a      	lsls	r2, r3, #24
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	041b      	lsls	r3, r3, #16
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3301      	adds	r3, #1
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	4313      	orrs	r3, r2
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	7812      	ldrb	r2, [r2, #0]
 8001010:	4610      	mov	r0, r2
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	6811      	ldr	r1, [r2, #0]
 8001016:	ea43 0200 	orr.w	r2, r3, r0
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	440b      	add	r3, r1
 8001020:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001024:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3318      	adds	r3, #24
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	4413      	add	r3, r2
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	6811      	ldr	r1, [r2, #0]
 8001038:	f043 0201 	orr.w	r2, r3, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3318      	adds	r3, #24
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	440b      	add	r3, r1
 8001044:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e00e      	b.n	8001068 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e006      	b.n	8001068 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
  }
}
 8001068:	4618      	mov	r0, r3
 800106a:	3724      	adds	r7, #36	@ 0x24
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001072:	b480      	push	{r7}
 8001074:	b087      	sub	sp, #28
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001086:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001088:	7dfb      	ldrb	r3, [r7, #23]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d003      	beq.n	8001096 <HAL_CAN_GetRxMessage+0x24>
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	2b02      	cmp	r3, #2
 8001092:	f040 8103 	bne.w	800129c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10e      	bne.n	80010ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d116      	bne.n	80010d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e0f7      	b.n	80012aa <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d107      	bne.n	80010d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e0e8      	b.n	80012aa <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	331b      	adds	r3, #27
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	4413      	add	r3, r2
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0204 	and.w	r2, r3, #4
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10c      	bne.n	8001110 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	331b      	adds	r3, #27
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	4413      	add	r3, r2
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	0d5b      	lsrs	r3, r3, #21
 8001106:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	e00b      	b.n	8001128 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	331b      	adds	r3, #27
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	4413      	add	r3, r2
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	08db      	lsrs	r3, r3, #3
 8001120:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	331b      	adds	r3, #27
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	4413      	add	r3, r2
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0202 	and.w	r2, r3, #2
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	331b      	adds	r3, #27
 8001146:	011b      	lsls	r3, r3, #4
 8001148:	4413      	add	r3, r2
 800114a:	3304      	adds	r3, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2208      	movs	r2, #8
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	e00b      	b.n	8001176 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	331b      	adds	r3, #27
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	4413      	add	r3, r2
 800116a:	3304      	adds	r3, #4
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 020f 	and.w	r2, r3, #15
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	331b      	adds	r3, #27
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	4413      	add	r3, r2
 8001182:	3304      	adds	r3, #4
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	b2da      	uxtb	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	331b      	adds	r3, #27
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	4413      	add	r3, r2
 800119a:	3304      	adds	r3, #4
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	0c1b      	lsrs	r3, r3, #16
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	4413      	add	r3, r2
 80011b0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	4413      	add	r3, r2
 80011c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	0a1a      	lsrs	r2, r3, #8
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	4413      	add	r3, r2
 80011e0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	0c1a      	lsrs	r2, r3, #16
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	3302      	adds	r3, #2
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	4413      	add	r3, r2
 80011fa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	0e1a      	lsrs	r2, r3, #24
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	3303      	adds	r3, #3
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	4413      	add	r3, r2
 8001214:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	3304      	adds	r3, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	4413      	add	r3, r2
 800122c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	0a1a      	lsrs	r2, r3, #8
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	3305      	adds	r3, #5
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	011b      	lsls	r3, r3, #4
 8001244:	4413      	add	r3, r2
 8001246:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	0c1a      	lsrs	r2, r3, #16
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	3306      	adds	r3, #6
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	4413      	add	r3, r2
 8001260:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	0e1a      	lsrs	r2, r3, #24
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	3307      	adds	r3, #7
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d108      	bne.n	8001288 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68da      	ldr	r2, [r3, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f042 0220 	orr.w	r2, r2, #32
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	e007      	b.n	8001298 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	691a      	ldr	r2, [r3, #16]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0220 	orr.w	r2, r2, #32
 8001296:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	e006      	b.n	80012aa <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
  }
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	371c      	adds	r7, #28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d002      	beq.n	80012d2 <HAL_CAN_ActivateNotification+0x1e>
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d109      	bne.n	80012e6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6959      	ldr	r1, [r3, #20]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e006      	b.n	80012f4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
  }
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b08a      	sub	sp, #40	@ 0x28
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d07c      	beq.n	800143e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d023      	beq.n	8001396 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2201      	movs	r2, #1
 8001354:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7fe ffc5 	bl	80002f0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001366:	e016      	b.n	8001396 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001374:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
 800137a:	e00c      	b.n	8001396 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d004      	beq.n	8001390 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001388:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
 800138e:	e002      	b.n	8001396 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f96b 	bl	800166c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800139c:	2b00      	cmp	r3, #0
 800139e:	d024      	beq.n	80013ea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7fe ffbf 	bl	8000338 <HAL_CAN_TxMailbox1CompleteCallback>
 80013ba:	e016      	b.n	80013ea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d004      	beq.n	80013d0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ce:	e00c      	b.n	80013ea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d004      	beq.n	80013e4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013e2:	e002      	b.n	80013ea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f94a 	bl	800167e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d024      	beq.n	800143e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7fe ffb9 	bl	8000380 <HAL_CAN_TxMailbox2CompleteCallback>
 800140e:	e016      	b.n	800143e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d004      	beq.n	8001424 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800141a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
 8001422:	e00c      	b.n	800143e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d004      	beq.n	8001438 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
 8001436:	e002      	b.n	800143e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 f929 	bl	8001690 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00c      	beq.n	8001462 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001454:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2210      	movs	r2, #16
 8001460:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00b      	beq.n	8001484 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2208      	movs	r2, #8
 800147c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f90f 	bl	80016a2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7fe ff93 	bl	80003c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00c      	beq.n	80014c6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d007      	beq.n	80014c6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2210      	movs	r2, #16
 80014c4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	f003 0320 	and.w	r3, r3, #32
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00b      	beq.n	80014e8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2208      	movs	r2, #8
 80014e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f8ef 	bl	80016c6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f8d7 	bl	80016b4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00b      	beq.n	8001528 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	2b00      	cmp	r3, #0
 8001518:	d006      	beq.n	8001528 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2210      	movs	r2, #16
 8001520:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f8d8 	bl	80016d8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00b      	beq.n	800154a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2208      	movs	r2, #8
 8001542:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f8d0 	bl	80016ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d07b      	beq.n	800164c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	2b00      	cmp	r3, #0
 800155c:	d072      	beq.n	8001644 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d043      	beq.n	8001644 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d03e      	beq.n	8001644 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80015cc:	2b60      	cmp	r3, #96	@ 0x60
 80015ce:	d02b      	beq.n	8001628 <HAL_CAN_IRQHandler+0x32a>
 80015d0:	2b60      	cmp	r3, #96	@ 0x60
 80015d2:	d82e      	bhi.n	8001632 <HAL_CAN_IRQHandler+0x334>
 80015d4:	2b50      	cmp	r3, #80	@ 0x50
 80015d6:	d022      	beq.n	800161e <HAL_CAN_IRQHandler+0x320>
 80015d8:	2b50      	cmp	r3, #80	@ 0x50
 80015da:	d82a      	bhi.n	8001632 <HAL_CAN_IRQHandler+0x334>
 80015dc:	2b40      	cmp	r3, #64	@ 0x40
 80015de:	d019      	beq.n	8001614 <HAL_CAN_IRQHandler+0x316>
 80015e0:	2b40      	cmp	r3, #64	@ 0x40
 80015e2:	d826      	bhi.n	8001632 <HAL_CAN_IRQHandler+0x334>
 80015e4:	2b30      	cmp	r3, #48	@ 0x30
 80015e6:	d010      	beq.n	800160a <HAL_CAN_IRQHandler+0x30c>
 80015e8:	2b30      	cmp	r3, #48	@ 0x30
 80015ea:	d822      	bhi.n	8001632 <HAL_CAN_IRQHandler+0x334>
 80015ec:	2b10      	cmp	r3, #16
 80015ee:	d002      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x2f8>
 80015f0:	2b20      	cmp	r3, #32
 80015f2:	d005      	beq.n	8001600 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80015f4:	e01d      	b.n	8001632 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015fe:	e019      	b.n	8001634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001608:	e014      	b.n	8001634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160c:	f043 0320 	orr.w	r3, r3, #32
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001612:	e00f      	b.n	8001634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800161c:	e00a      	b.n	8001634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001626:	e005      	b.n	8001634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001630:	e000      	b.n	8001634 <HAL_CAN_IRQHandler+0x336>
            break;
 8001632:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	699a      	ldr	r2, [r3, #24]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001642:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2204      	movs	r2, #4
 800164a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800164c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164e:	2b00      	cmp	r3, #0
 8001650:	d008      	beq.n	8001664 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7fe fedc 	bl	800041c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	@ 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001718:	4013      	ands	r3, r2
 800171a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001724:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800172c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172e:	4a04      	ldr	r2, [pc, #16]	@ (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	60d3      	str	r3, [r2, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001748:	4b04      	ldr	r3, [pc, #16]	@ (800175c <__NVIC_GetPriorityGrouping+0x18>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	f003 0307 	and.w	r3, r3, #7
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db0b      	blt.n	800178a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	4906      	ldr	r1, [pc, #24]	@ (8001794 <__NVIC_EnableIRQ+0x34>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	2001      	movs	r0, #1
 8001782:	fa00 f202 	lsl.w	r2, r0, r2
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100

08001798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db0a      	blt.n	80017c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	490c      	ldr	r1, [pc, #48]	@ (80017e4 <__NVIC_SetPriority+0x4c>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	0112      	lsls	r2, r2, #4
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	440b      	add	r3, r1
 80017bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c0:	e00a      	b.n	80017d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4908      	ldr	r1, [pc, #32]	@ (80017e8 <__NVIC_SetPriority+0x50>)
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	3b04      	subs	r3, #4
 80017d0:	0112      	lsls	r2, r2, #4
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	440b      	add	r3, r1
 80017d6:	761a      	strb	r2, [r3, #24]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	@ 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f1c3 0307 	rsb	r3, r3, #7
 8001806:	2b04      	cmp	r3, #4
 8001808:	bf28      	it	cs
 800180a:	2304      	movcs	r3, #4
 800180c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3304      	adds	r3, #4
 8001812:	2b06      	cmp	r3, #6
 8001814:	d902      	bls.n	800181c <NVIC_EncodePriority+0x30>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3b03      	subs	r3, #3
 800181a:	e000      	b.n	800181e <NVIC_EncodePriority+0x32>
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	f04f 32ff 	mov.w	r2, #4294967295
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43da      	mvns	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	401a      	ands	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001834:	f04f 31ff 	mov.w	r1, #4294967295
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43d9      	mvns	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	4313      	orrs	r3, r2
         );
}
 8001846:	4618      	mov	r0, r3
 8001848:	3724      	adds	r7, #36	@ 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001860:	d301      	bcc.n	8001866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001862:	2301      	movs	r3, #1
 8001864:	e00f      	b.n	8001886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001866:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <SysTick_Config+0x40>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186e:	210f      	movs	r1, #15
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f7ff ff90 	bl	8001798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001878:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <SysTick_Config+0x40>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187e:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <SysTick_Config+0x40>)
 8001880:	2207      	movs	r2, #7
 8001882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	e000e010 	.word	0xe000e010

08001894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ff2d 	bl	80016fc <__NVIC_SetPriorityGrouping>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018bc:	f7ff ff42 	bl	8001744 <__NVIC_GetPriorityGrouping>
 80018c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	6978      	ldr	r0, [r7, #20]
 80018c8:	f7ff ff90 	bl	80017ec <NVIC_EncodePriority>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff5f 	bl	8001798 <__NVIC_SetPriority>
}
 80018da:	bf00      	nop
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff35 	bl	8001760 <__NVIC_EnableIRQ>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffa2 	bl	8001850 <SysTick_Config>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001916:	b480      	push	{r7}
 8001918:	b085      	sub	sp, #20
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d008      	beq.n	8001940 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2204      	movs	r2, #4
 8001932:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e020      	b.n	8001982 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 020e 	bic.w	r2, r2, #14
 800194e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001968:	2101      	movs	r1, #1
 800196a:	fa01 f202 	lsl.w	r2, r1, r2
 800196e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001980:	7bfb      	ldrb	r3, [r7, #15]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d005      	beq.n	80019b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2204      	movs	r2, #4
 80019a8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	e051      	b.n	8001a54 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 020e 	bic.w	r2, r2, #14
 80019be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0201 	bic.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a22      	ldr	r2, [pc, #136]	@ (8001a60 <HAL_DMA_Abort_IT+0xd4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d029      	beq.n	8001a2e <HAL_DMA_Abort_IT+0xa2>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a21      	ldr	r2, [pc, #132]	@ (8001a64 <HAL_DMA_Abort_IT+0xd8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d022      	beq.n	8001a2a <HAL_DMA_Abort_IT+0x9e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a68 <HAL_DMA_Abort_IT+0xdc>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d01a      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x98>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a6c <HAL_DMA_Abort_IT+0xe0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d012      	beq.n	8001a1e <HAL_DMA_Abort_IT+0x92>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a70 <HAL_DMA_Abort_IT+0xe4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00a      	beq.n	8001a18 <HAL_DMA_Abort_IT+0x8c>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a1b      	ldr	r2, [pc, #108]	@ (8001a74 <HAL_DMA_Abort_IT+0xe8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d102      	bne.n	8001a12 <HAL_DMA_Abort_IT+0x86>
 8001a0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001a10:	e00e      	b.n	8001a30 <HAL_DMA_Abort_IT+0xa4>
 8001a12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a16:	e00b      	b.n	8001a30 <HAL_DMA_Abort_IT+0xa4>
 8001a18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a1c:	e008      	b.n	8001a30 <HAL_DMA_Abort_IT+0xa4>
 8001a1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a22:	e005      	b.n	8001a30 <HAL_DMA_Abort_IT+0xa4>
 8001a24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a28:	e002      	b.n	8001a30 <HAL_DMA_Abort_IT+0xa4>
 8001a2a:	2310      	movs	r3, #16
 8001a2c:	e000      	b.n	8001a30 <HAL_DMA_Abort_IT+0xa4>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	4a11      	ldr	r2, [pc, #68]	@ (8001a78 <HAL_DMA_Abort_IT+0xec>)
 8001a32:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4798      	blx	r3
    } 
  }
  return status;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40020008 	.word	0x40020008
 8001a64:	4002001c 	.word	0x4002001c
 8001a68:	40020030 	.word	0x40020030
 8001a6c:	40020044 	.word	0x40020044
 8001a70:	40020058 	.word	0x40020058
 8001a74:	4002006c 	.word	0x4002006c
 8001a78:	40020000 	.word	0x40020000

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b08b      	sub	sp, #44	@ 0x2c
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8e:	e169      	b.n	8001d64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a90:	2201      	movs	r2, #1
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	f040 8158 	bne.w	8001d5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4a9a      	ldr	r2, [pc, #616]	@ (8001d1c <HAL_GPIO_Init+0x2a0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d05e      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ab8:	4a98      	ldr	r2, [pc, #608]	@ (8001d1c <HAL_GPIO_Init+0x2a0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d875      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001abe:	4a98      	ldr	r2, [pc, #608]	@ (8001d20 <HAL_GPIO_Init+0x2a4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d058      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ac4:	4a96      	ldr	r2, [pc, #600]	@ (8001d20 <HAL_GPIO_Init+0x2a4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d86f      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001aca:	4a96      	ldr	r2, [pc, #600]	@ (8001d24 <HAL_GPIO_Init+0x2a8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d052      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ad0:	4a94      	ldr	r2, [pc, #592]	@ (8001d24 <HAL_GPIO_Init+0x2a8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d869      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001ad6:	4a94      	ldr	r2, [pc, #592]	@ (8001d28 <HAL_GPIO_Init+0x2ac>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d04c      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001adc:	4a92      	ldr	r2, [pc, #584]	@ (8001d28 <HAL_GPIO_Init+0x2ac>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d863      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001ae2:	4a92      	ldr	r2, [pc, #584]	@ (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d046      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ae8:	4a90      	ldr	r2, [pc, #576]	@ (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d85d      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001aee:	2b12      	cmp	r3, #18
 8001af0:	d82a      	bhi.n	8001b48 <HAL_GPIO_Init+0xcc>
 8001af2:	2b12      	cmp	r3, #18
 8001af4:	d859      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001af6:	a201      	add	r2, pc, #4	@ (adr r2, 8001afc <HAL_GPIO_Init+0x80>)
 8001af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afc:	08001b77 	.word	0x08001b77
 8001b00:	08001b51 	.word	0x08001b51
 8001b04:	08001b63 	.word	0x08001b63
 8001b08:	08001ba5 	.word	0x08001ba5
 8001b0c:	08001bab 	.word	0x08001bab
 8001b10:	08001bab 	.word	0x08001bab
 8001b14:	08001bab 	.word	0x08001bab
 8001b18:	08001bab 	.word	0x08001bab
 8001b1c:	08001bab 	.word	0x08001bab
 8001b20:	08001bab 	.word	0x08001bab
 8001b24:	08001bab 	.word	0x08001bab
 8001b28:	08001bab 	.word	0x08001bab
 8001b2c:	08001bab 	.word	0x08001bab
 8001b30:	08001bab 	.word	0x08001bab
 8001b34:	08001bab 	.word	0x08001bab
 8001b38:	08001bab 	.word	0x08001bab
 8001b3c:	08001bab 	.word	0x08001bab
 8001b40:	08001b59 	.word	0x08001b59
 8001b44:	08001b6d 	.word	0x08001b6d
 8001b48:	4a79      	ldr	r2, [pc, #484]	@ (8001d30 <HAL_GPIO_Init+0x2b4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d013      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b4e:	e02c      	b.n	8001baa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	623b      	str	r3, [r7, #32]
          break;
 8001b56:	e029      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	623b      	str	r3, [r7, #32]
          break;
 8001b60:	e024      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	3308      	adds	r3, #8
 8001b68:	623b      	str	r3, [r7, #32]
          break;
 8001b6a:	e01f      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	330c      	adds	r3, #12
 8001b72:	623b      	str	r3, [r7, #32]
          break;
 8001b74:	e01a      	b.n	8001bac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	623b      	str	r3, [r7, #32]
          break;
 8001b82:	e013      	b.n	8001bac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	611a      	str	r2, [r3, #16]
          break;
 8001b96:	e009      	b.n	8001bac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	615a      	str	r2, [r3, #20]
          break;
 8001ba2:	e003      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
          break;
 8001ba8:	e000      	b.n	8001bac <HAL_GPIO_Init+0x130>
          break;
 8001baa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2bff      	cmp	r3, #255	@ 0xff
 8001bb0:	d801      	bhi.n	8001bb6 <HAL_GPIO_Init+0x13a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	e001      	b.n	8001bba <HAL_GPIO_Init+0x13e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2bff      	cmp	r3, #255	@ 0xff
 8001bc0:	d802      	bhi.n	8001bc8 <HAL_GPIO_Init+0x14c>
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	e002      	b.n	8001bce <HAL_GPIO_Init+0x152>
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	3b08      	subs	r3, #8
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	210f      	movs	r1, #15
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	401a      	ands	r2, r3
 8001be0:	6a39      	ldr	r1, [r7, #32]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	431a      	orrs	r2, r3
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 80b1 	beq.w	8001d5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bfc:	4b4d      	ldr	r3, [pc, #308]	@ (8001d34 <HAL_GPIO_Init+0x2b8>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a4c      	ldr	r2, [pc, #304]	@ (8001d34 <HAL_GPIO_Init+0x2b8>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b4a      	ldr	r3, [pc, #296]	@ (8001d34 <HAL_GPIO_Init+0x2b8>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c14:	4a48      	ldr	r2, [pc, #288]	@ (8001d38 <HAL_GPIO_Init+0x2bc>)
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4013      	ands	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a40      	ldr	r2, [pc, #256]	@ (8001d3c <HAL_GPIO_Init+0x2c0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d013      	beq.n	8001c68 <HAL_GPIO_Init+0x1ec>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a3f      	ldr	r2, [pc, #252]	@ (8001d40 <HAL_GPIO_Init+0x2c4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00d      	beq.n	8001c64 <HAL_GPIO_Init+0x1e8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d44 <HAL_GPIO_Init+0x2c8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d007      	beq.n	8001c60 <HAL_GPIO_Init+0x1e4>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a3d      	ldr	r2, [pc, #244]	@ (8001d48 <HAL_GPIO_Init+0x2cc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d101      	bne.n	8001c5c <HAL_GPIO_Init+0x1e0>
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e006      	b.n	8001c6a <HAL_GPIO_Init+0x1ee>
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	e004      	b.n	8001c6a <HAL_GPIO_Init+0x1ee>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e002      	b.n	8001c6a <HAL_GPIO_Init+0x1ee>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_GPIO_Init+0x1ee>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c6c:	f002 0203 	and.w	r2, r2, #3
 8001c70:	0092      	lsls	r2, r2, #2
 8001c72:	4093      	lsls	r3, r2
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c7a:	492f      	ldr	r1, [pc, #188]	@ (8001d38 <HAL_GPIO_Init+0x2bc>)
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d006      	beq.n	8001ca2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c94:	4b2d      	ldr	r3, [pc, #180]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	492c      	ldr	r1, [pc, #176]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]
 8001ca0:	e006      	b.n	8001cb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	4928      	ldr	r1, [pc, #160]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cbc:	4b23      	ldr	r3, [pc, #140]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	4922      	ldr	r1, [pc, #136]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	60cb      	str	r3, [r1, #12]
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cca:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	491e      	ldr	r1, [pc, #120]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ce4:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	4918      	ldr	r1, [pc, #96]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cf2:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	4914      	ldr	r1, [pc, #80]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d021      	beq.n	8001d50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	490e      	ldr	r1, [pc, #56]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
 8001d18:	e021      	b.n	8001d5e <HAL_GPIO_Init+0x2e2>
 8001d1a:	bf00      	nop
 8001d1c:	10320000 	.word	0x10320000
 8001d20:	10310000 	.word	0x10310000
 8001d24:	10220000 	.word	0x10220000
 8001d28:	10210000 	.word	0x10210000
 8001d2c:	10120000 	.word	0x10120000
 8001d30:	10110000 	.word	0x10110000
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	40010800 	.word	0x40010800
 8001d40:	40010c00 	.word	0x40010c00
 8001d44:	40011000 	.word	0x40011000
 8001d48:	40011400 	.word	0x40011400
 8001d4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d50:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	4909      	ldr	r1, [pc, #36]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	3301      	adds	r3, #1
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f47f ae8e 	bne.w	8001a90 <HAL_GPIO_Init+0x14>
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	372c      	adds	r7, #44	@ 0x2c
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	40010400 	.word	0x40010400

08001d84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	041a      	lsls	r2, r3, #16
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	43d9      	mvns	r1, r3
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	400b      	ands	r3, r1
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	611a      	str	r2, [r3, #16]
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
	...

08001db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e272      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 8087 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd8:	4b92      	ldr	r3, [pc, #584]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d00c      	beq.n	8001dfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001de4:	4b8f      	ldr	r3, [pc, #572]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d112      	bne.n	8001e16 <HAL_RCC_OscConfig+0x5e>
 8001df0:	4b8c      	ldr	r3, [pc, #560]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dfc:	d10b      	bne.n	8001e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfe:	4b89      	ldr	r3, [pc, #548]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d06c      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x12c>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d168      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e24c      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x76>
 8001e20:	4b80      	ldr	r3, [pc, #512]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a7f      	ldr	r2, [pc, #508]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	e02e      	b.n	8001e8c <HAL_RCC_OscConfig+0xd4>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x98>
 8001e36:	4b7b      	ldr	r3, [pc, #492]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a7a      	ldr	r2, [pc, #488]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4b78      	ldr	r3, [pc, #480]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a77      	ldr	r2, [pc, #476]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e01d      	b.n	8001e8c <HAL_RCC_OscConfig+0xd4>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0xbc>
 8001e5a:	4b72      	ldr	r3, [pc, #456]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a71      	ldr	r2, [pc, #452]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b6f      	ldr	r3, [pc, #444]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a6e      	ldr	r2, [pc, #440]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e00b      	b.n	8001e8c <HAL_RCC_OscConfig+0xd4>
 8001e74:	4b6b      	ldr	r3, [pc, #428]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a6a      	ldr	r2, [pc, #424]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b68      	ldr	r3, [pc, #416]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a67      	ldr	r2, [pc, #412]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d013      	beq.n	8001ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7fe fde8 	bl	8000a68 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7fe fde4 	bl	8000a68 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	@ 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e200      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	4b5d      	ldr	r3, [pc, #372]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0xe4>
 8001eba:	e014      	b.n	8001ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7fe fdd4 	bl	8000a68 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec4:	f7fe fdd0 	bl	8000a68 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b64      	cmp	r3, #100	@ 0x64
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e1ec      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed6:	4b53      	ldr	r3, [pc, #332]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x10c>
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d063      	beq.n	8001fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00b      	beq.n	8001f16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001efe:	4b49      	ldr	r3, [pc, #292]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d11c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x18c>
 8001f0a:	4b46      	ldr	r3, [pc, #280]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d116      	bne.n	8001f44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f16:	4b43      	ldr	r3, [pc, #268]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <HAL_RCC_OscConfig+0x176>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e1c0      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4939      	ldr	r1, [pc, #228]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f42:	e03a      	b.n	8001fba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d020      	beq.n	8001f8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f4c:	4b36      	ldr	r3, [pc, #216]	@ (8002028 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7fe fd89 	bl	8000a68 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5a:	f7fe fd85 	bl	8000a68 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e1a1      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f78:	4b2a      	ldr	r3, [pc, #168]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4927      	ldr	r1, [pc, #156]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	600b      	str	r3, [r1, #0]
 8001f8c:	e015      	b.n	8001fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8e:	4b26      	ldr	r3, [pc, #152]	@ (8002028 <HAL_RCC_OscConfig+0x270>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7fe fd68 	bl	8000a68 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9c:	f7fe fd64 	bl	8000a68 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e180      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fae:	4b1d      	ldr	r3, [pc, #116]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d03a      	beq.n	800203c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d019      	beq.n	8002002 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fce:	4b17      	ldr	r3, [pc, #92]	@ (800202c <HAL_RCC_OscConfig+0x274>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd4:	f7fe fd48 	bl	8000a68 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fdc:	f7fe fd44 	bl	8000a68 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e160      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fee:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f000 face 	bl	800259c <RCC_Delay>
 8002000:	e01c      	b.n	800203c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002002:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <HAL_RCC_OscConfig+0x274>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002008:	f7fe fd2e 	bl	8000a68 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200e:	e00f      	b.n	8002030 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002010:	f7fe fd2a 	bl	8000a68 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d908      	bls.n	8002030 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e146      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
 8002028:	42420000 	.word	0x42420000
 800202c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002030:	4b92      	ldr	r3, [pc, #584]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e9      	bne.n	8002010 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80a6 	beq.w	8002196 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204e:	4b8b      	ldr	r3, [pc, #556]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10d      	bne.n	8002076 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	4b88      	ldr	r3, [pc, #544]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4a87      	ldr	r2, [pc, #540]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002064:	61d3      	str	r3, [r2, #28]
 8002066:	4b85      	ldr	r3, [pc, #532]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002072:	2301      	movs	r3, #1
 8002074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002076:	4b82      	ldr	r3, [pc, #520]	@ (8002280 <HAL_RCC_OscConfig+0x4c8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d118      	bne.n	80020b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002082:	4b7f      	ldr	r3, [pc, #508]	@ (8002280 <HAL_RCC_OscConfig+0x4c8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a7e      	ldr	r2, [pc, #504]	@ (8002280 <HAL_RCC_OscConfig+0x4c8>)
 8002088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208e:	f7fe fceb 	bl	8000a68 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002096:	f7fe fce7 	bl	8000a68 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b64      	cmp	r3, #100	@ 0x64
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e103      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	4b75      	ldr	r3, [pc, #468]	@ (8002280 <HAL_RCC_OscConfig+0x4c8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d106      	bne.n	80020ca <HAL_RCC_OscConfig+0x312>
 80020bc:	4b6f      	ldr	r3, [pc, #444]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4a6e      	ldr	r2, [pc, #440]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6213      	str	r3, [r2, #32]
 80020c8:	e02d      	b.n	8002126 <HAL_RCC_OscConfig+0x36e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x334>
 80020d2:	4b6a      	ldr	r3, [pc, #424]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4a69      	ldr	r2, [pc, #420]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6213      	str	r3, [r2, #32]
 80020de:	4b67      	ldr	r3, [pc, #412]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a66      	ldr	r2, [pc, #408]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	6213      	str	r3, [r2, #32]
 80020ea:	e01c      	b.n	8002126 <HAL_RCC_OscConfig+0x36e>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b05      	cmp	r3, #5
 80020f2:	d10c      	bne.n	800210e <HAL_RCC_OscConfig+0x356>
 80020f4:	4b61      	ldr	r3, [pc, #388]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4a60      	ldr	r2, [pc, #384]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6213      	str	r3, [r2, #32]
 8002100:	4b5e      	ldr	r3, [pc, #376]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4a5d      	ldr	r2, [pc, #372]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6213      	str	r3, [r2, #32]
 800210c:	e00b      	b.n	8002126 <HAL_RCC_OscConfig+0x36e>
 800210e:	4b5b      	ldr	r3, [pc, #364]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4a5a      	ldr	r2, [pc, #360]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6213      	str	r3, [r2, #32]
 800211a:	4b58      	ldr	r3, [pc, #352]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a57      	ldr	r2, [pc, #348]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d015      	beq.n	800215a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212e:	f7fe fc9b 	bl	8000a68 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7fe fc97 	bl	8000a68 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0b1      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214c:	4b4b      	ldr	r3, [pc, #300]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ee      	beq.n	8002136 <HAL_RCC_OscConfig+0x37e>
 8002158:	e014      	b.n	8002184 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215a:	f7fe fc85 	bl	8000a68 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002160:	e00a      	b.n	8002178 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7fe fc81 	bl	8000a68 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002170:	4293      	cmp	r3, r2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e09b      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002178:	4b40      	ldr	r3, [pc, #256]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1ee      	bne.n	8002162 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002184:	7dfb      	ldrb	r3, [r7, #23]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218a:	4b3c      	ldr	r3, [pc, #240]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4a3b      	ldr	r2, [pc, #236]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002194:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8087 	beq.w	80022ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a0:	4b36      	ldr	r3, [pc, #216]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d061      	beq.n	8002270 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d146      	bne.n	8002242 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b4:	4b33      	ldr	r3, [pc, #204]	@ (8002284 <HAL_RCC_OscConfig+0x4cc>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ba:	f7fe fc55 	bl	8000a68 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c2:	f7fe fc51 	bl	8000a68 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e06d      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d4:	4b29      	ldr	r3, [pc, #164]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f0      	bne.n	80021c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e8:	d108      	bne.n	80021fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ea:	4b24      	ldr	r3, [pc, #144]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	4921      	ldr	r1, [pc, #132]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021fc:	4b1f      	ldr	r3, [pc, #124]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a19      	ldr	r1, [r3, #32]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	430b      	orrs	r3, r1
 800220e:	491b      	ldr	r1, [pc, #108]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7fe fc25 	bl	8000a68 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7fe fc21 	bl	8000a68 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e03d      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002234:	4b11      	ldr	r3, [pc, #68]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x46a>
 8002240:	e035      	b.n	80022ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7fe fc0e 	bl	8000a68 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002250:	f7fe fc0a 	bl	8000a68 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e026      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002262:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x498>
 800226e:	e01e      	b.n	80022ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d107      	bne.n	8002288 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e019      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
 800227c:	40021000 	.word	0x40021000
 8002280:	40007000 	.word	0x40007000
 8002284:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002288:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <HAL_RCC_OscConfig+0x500>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	429a      	cmp	r2, r3
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000

080022bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0d0      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d0:	4b6a      	ldr	r3, [pc, #424]	@ (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d910      	bls.n	8002300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b67      	ldr	r3, [pc, #412]	@ (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 0207 	bic.w	r2, r3, #7
 80022e6:	4965      	ldr	r1, [pc, #404]	@ (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	4b63      	ldr	r3, [pc, #396]	@ (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0b8      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d020      	beq.n	800234e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002318:	4b59      	ldr	r3, [pc, #356]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4a58      	ldr	r2, [pc, #352]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002322:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002330:	4b53      	ldr	r3, [pc, #332]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a52      	ldr	r2, [pc, #328]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800233a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800233c:	4b50      	ldr	r3, [pc, #320]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	494d      	ldr	r1, [pc, #308]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d040      	beq.n	80023dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d107      	bne.n	8002372 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b47      	ldr	r3, [pc, #284]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d115      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e07f      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b41      	ldr	r3, [pc, #260]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e073      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238a:	4b3d      	ldr	r3, [pc, #244]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e06b      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239a:	4b39      	ldr	r3, [pc, #228]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f023 0203 	bic.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4936      	ldr	r1, [pc, #216]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ac:	f7fe fb5c 	bl	8000a68 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b4:	f7fe fb58 	bl	8000a68 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e053      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 020c 	and.w	r2, r3, #12
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1eb      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023dc:	4b27      	ldr	r3, [pc, #156]	@ (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d210      	bcs.n	800240c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b24      	ldr	r3, [pc, #144]	@ (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 0207 	bic.w	r2, r3, #7
 80023f2:	4922      	ldr	r1, [pc, #136]	@ (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b20      	ldr	r3, [pc, #128]	@ (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e032      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002418:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4916      	ldr	r1, [pc, #88]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d009      	beq.n	800244a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002436:	4b12      	ldr	r3, [pc, #72]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	490e      	ldr	r1, [pc, #56]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	4313      	orrs	r3, r2
 8002448:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800244a:	f000 f821 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 800244e:	4602      	mov	r2, r0
 8002450:	4b0b      	ldr	r3, [pc, #44]	@ (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	490a      	ldr	r1, [pc, #40]	@ (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 800245c:	5ccb      	ldrb	r3, [r1, r3]
 800245e:	fa22 f303 	lsr.w	r3, r2, r3
 8002462:	4a09      	ldr	r2, [pc, #36]	@ (8002488 <HAL_RCC_ClockConfig+0x1cc>)
 8002464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002466:	4b09      	ldr	r3, [pc, #36]	@ (800248c <HAL_RCC_ClockConfig+0x1d0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe faba 	bl	80009e4 <HAL_InitTick>

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40022000 	.word	0x40022000
 8002480:	40021000 	.word	0x40021000
 8002484:	08003bb4 	.word	0x08003bb4
 8002488:	20000000 	.word	0x20000000
 800248c:	20000004 	.word	0x20000004

08002490 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x94>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d002      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0x30>
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d003      	beq.n	80024c6 <HAL_RCC_GetSysClockFreq+0x36>
 80024be:	e027      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024c0:	4b19      	ldr	r3, [pc, #100]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x98>)
 80024c2:	613b      	str	r3, [r7, #16]
      break;
 80024c4:	e027      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	0c9b      	lsrs	r3, r3, #18
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	4a17      	ldr	r2, [pc, #92]	@ (800252c <HAL_RCC_GetSysClockFreq+0x9c>)
 80024d0:	5cd3      	ldrb	r3, [r2, r3]
 80024d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d010      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024de:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x94>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	0c5b      	lsrs	r3, r3, #17
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	4a11      	ldr	r2, [pc, #68]	@ (8002530 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x98>)
 80024f2:	fb03 f202 	mul.w	r2, r3, r2
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	e004      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a0c      	ldr	r2, [pc, #48]	@ (8002534 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002504:	fb02 f303 	mul.w	r3, r2, r3
 8002508:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	613b      	str	r3, [r7, #16]
      break;
 800250e:	e002      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002510:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x98>)
 8002512:	613b      	str	r3, [r7, #16]
      break;
 8002514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002516:	693b      	ldr	r3, [r7, #16]
}
 8002518:	4618      	mov	r0, r3
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	007a1200 	.word	0x007a1200
 800252c:	08003bcc 	.word	0x08003bcc
 8002530:	08003bdc 	.word	0x08003bdc
 8002534:	003d0900 	.word	0x003d0900

08002538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800253c:	4b02      	ldr	r3, [pc, #8]	@ (8002548 <HAL_RCC_GetHCLKFreq+0x10>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	20000000 	.word	0x20000000

0800254c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002550:	f7ff fff2 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8002554:	4602      	mov	r2, r0
 8002556:	4b05      	ldr	r3, [pc, #20]	@ (800256c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	4903      	ldr	r1, [pc, #12]	@ (8002570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002562:	5ccb      	ldrb	r3, [r1, r3]
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	08003bc4 	.word	0x08003bc4

08002574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002578:	f7ff ffde 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	0adb      	lsrs	r3, r3, #11
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4903      	ldr	r1, [pc, #12]	@ (8002598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	08003bc4 	.word	0x08003bc4

0800259c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025a4:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <RCC_Delay+0x34>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <RCC_Delay+0x38>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	0a5b      	lsrs	r3, r3, #9
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	fb02 f303 	mul.w	r3, r2, r3
 80025b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025b8:	bf00      	nop
  }
  while (Delay --);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1e5a      	subs	r2, r3, #1
 80025be:	60fa      	str	r2, [r7, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f9      	bne.n	80025b8 <RCC_Delay+0x1c>
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	20000000 	.word	0x20000000
 80025d4:	10624dd3 	.word	0x10624dd3

080025d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e042      	b.n	8002670 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d106      	bne.n	8002604 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe f83a 	bl	8000678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2224      	movs	r2, #36	@ 0x24
 8002608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800261a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fd63 	bl	80030e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002630:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002640:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002650:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	@ 0x28
 800267c:	af02      	add	r7, sp, #8
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	4613      	mov	r3, r2
 8002686:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b20      	cmp	r3, #32
 8002696:	d175      	bne.n	8002784 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_UART_Transmit+0x2c>
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e06e      	b.n	8002786 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2221      	movs	r2, #33	@ 0x21
 80026b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026b6:	f7fe f9d7 	bl	8000a68 <HAL_GetTick>
 80026ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	88fa      	ldrh	r2, [r7, #6]
 80026c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	88fa      	ldrh	r2, [r7, #6]
 80026c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026d0:	d108      	bne.n	80026e4 <HAL_UART_Transmit+0x6c>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d104      	bne.n	80026e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	e003      	b.n	80026ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026ec:	e02e      	b.n	800274c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2200      	movs	r2, #0
 80026f6:	2180      	movs	r1, #128	@ 0x80
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fb01 	bl	8002d00 <UART_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e03a      	b.n	8002786 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10b      	bne.n	800272e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002724:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	3302      	adds	r3, #2
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	e007      	b.n	800273e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	3301      	adds	r3, #1
 800273c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1cb      	bne.n	80026ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2200      	movs	r2, #0
 800275e:	2140      	movs	r1, #64	@ 0x40
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 facd 	bl	8002d00 <UART_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e006      	b.n	8002786 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	e000      	b.n	8002786 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002784:	2302      	movs	r3, #2
  }
}
 8002786:	4618      	mov	r0, r3
 8002788:	3720      	adds	r7, #32
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b0ba      	sub	sp, #232	@ 0xe8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80027ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10f      	bne.n	80027f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_UART_IRQHandler+0x66>
 80027e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027e6:	f003 0320 	and.w	r3, r3, #32
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fbbc 	bl	8002f6c <UART_Receive_IT>
      return;
 80027f4:	e25b      	b.n	8002cae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 80de 	beq.w	80029bc <HAL_UART_IRQHandler+0x22c>
 8002800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d106      	bne.n	800281a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800280c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002810:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80d1 	beq.w	80029bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800281a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_UART_IRQHandler+0xae>
 8002826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800282a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002836:	f043 0201 	orr.w	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800283e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_UART_IRQHandler+0xd2>
 800284a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	f043 0202 	orr.w	r2, r3, #2
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00b      	beq.n	8002886 <HAL_UART_IRQHandler+0xf6>
 800286e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	f043 0204 	orr.w	r2, r3, #4
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d011      	beq.n	80028b6 <HAL_UART_IRQHandler+0x126>
 8002892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b00      	cmp	r3, #0
 800289c:	d105      	bne.n	80028aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800289e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f043 0208 	orr.w	r2, r3, #8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 81f2 	beq.w	8002ca4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_UART_IRQHandler+0x14e>
 80028cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fb47 	bl	8002f6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf14      	ite	ne
 80028ec:	2301      	movne	r3, #1
 80028ee:	2300      	moveq	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d103      	bne.n	800290a <HAL_UART_IRQHandler+0x17a>
 8002902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002906:	2b00      	cmp	r3, #0
 8002908:	d04f      	beq.n	80029aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fa51 	bl	8002db2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d041      	beq.n	80029a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3314      	adds	r3, #20
 8002924:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002928:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800292c:	e853 3f00 	ldrex	r3, [r3]
 8002930:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002934:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800293c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3314      	adds	r3, #20
 8002946:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800294a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800294e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002952:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002956:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800295a:	e841 2300 	strex	r3, r2, [r1]
 800295e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1d9      	bne.n	800291e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d013      	beq.n	800299a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002976:	4a7e      	ldr	r2, [pc, #504]	@ (8002b70 <HAL_UART_IRQHandler+0x3e0>)
 8002978:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff f804 	bl	800198c <HAL_DMA_Abort_IT>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d016      	beq.n	80029b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800298e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002994:	4610      	mov	r0, r2
 8002996:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002998:	e00e      	b.n	80029b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f99c 	bl	8002cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a0:	e00a      	b.n	80029b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f998 	bl	8002cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a8:	e006      	b.n	80029b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f994 	bl	8002cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80029b6:	e175      	b.n	8002ca4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b8:	bf00      	nop
    return;
 80029ba:	e173      	b.n	8002ca4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	f040 814f 	bne.w	8002c64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 8148 	beq.w	8002c64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 8141 	beq.w	8002c64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 80b6 	beq.w	8002b74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8145 	beq.w	8002ca8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a26:	429a      	cmp	r2, r3
 8002a28:	f080 813e 	bcs.w	8002ca8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a32:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	f000 8088 	beq.w	8002b50 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	330c      	adds	r3, #12
 8002a46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a4e:	e853 3f00 	ldrex	r3, [r3]
 8002a52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	330c      	adds	r3, #12
 8002a68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002a6c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a74:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002a78:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a7c:	e841 2300 	strex	r3, r2, [r1]
 8002a80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1d9      	bne.n	8002a40 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3314      	adds	r3, #20
 8002a92:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a96:	e853 3f00 	ldrex	r3, [r3]
 8002a9a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a9e:	f023 0301 	bic.w	r3, r3, #1
 8002aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3314      	adds	r3, #20
 8002aac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ab0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002ab4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002ab8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002abc:	e841 2300 	strex	r3, r2, [r1]
 8002ac0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ac2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1e1      	bne.n	8002a8c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	3314      	adds	r3, #20
 8002ace:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ad2:	e853 3f00 	ldrex	r3, [r3]
 8002ad6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002ad8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ade:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3314      	adds	r3, #20
 8002ae8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002aec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002aee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002af2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002af4:	e841 2300 	strex	r3, r2, [r1]
 8002af8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002afa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1e3      	bne.n	8002ac8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	330c      	adds	r3, #12
 8002b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b18:	e853 3f00 	ldrex	r3, [r3]
 8002b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b20:	f023 0310 	bic.w	r3, r3, #16
 8002b24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002b32:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b34:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b3a:	e841 2300 	strex	r3, r2, [r1]
 8002b3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1e3      	bne.n	8002b0e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fee3 	bl	8001916 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	4619      	mov	r1, r3
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f8bf 	bl	8002cea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b6c:	e09c      	b.n	8002ca8 <HAL_UART_IRQHandler+0x518>
 8002b6e:	bf00      	nop
 8002b70:	08002e77 	.word	0x08002e77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 808e 	beq.w	8002cac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8089 	beq.w	8002cac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	330c      	adds	r3, #12
 8002ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba4:	e853 3f00 	ldrex	r3, [r3]
 8002ba8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002bbe:	647a      	str	r2, [r7, #68]	@ 0x44
 8002bc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002bc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bc6:	e841 2300 	strex	r3, r2, [r1]
 8002bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1e3      	bne.n	8002b9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3314      	adds	r3, #20
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	e853 3f00 	ldrex	r3, [r3]
 8002be0:	623b      	str	r3, [r7, #32]
   return(result);
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3314      	adds	r3, #20
 8002bf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002bf6:	633a      	str	r2, [r7, #48]	@ 0x30
 8002bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bfe:	e841 2300 	strex	r3, r2, [r1]
 8002c02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1e3      	bne.n	8002bd2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	330c      	adds	r3, #12
 8002c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	e853 3f00 	ldrex	r3, [r3]
 8002c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 0310 	bic.w	r3, r3, #16
 8002c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	330c      	adds	r3, #12
 8002c38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002c3c:	61fa      	str	r2, [r7, #28]
 8002c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c40:	69b9      	ldr	r1, [r7, #24]
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	e841 2300 	strex	r3, r2, [r1]
 8002c48:	617b      	str	r3, [r7, #20]
   return(result);
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1e3      	bne.n	8002c18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f844 	bl	8002cea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c62:	e023      	b.n	8002cac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d009      	beq.n	8002c84 <HAL_UART_IRQHandler+0x4f4>
 8002c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f90e 	bl	8002e9e <UART_Transmit_IT>
    return;
 8002c82:	e014      	b.n	8002cae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00e      	beq.n	8002cae <HAL_UART_IRQHandler+0x51e>
 8002c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f94d 	bl	8002f3c <UART_EndTransmit_IT>
    return;
 8002ca2:	e004      	b.n	8002cae <HAL_UART_IRQHandler+0x51e>
    return;
 8002ca4:	bf00      	nop
 8002ca6:	e002      	b.n	8002cae <HAL_UART_IRQHandler+0x51e>
      return;
 8002ca8:	bf00      	nop
 8002caa:	e000      	b.n	8002cae <HAL_UART_IRQHandler+0x51e>
      return;
 8002cac:	bf00      	nop
  }
}
 8002cae:	37e8      	adds	r7, #232	@ 0xe8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d10:	e03b      	b.n	8002d8a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d037      	beq.n	8002d8a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1a:	f7fd fea5 	bl	8000a68 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	6a3a      	ldr	r2, [r7, #32]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d302      	bcc.n	8002d30 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e03a      	b.n	8002daa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d023      	beq.n	8002d8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b80      	cmp	r3, #128	@ 0x80
 8002d46:	d020      	beq.n	8002d8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b40      	cmp	r3, #64	@ 0x40
 8002d4c:	d01d      	beq.n	8002d8a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d116      	bne.n	8002d8a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f81d 	bl	8002db2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2208      	movs	r2, #8
 8002d7c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e00f      	b.n	8002daa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4013      	ands	r3, r2
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	bf0c      	ite	eq
 8002d9a:	2301      	moveq	r3, #1
 8002d9c:	2300      	movne	r3, #0
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d0b4      	beq.n	8002d12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b095      	sub	sp, #84	@ 0x54
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	330c      	adds	r3, #12
 8002dc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc4:	e853 3f00 	ldrex	r3, [r3]
 8002dc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dda:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002de0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002de2:	e841 2300 	strex	r3, r2, [r1]
 8002de6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e5      	bne.n	8002dba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3314      	adds	r3, #20
 8002df4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3314      	adds	r3, #20
 8002e0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e16:	e841 2300 	strex	r3, r2, [r1]
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1e5      	bne.n	8002dee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d119      	bne.n	8002e5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	330c      	adds	r3, #12
 8002e30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	e853 3f00 	ldrex	r3, [r3]
 8002e38:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f023 0310 	bic.w	r3, r3, #16
 8002e40:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	330c      	adds	r3, #12
 8002e48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e4a:	61ba      	str	r2, [r7, #24]
 8002e4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	6979      	ldr	r1, [r7, #20]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	e841 2300 	strex	r3, r2, [r1]
 8002e56:	613b      	str	r3, [r7, #16]
   return(result);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e5      	bne.n	8002e2a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e6c:	bf00      	nop
 8002e6e:	3754      	adds	r7, #84	@ 0x54
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f7ff ff21 	bl	8002cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b085      	sub	sp, #20
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b21      	cmp	r3, #33	@ 0x21
 8002eb0:	d13e      	bne.n	8002f30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eba:	d114      	bne.n	8002ee6 <UART_Transmit_IT+0x48>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d110      	bne.n	8002ee6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ed8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	1c9a      	adds	r2, r3, #2
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	621a      	str	r2, [r3, #32]
 8002ee4:	e008      	b.n	8002ef8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	1c59      	adds	r1, r3, #1
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6211      	str	r1, [r2, #32]
 8002ef0:	781a      	ldrb	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4619      	mov	r1, r3
 8002f06:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10f      	bne.n	8002f2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e000      	b.n	8002f32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f30:	2302      	movs	r3, #2
  }
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff fea9 	bl	8002cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08c      	sub	sp, #48	@ 0x30
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b22      	cmp	r3, #34	@ 0x22
 8002f7e:	f040 80ae 	bne.w	80030de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f8a:	d117      	bne.n	8002fbc <UART_Receive_IT+0x50>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d113      	bne.n	8002fbc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb4:	1c9a      	adds	r2, r3, #2
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fba:	e026      	b.n	800300a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fce:	d007      	beq.n	8002fe0 <UART_Receive_IT+0x74>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10a      	bne.n	8002fee <UART_Receive_IT+0x82>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d106      	bne.n	8002fee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fea:	701a      	strb	r2, [r3, #0]
 8002fec:	e008      	b.n	8003000 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29b      	uxth	r3, r3
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4619      	mov	r1, r3
 8003018:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800301a:	2b00      	cmp	r3, #0
 800301c:	d15d      	bne.n	80030da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0220 	bic.w	r2, r2, #32
 800302c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800303c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0201 	bic.w	r2, r2, #1
 800304c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003060:	2b01      	cmp	r3, #1
 8003062:	d135      	bne.n	80030d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	330c      	adds	r3, #12
 8003070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	e853 3f00 	ldrex	r3, [r3]
 8003078:	613b      	str	r3, [r7, #16]
   return(result);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f023 0310 	bic.w	r3, r3, #16
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	330c      	adds	r3, #12
 8003088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800308a:	623a      	str	r2, [r7, #32]
 800308c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308e:	69f9      	ldr	r1, [r7, #28]
 8003090:	6a3a      	ldr	r2, [r7, #32]
 8003092:	e841 2300 	strex	r3, r2, [r1]
 8003096:	61bb      	str	r3, [r7, #24]
   return(result);
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1e5      	bne.n	800306a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d10a      	bne.n	80030c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80030c6:	4619      	mov	r1, r3
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff fe0e 	bl	8002cea <HAL_UARTEx_RxEventCallback>
 80030ce:	e002      	b.n	80030d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff fdf8 	bl	8002cc6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	e002      	b.n	80030e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	e000      	b.n	80030e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80030de:	2302      	movs	r3, #2
  }
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3730      	adds	r7, #48	@ 0x30
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003122:	f023 030c 	bic.w	r3, r3, #12
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	68b9      	ldr	r1, [r7, #8]
 800312c:	430b      	orrs	r3, r1
 800312e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a2c      	ldr	r2, [pc, #176]	@ (80031fc <UART_SetConfig+0x114>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d103      	bne.n	8003158 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003150:	f7ff fa10 	bl	8002574 <HAL_RCC_GetPCLK2Freq>
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	e002      	b.n	800315e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003158:	f7ff f9f8 	bl	800254c <HAL_RCC_GetPCLK1Freq>
 800315c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	009a      	lsls	r2, r3, #2
 8003168:	441a      	add	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	4a22      	ldr	r2, [pc, #136]	@ (8003200 <UART_SetConfig+0x118>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	0119      	lsls	r1, r3, #4
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	009a      	lsls	r2, r3, #2
 8003188:	441a      	add	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	fbb2 f2f3 	udiv	r2, r2, r3
 8003194:	4b1a      	ldr	r3, [pc, #104]	@ (8003200 <UART_SetConfig+0x118>)
 8003196:	fba3 0302 	umull	r0, r3, r3, r2
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2064      	movs	r0, #100	@ 0x64
 800319e:	fb00 f303 	mul.w	r3, r0, r3
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	3332      	adds	r3, #50	@ 0x32
 80031a8:	4a15      	ldr	r2, [pc, #84]	@ (8003200 <UART_SetConfig+0x118>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031b4:	4419      	add	r1, r3
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	009a      	lsls	r2, r3, #2
 80031c0:	441a      	add	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <UART_SetConfig+0x118>)
 80031ce:	fba3 0302 	umull	r0, r3, r3, r2
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	2064      	movs	r0, #100	@ 0x64
 80031d6:	fb00 f303 	mul.w	r3, r0, r3
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	3332      	adds	r3, #50	@ 0x32
 80031e0:	4a07      	ldr	r2, [pc, #28]	@ (8003200 <UART_SetConfig+0x118>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	f003 020f 	and.w	r2, r3, #15
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	440a      	add	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031f4:	bf00      	nop
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40013800 	.word	0x40013800
 8003200:	51eb851f 	.word	0x51eb851f

08003204 <std>:
 8003204:	2300      	movs	r3, #0
 8003206:	b510      	push	{r4, lr}
 8003208:	4604      	mov	r4, r0
 800320a:	e9c0 3300 	strd	r3, r3, [r0]
 800320e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003212:	6083      	str	r3, [r0, #8]
 8003214:	8181      	strh	r1, [r0, #12]
 8003216:	6643      	str	r3, [r0, #100]	@ 0x64
 8003218:	81c2      	strh	r2, [r0, #14]
 800321a:	6183      	str	r3, [r0, #24]
 800321c:	4619      	mov	r1, r3
 800321e:	2208      	movs	r2, #8
 8003220:	305c      	adds	r0, #92	@ 0x5c
 8003222:	f000 f9e7 	bl	80035f4 <memset>
 8003226:	4b0d      	ldr	r3, [pc, #52]	@ (800325c <std+0x58>)
 8003228:	6224      	str	r4, [r4, #32]
 800322a:	6263      	str	r3, [r4, #36]	@ 0x24
 800322c:	4b0c      	ldr	r3, [pc, #48]	@ (8003260 <std+0x5c>)
 800322e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003230:	4b0c      	ldr	r3, [pc, #48]	@ (8003264 <std+0x60>)
 8003232:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003234:	4b0c      	ldr	r3, [pc, #48]	@ (8003268 <std+0x64>)
 8003236:	6323      	str	r3, [r4, #48]	@ 0x30
 8003238:	4b0c      	ldr	r3, [pc, #48]	@ (800326c <std+0x68>)
 800323a:	429c      	cmp	r4, r3
 800323c:	d006      	beq.n	800324c <std+0x48>
 800323e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003242:	4294      	cmp	r4, r2
 8003244:	d002      	beq.n	800324c <std+0x48>
 8003246:	33d0      	adds	r3, #208	@ 0xd0
 8003248:	429c      	cmp	r4, r3
 800324a:	d105      	bne.n	8003258 <std+0x54>
 800324c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003254:	f000 ba46 	b.w	80036e4 <__retarget_lock_init_recursive>
 8003258:	bd10      	pop	{r4, pc}
 800325a:	bf00      	nop
 800325c:	08003445 	.word	0x08003445
 8003260:	08003467 	.word	0x08003467
 8003264:	0800349f 	.word	0x0800349f
 8003268:	080034c3 	.word	0x080034c3
 800326c:	200000fc 	.word	0x200000fc

08003270 <stdio_exit_handler>:
 8003270:	4a02      	ldr	r2, [pc, #8]	@ (800327c <stdio_exit_handler+0xc>)
 8003272:	4903      	ldr	r1, [pc, #12]	@ (8003280 <stdio_exit_handler+0x10>)
 8003274:	4803      	ldr	r0, [pc, #12]	@ (8003284 <stdio_exit_handler+0x14>)
 8003276:	f000 b869 	b.w	800334c <_fwalk_sglue>
 800327a:	bf00      	nop
 800327c:	2000000c 	.word	0x2000000c
 8003280:	080039d9 	.word	0x080039d9
 8003284:	2000001c 	.word	0x2000001c

08003288 <cleanup_stdio>:
 8003288:	6841      	ldr	r1, [r0, #4]
 800328a:	4b0c      	ldr	r3, [pc, #48]	@ (80032bc <cleanup_stdio+0x34>)
 800328c:	b510      	push	{r4, lr}
 800328e:	4299      	cmp	r1, r3
 8003290:	4604      	mov	r4, r0
 8003292:	d001      	beq.n	8003298 <cleanup_stdio+0x10>
 8003294:	f000 fba0 	bl	80039d8 <_fflush_r>
 8003298:	68a1      	ldr	r1, [r4, #8]
 800329a:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <cleanup_stdio+0x38>)
 800329c:	4299      	cmp	r1, r3
 800329e:	d002      	beq.n	80032a6 <cleanup_stdio+0x1e>
 80032a0:	4620      	mov	r0, r4
 80032a2:	f000 fb99 	bl	80039d8 <_fflush_r>
 80032a6:	68e1      	ldr	r1, [r4, #12]
 80032a8:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <cleanup_stdio+0x3c>)
 80032aa:	4299      	cmp	r1, r3
 80032ac:	d004      	beq.n	80032b8 <cleanup_stdio+0x30>
 80032ae:	4620      	mov	r0, r4
 80032b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032b4:	f000 bb90 	b.w	80039d8 <_fflush_r>
 80032b8:	bd10      	pop	{r4, pc}
 80032ba:	bf00      	nop
 80032bc:	200000fc 	.word	0x200000fc
 80032c0:	20000164 	.word	0x20000164
 80032c4:	200001cc 	.word	0x200001cc

080032c8 <global_stdio_init.part.0>:
 80032c8:	b510      	push	{r4, lr}
 80032ca:	4b0b      	ldr	r3, [pc, #44]	@ (80032f8 <global_stdio_init.part.0+0x30>)
 80032cc:	4c0b      	ldr	r4, [pc, #44]	@ (80032fc <global_stdio_init.part.0+0x34>)
 80032ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003300 <global_stdio_init.part.0+0x38>)
 80032d0:	4620      	mov	r0, r4
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	2104      	movs	r1, #4
 80032d6:	2200      	movs	r2, #0
 80032d8:	f7ff ff94 	bl	8003204 <std>
 80032dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80032e0:	2201      	movs	r2, #1
 80032e2:	2109      	movs	r1, #9
 80032e4:	f7ff ff8e 	bl	8003204 <std>
 80032e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80032ec:	2202      	movs	r2, #2
 80032ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032f2:	2112      	movs	r1, #18
 80032f4:	f7ff bf86 	b.w	8003204 <std>
 80032f8:	20000234 	.word	0x20000234
 80032fc:	200000fc 	.word	0x200000fc
 8003300:	08003271 	.word	0x08003271

08003304 <__sfp_lock_acquire>:
 8003304:	4801      	ldr	r0, [pc, #4]	@ (800330c <__sfp_lock_acquire+0x8>)
 8003306:	f000 b9ee 	b.w	80036e6 <__retarget_lock_acquire_recursive>
 800330a:	bf00      	nop
 800330c:	2000023d 	.word	0x2000023d

08003310 <__sfp_lock_release>:
 8003310:	4801      	ldr	r0, [pc, #4]	@ (8003318 <__sfp_lock_release+0x8>)
 8003312:	f000 b9e9 	b.w	80036e8 <__retarget_lock_release_recursive>
 8003316:	bf00      	nop
 8003318:	2000023d 	.word	0x2000023d

0800331c <__sinit>:
 800331c:	b510      	push	{r4, lr}
 800331e:	4604      	mov	r4, r0
 8003320:	f7ff fff0 	bl	8003304 <__sfp_lock_acquire>
 8003324:	6a23      	ldr	r3, [r4, #32]
 8003326:	b11b      	cbz	r3, 8003330 <__sinit+0x14>
 8003328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800332c:	f7ff bff0 	b.w	8003310 <__sfp_lock_release>
 8003330:	4b04      	ldr	r3, [pc, #16]	@ (8003344 <__sinit+0x28>)
 8003332:	6223      	str	r3, [r4, #32]
 8003334:	4b04      	ldr	r3, [pc, #16]	@ (8003348 <__sinit+0x2c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f5      	bne.n	8003328 <__sinit+0xc>
 800333c:	f7ff ffc4 	bl	80032c8 <global_stdio_init.part.0>
 8003340:	e7f2      	b.n	8003328 <__sinit+0xc>
 8003342:	bf00      	nop
 8003344:	08003289 	.word	0x08003289
 8003348:	20000234 	.word	0x20000234

0800334c <_fwalk_sglue>:
 800334c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003350:	4607      	mov	r7, r0
 8003352:	4688      	mov	r8, r1
 8003354:	4614      	mov	r4, r2
 8003356:	2600      	movs	r6, #0
 8003358:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800335c:	f1b9 0901 	subs.w	r9, r9, #1
 8003360:	d505      	bpl.n	800336e <_fwalk_sglue+0x22>
 8003362:	6824      	ldr	r4, [r4, #0]
 8003364:	2c00      	cmp	r4, #0
 8003366:	d1f7      	bne.n	8003358 <_fwalk_sglue+0xc>
 8003368:	4630      	mov	r0, r6
 800336a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800336e:	89ab      	ldrh	r3, [r5, #12]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d907      	bls.n	8003384 <_fwalk_sglue+0x38>
 8003374:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003378:	3301      	adds	r3, #1
 800337a:	d003      	beq.n	8003384 <_fwalk_sglue+0x38>
 800337c:	4629      	mov	r1, r5
 800337e:	4638      	mov	r0, r7
 8003380:	47c0      	blx	r8
 8003382:	4306      	orrs	r6, r0
 8003384:	3568      	adds	r5, #104	@ 0x68
 8003386:	e7e9      	b.n	800335c <_fwalk_sglue+0x10>

08003388 <_puts_r>:
 8003388:	6a03      	ldr	r3, [r0, #32]
 800338a:	b570      	push	{r4, r5, r6, lr}
 800338c:	4605      	mov	r5, r0
 800338e:	460e      	mov	r6, r1
 8003390:	6884      	ldr	r4, [r0, #8]
 8003392:	b90b      	cbnz	r3, 8003398 <_puts_r+0x10>
 8003394:	f7ff ffc2 	bl	800331c <__sinit>
 8003398:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800339a:	07db      	lsls	r3, r3, #31
 800339c:	d405      	bmi.n	80033aa <_puts_r+0x22>
 800339e:	89a3      	ldrh	r3, [r4, #12]
 80033a0:	0598      	lsls	r0, r3, #22
 80033a2:	d402      	bmi.n	80033aa <_puts_r+0x22>
 80033a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033a6:	f000 f99e 	bl	80036e6 <__retarget_lock_acquire_recursive>
 80033aa:	89a3      	ldrh	r3, [r4, #12]
 80033ac:	0719      	lsls	r1, r3, #28
 80033ae:	d502      	bpl.n	80033b6 <_puts_r+0x2e>
 80033b0:	6923      	ldr	r3, [r4, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d135      	bne.n	8003422 <_puts_r+0x9a>
 80033b6:	4621      	mov	r1, r4
 80033b8:	4628      	mov	r0, r5
 80033ba:	f000 f8c5 	bl	8003548 <__swsetup_r>
 80033be:	b380      	cbz	r0, 8003422 <_puts_r+0x9a>
 80033c0:	f04f 35ff 	mov.w	r5, #4294967295
 80033c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80033c6:	07da      	lsls	r2, r3, #31
 80033c8:	d405      	bmi.n	80033d6 <_puts_r+0x4e>
 80033ca:	89a3      	ldrh	r3, [r4, #12]
 80033cc:	059b      	lsls	r3, r3, #22
 80033ce:	d402      	bmi.n	80033d6 <_puts_r+0x4e>
 80033d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033d2:	f000 f989 	bl	80036e8 <__retarget_lock_release_recursive>
 80033d6:	4628      	mov	r0, r5
 80033d8:	bd70      	pop	{r4, r5, r6, pc}
 80033da:	2b00      	cmp	r3, #0
 80033dc:	da04      	bge.n	80033e8 <_puts_r+0x60>
 80033de:	69a2      	ldr	r2, [r4, #24]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	dc17      	bgt.n	8003414 <_puts_r+0x8c>
 80033e4:	290a      	cmp	r1, #10
 80033e6:	d015      	beq.n	8003414 <_puts_r+0x8c>
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	6022      	str	r2, [r4, #0]
 80033ee:	7019      	strb	r1, [r3, #0]
 80033f0:	68a3      	ldr	r3, [r4, #8]
 80033f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80033f6:	3b01      	subs	r3, #1
 80033f8:	60a3      	str	r3, [r4, #8]
 80033fa:	2900      	cmp	r1, #0
 80033fc:	d1ed      	bne.n	80033da <_puts_r+0x52>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	da11      	bge.n	8003426 <_puts_r+0x9e>
 8003402:	4622      	mov	r2, r4
 8003404:	210a      	movs	r1, #10
 8003406:	4628      	mov	r0, r5
 8003408:	f000 f85f 	bl	80034ca <__swbuf_r>
 800340c:	3001      	adds	r0, #1
 800340e:	d0d7      	beq.n	80033c0 <_puts_r+0x38>
 8003410:	250a      	movs	r5, #10
 8003412:	e7d7      	b.n	80033c4 <_puts_r+0x3c>
 8003414:	4622      	mov	r2, r4
 8003416:	4628      	mov	r0, r5
 8003418:	f000 f857 	bl	80034ca <__swbuf_r>
 800341c:	3001      	adds	r0, #1
 800341e:	d1e7      	bne.n	80033f0 <_puts_r+0x68>
 8003420:	e7ce      	b.n	80033c0 <_puts_r+0x38>
 8003422:	3e01      	subs	r6, #1
 8003424:	e7e4      	b.n	80033f0 <_puts_r+0x68>
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	6022      	str	r2, [r4, #0]
 800342c:	220a      	movs	r2, #10
 800342e:	701a      	strb	r2, [r3, #0]
 8003430:	e7ee      	b.n	8003410 <_puts_r+0x88>
	...

08003434 <puts>:
 8003434:	4b02      	ldr	r3, [pc, #8]	@ (8003440 <puts+0xc>)
 8003436:	4601      	mov	r1, r0
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	f7ff bfa5 	b.w	8003388 <_puts_r>
 800343e:	bf00      	nop
 8003440:	20000018 	.word	0x20000018

08003444 <__sread>:
 8003444:	b510      	push	{r4, lr}
 8003446:	460c      	mov	r4, r1
 8003448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800344c:	f000 f8fc 	bl	8003648 <_read_r>
 8003450:	2800      	cmp	r0, #0
 8003452:	bfab      	itete	ge
 8003454:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003456:	89a3      	ldrhlt	r3, [r4, #12]
 8003458:	181b      	addge	r3, r3, r0
 800345a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800345e:	bfac      	ite	ge
 8003460:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003462:	81a3      	strhlt	r3, [r4, #12]
 8003464:	bd10      	pop	{r4, pc}

08003466 <__swrite>:
 8003466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800346a:	461f      	mov	r7, r3
 800346c:	898b      	ldrh	r3, [r1, #12]
 800346e:	4605      	mov	r5, r0
 8003470:	05db      	lsls	r3, r3, #23
 8003472:	460c      	mov	r4, r1
 8003474:	4616      	mov	r6, r2
 8003476:	d505      	bpl.n	8003484 <__swrite+0x1e>
 8003478:	2302      	movs	r3, #2
 800347a:	2200      	movs	r2, #0
 800347c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003480:	f000 f8d0 	bl	8003624 <_lseek_r>
 8003484:	89a3      	ldrh	r3, [r4, #12]
 8003486:	4632      	mov	r2, r6
 8003488:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800348c:	81a3      	strh	r3, [r4, #12]
 800348e:	4628      	mov	r0, r5
 8003490:	463b      	mov	r3, r7
 8003492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800349a:	f000 b8e7 	b.w	800366c <_write_r>

0800349e <__sseek>:
 800349e:	b510      	push	{r4, lr}
 80034a0:	460c      	mov	r4, r1
 80034a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a6:	f000 f8bd 	bl	8003624 <_lseek_r>
 80034aa:	1c43      	adds	r3, r0, #1
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	bf15      	itete	ne
 80034b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80034b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80034b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80034ba:	81a3      	strheq	r3, [r4, #12]
 80034bc:	bf18      	it	ne
 80034be:	81a3      	strhne	r3, [r4, #12]
 80034c0:	bd10      	pop	{r4, pc}

080034c2 <__sclose>:
 80034c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034c6:	f000 b89d 	b.w	8003604 <_close_r>

080034ca <__swbuf_r>:
 80034ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034cc:	460e      	mov	r6, r1
 80034ce:	4614      	mov	r4, r2
 80034d0:	4605      	mov	r5, r0
 80034d2:	b118      	cbz	r0, 80034dc <__swbuf_r+0x12>
 80034d4:	6a03      	ldr	r3, [r0, #32]
 80034d6:	b90b      	cbnz	r3, 80034dc <__swbuf_r+0x12>
 80034d8:	f7ff ff20 	bl	800331c <__sinit>
 80034dc:	69a3      	ldr	r3, [r4, #24]
 80034de:	60a3      	str	r3, [r4, #8]
 80034e0:	89a3      	ldrh	r3, [r4, #12]
 80034e2:	071a      	lsls	r2, r3, #28
 80034e4:	d501      	bpl.n	80034ea <__swbuf_r+0x20>
 80034e6:	6923      	ldr	r3, [r4, #16]
 80034e8:	b943      	cbnz	r3, 80034fc <__swbuf_r+0x32>
 80034ea:	4621      	mov	r1, r4
 80034ec:	4628      	mov	r0, r5
 80034ee:	f000 f82b 	bl	8003548 <__swsetup_r>
 80034f2:	b118      	cbz	r0, 80034fc <__swbuf_r+0x32>
 80034f4:	f04f 37ff 	mov.w	r7, #4294967295
 80034f8:	4638      	mov	r0, r7
 80034fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	6922      	ldr	r2, [r4, #16]
 8003500:	b2f6      	uxtb	r6, r6
 8003502:	1a98      	subs	r0, r3, r2
 8003504:	6963      	ldr	r3, [r4, #20]
 8003506:	4637      	mov	r7, r6
 8003508:	4283      	cmp	r3, r0
 800350a:	dc05      	bgt.n	8003518 <__swbuf_r+0x4e>
 800350c:	4621      	mov	r1, r4
 800350e:	4628      	mov	r0, r5
 8003510:	f000 fa62 	bl	80039d8 <_fflush_r>
 8003514:	2800      	cmp	r0, #0
 8003516:	d1ed      	bne.n	80034f4 <__swbuf_r+0x2a>
 8003518:	68a3      	ldr	r3, [r4, #8]
 800351a:	3b01      	subs	r3, #1
 800351c:	60a3      	str	r3, [r4, #8]
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	6022      	str	r2, [r4, #0]
 8003524:	701e      	strb	r6, [r3, #0]
 8003526:	6962      	ldr	r2, [r4, #20]
 8003528:	1c43      	adds	r3, r0, #1
 800352a:	429a      	cmp	r2, r3
 800352c:	d004      	beq.n	8003538 <__swbuf_r+0x6e>
 800352e:	89a3      	ldrh	r3, [r4, #12]
 8003530:	07db      	lsls	r3, r3, #31
 8003532:	d5e1      	bpl.n	80034f8 <__swbuf_r+0x2e>
 8003534:	2e0a      	cmp	r6, #10
 8003536:	d1df      	bne.n	80034f8 <__swbuf_r+0x2e>
 8003538:	4621      	mov	r1, r4
 800353a:	4628      	mov	r0, r5
 800353c:	f000 fa4c 	bl	80039d8 <_fflush_r>
 8003540:	2800      	cmp	r0, #0
 8003542:	d0d9      	beq.n	80034f8 <__swbuf_r+0x2e>
 8003544:	e7d6      	b.n	80034f4 <__swbuf_r+0x2a>
	...

08003548 <__swsetup_r>:
 8003548:	b538      	push	{r3, r4, r5, lr}
 800354a:	4b29      	ldr	r3, [pc, #164]	@ (80035f0 <__swsetup_r+0xa8>)
 800354c:	4605      	mov	r5, r0
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	460c      	mov	r4, r1
 8003552:	b118      	cbz	r0, 800355c <__swsetup_r+0x14>
 8003554:	6a03      	ldr	r3, [r0, #32]
 8003556:	b90b      	cbnz	r3, 800355c <__swsetup_r+0x14>
 8003558:	f7ff fee0 	bl	800331c <__sinit>
 800355c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003560:	0719      	lsls	r1, r3, #28
 8003562:	d422      	bmi.n	80035aa <__swsetup_r+0x62>
 8003564:	06da      	lsls	r2, r3, #27
 8003566:	d407      	bmi.n	8003578 <__swsetup_r+0x30>
 8003568:	2209      	movs	r2, #9
 800356a:	602a      	str	r2, [r5, #0]
 800356c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003570:	f04f 30ff 	mov.w	r0, #4294967295
 8003574:	81a3      	strh	r3, [r4, #12]
 8003576:	e033      	b.n	80035e0 <__swsetup_r+0x98>
 8003578:	0758      	lsls	r0, r3, #29
 800357a:	d512      	bpl.n	80035a2 <__swsetup_r+0x5a>
 800357c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800357e:	b141      	cbz	r1, 8003592 <__swsetup_r+0x4a>
 8003580:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003584:	4299      	cmp	r1, r3
 8003586:	d002      	beq.n	800358e <__swsetup_r+0x46>
 8003588:	4628      	mov	r0, r5
 800358a:	f000 f8af 	bl	80036ec <_free_r>
 800358e:	2300      	movs	r3, #0
 8003590:	6363      	str	r3, [r4, #52]	@ 0x34
 8003592:	89a3      	ldrh	r3, [r4, #12]
 8003594:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003598:	81a3      	strh	r3, [r4, #12]
 800359a:	2300      	movs	r3, #0
 800359c:	6063      	str	r3, [r4, #4]
 800359e:	6923      	ldr	r3, [r4, #16]
 80035a0:	6023      	str	r3, [r4, #0]
 80035a2:	89a3      	ldrh	r3, [r4, #12]
 80035a4:	f043 0308 	orr.w	r3, r3, #8
 80035a8:	81a3      	strh	r3, [r4, #12]
 80035aa:	6923      	ldr	r3, [r4, #16]
 80035ac:	b94b      	cbnz	r3, 80035c2 <__swsetup_r+0x7a>
 80035ae:	89a3      	ldrh	r3, [r4, #12]
 80035b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80035b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035b8:	d003      	beq.n	80035c2 <__swsetup_r+0x7a>
 80035ba:	4621      	mov	r1, r4
 80035bc:	4628      	mov	r0, r5
 80035be:	f000 fa58 	bl	8003a72 <__smakebuf_r>
 80035c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035c6:	f013 0201 	ands.w	r2, r3, #1
 80035ca:	d00a      	beq.n	80035e2 <__swsetup_r+0x9a>
 80035cc:	2200      	movs	r2, #0
 80035ce:	60a2      	str	r2, [r4, #8]
 80035d0:	6962      	ldr	r2, [r4, #20]
 80035d2:	4252      	negs	r2, r2
 80035d4:	61a2      	str	r2, [r4, #24]
 80035d6:	6922      	ldr	r2, [r4, #16]
 80035d8:	b942      	cbnz	r2, 80035ec <__swsetup_r+0xa4>
 80035da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80035de:	d1c5      	bne.n	800356c <__swsetup_r+0x24>
 80035e0:	bd38      	pop	{r3, r4, r5, pc}
 80035e2:	0799      	lsls	r1, r3, #30
 80035e4:	bf58      	it	pl
 80035e6:	6962      	ldrpl	r2, [r4, #20]
 80035e8:	60a2      	str	r2, [r4, #8]
 80035ea:	e7f4      	b.n	80035d6 <__swsetup_r+0x8e>
 80035ec:	2000      	movs	r0, #0
 80035ee:	e7f7      	b.n	80035e0 <__swsetup_r+0x98>
 80035f0:	20000018 	.word	0x20000018

080035f4 <memset>:
 80035f4:	4603      	mov	r3, r0
 80035f6:	4402      	add	r2, r0
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d100      	bne.n	80035fe <memset+0xa>
 80035fc:	4770      	bx	lr
 80035fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003602:	e7f9      	b.n	80035f8 <memset+0x4>

08003604 <_close_r>:
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	2300      	movs	r3, #0
 8003608:	4d05      	ldr	r5, [pc, #20]	@ (8003620 <_close_r+0x1c>)
 800360a:	4604      	mov	r4, r0
 800360c:	4608      	mov	r0, r1
 800360e:	602b      	str	r3, [r5, #0]
 8003610:	f7fd f93f 	bl	8000892 <_close>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	d102      	bne.n	800361e <_close_r+0x1a>
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	b103      	cbz	r3, 800361e <_close_r+0x1a>
 800361c:	6023      	str	r3, [r4, #0]
 800361e:	bd38      	pop	{r3, r4, r5, pc}
 8003620:	20000238 	.word	0x20000238

08003624 <_lseek_r>:
 8003624:	b538      	push	{r3, r4, r5, lr}
 8003626:	4604      	mov	r4, r0
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	2200      	movs	r2, #0
 800362e:	4d05      	ldr	r5, [pc, #20]	@ (8003644 <_lseek_r+0x20>)
 8003630:	602a      	str	r2, [r5, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	f7fd f951 	bl	80008da <_lseek>
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	d102      	bne.n	8003642 <_lseek_r+0x1e>
 800363c:	682b      	ldr	r3, [r5, #0]
 800363e:	b103      	cbz	r3, 8003642 <_lseek_r+0x1e>
 8003640:	6023      	str	r3, [r4, #0]
 8003642:	bd38      	pop	{r3, r4, r5, pc}
 8003644:	20000238 	.word	0x20000238

08003648 <_read_r>:
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	4604      	mov	r4, r0
 800364c:	4608      	mov	r0, r1
 800364e:	4611      	mov	r1, r2
 8003650:	2200      	movs	r2, #0
 8003652:	4d05      	ldr	r5, [pc, #20]	@ (8003668 <_read_r+0x20>)
 8003654:	602a      	str	r2, [r5, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	f7fd f8e2 	bl	8000820 <_read>
 800365c:	1c43      	adds	r3, r0, #1
 800365e:	d102      	bne.n	8003666 <_read_r+0x1e>
 8003660:	682b      	ldr	r3, [r5, #0]
 8003662:	b103      	cbz	r3, 8003666 <_read_r+0x1e>
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	bd38      	pop	{r3, r4, r5, pc}
 8003668:	20000238 	.word	0x20000238

0800366c <_write_r>:
 800366c:	b538      	push	{r3, r4, r5, lr}
 800366e:	4604      	mov	r4, r0
 8003670:	4608      	mov	r0, r1
 8003672:	4611      	mov	r1, r2
 8003674:	2200      	movs	r2, #0
 8003676:	4d05      	ldr	r5, [pc, #20]	@ (800368c <_write_r+0x20>)
 8003678:	602a      	str	r2, [r5, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	f7fd f8ed 	bl	800085a <_write>
 8003680:	1c43      	adds	r3, r0, #1
 8003682:	d102      	bne.n	800368a <_write_r+0x1e>
 8003684:	682b      	ldr	r3, [r5, #0]
 8003686:	b103      	cbz	r3, 800368a <_write_r+0x1e>
 8003688:	6023      	str	r3, [r4, #0]
 800368a:	bd38      	pop	{r3, r4, r5, pc}
 800368c:	20000238 	.word	0x20000238

08003690 <__errno>:
 8003690:	4b01      	ldr	r3, [pc, #4]	@ (8003698 <__errno+0x8>)
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000018 	.word	0x20000018

0800369c <__libc_init_array>:
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	2600      	movs	r6, #0
 80036a0:	4d0c      	ldr	r5, [pc, #48]	@ (80036d4 <__libc_init_array+0x38>)
 80036a2:	4c0d      	ldr	r4, [pc, #52]	@ (80036d8 <__libc_init_array+0x3c>)
 80036a4:	1b64      	subs	r4, r4, r5
 80036a6:	10a4      	asrs	r4, r4, #2
 80036a8:	42a6      	cmp	r6, r4
 80036aa:	d109      	bne.n	80036c0 <__libc_init_array+0x24>
 80036ac:	f000 fa50 	bl	8003b50 <_init>
 80036b0:	2600      	movs	r6, #0
 80036b2:	4d0a      	ldr	r5, [pc, #40]	@ (80036dc <__libc_init_array+0x40>)
 80036b4:	4c0a      	ldr	r4, [pc, #40]	@ (80036e0 <__libc_init_array+0x44>)
 80036b6:	1b64      	subs	r4, r4, r5
 80036b8:	10a4      	asrs	r4, r4, #2
 80036ba:	42a6      	cmp	r6, r4
 80036bc:	d105      	bne.n	80036ca <__libc_init_array+0x2e>
 80036be:	bd70      	pop	{r4, r5, r6, pc}
 80036c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c4:	4798      	blx	r3
 80036c6:	3601      	adds	r6, #1
 80036c8:	e7ee      	b.n	80036a8 <__libc_init_array+0xc>
 80036ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ce:	4798      	blx	r3
 80036d0:	3601      	adds	r6, #1
 80036d2:	e7f2      	b.n	80036ba <__libc_init_array+0x1e>
 80036d4:	08003be0 	.word	0x08003be0
 80036d8:	08003be0 	.word	0x08003be0
 80036dc:	08003be0 	.word	0x08003be0
 80036e0:	08003be4 	.word	0x08003be4

080036e4 <__retarget_lock_init_recursive>:
 80036e4:	4770      	bx	lr

080036e6 <__retarget_lock_acquire_recursive>:
 80036e6:	4770      	bx	lr

080036e8 <__retarget_lock_release_recursive>:
 80036e8:	4770      	bx	lr
	...

080036ec <_free_r>:
 80036ec:	b538      	push	{r3, r4, r5, lr}
 80036ee:	4605      	mov	r5, r0
 80036f0:	2900      	cmp	r1, #0
 80036f2:	d040      	beq.n	8003776 <_free_r+0x8a>
 80036f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036f8:	1f0c      	subs	r4, r1, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	bfb8      	it	lt
 80036fe:	18e4      	addlt	r4, r4, r3
 8003700:	f000 f8de 	bl	80038c0 <__malloc_lock>
 8003704:	4a1c      	ldr	r2, [pc, #112]	@ (8003778 <_free_r+0x8c>)
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	b933      	cbnz	r3, 8003718 <_free_r+0x2c>
 800370a:	6063      	str	r3, [r4, #4]
 800370c:	6014      	str	r4, [r2, #0]
 800370e:	4628      	mov	r0, r5
 8003710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003714:	f000 b8da 	b.w	80038cc <__malloc_unlock>
 8003718:	42a3      	cmp	r3, r4
 800371a:	d908      	bls.n	800372e <_free_r+0x42>
 800371c:	6820      	ldr	r0, [r4, #0]
 800371e:	1821      	adds	r1, r4, r0
 8003720:	428b      	cmp	r3, r1
 8003722:	bf01      	itttt	eq
 8003724:	6819      	ldreq	r1, [r3, #0]
 8003726:	685b      	ldreq	r3, [r3, #4]
 8003728:	1809      	addeq	r1, r1, r0
 800372a:	6021      	streq	r1, [r4, #0]
 800372c:	e7ed      	b.n	800370a <_free_r+0x1e>
 800372e:	461a      	mov	r2, r3
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	b10b      	cbz	r3, 8003738 <_free_r+0x4c>
 8003734:	42a3      	cmp	r3, r4
 8003736:	d9fa      	bls.n	800372e <_free_r+0x42>
 8003738:	6811      	ldr	r1, [r2, #0]
 800373a:	1850      	adds	r0, r2, r1
 800373c:	42a0      	cmp	r0, r4
 800373e:	d10b      	bne.n	8003758 <_free_r+0x6c>
 8003740:	6820      	ldr	r0, [r4, #0]
 8003742:	4401      	add	r1, r0
 8003744:	1850      	adds	r0, r2, r1
 8003746:	4283      	cmp	r3, r0
 8003748:	6011      	str	r1, [r2, #0]
 800374a:	d1e0      	bne.n	800370e <_free_r+0x22>
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4408      	add	r0, r1
 8003752:	6010      	str	r0, [r2, #0]
 8003754:	6053      	str	r3, [r2, #4]
 8003756:	e7da      	b.n	800370e <_free_r+0x22>
 8003758:	d902      	bls.n	8003760 <_free_r+0x74>
 800375a:	230c      	movs	r3, #12
 800375c:	602b      	str	r3, [r5, #0]
 800375e:	e7d6      	b.n	800370e <_free_r+0x22>
 8003760:	6820      	ldr	r0, [r4, #0]
 8003762:	1821      	adds	r1, r4, r0
 8003764:	428b      	cmp	r3, r1
 8003766:	bf01      	itttt	eq
 8003768:	6819      	ldreq	r1, [r3, #0]
 800376a:	685b      	ldreq	r3, [r3, #4]
 800376c:	1809      	addeq	r1, r1, r0
 800376e:	6021      	streq	r1, [r4, #0]
 8003770:	6063      	str	r3, [r4, #4]
 8003772:	6054      	str	r4, [r2, #4]
 8003774:	e7cb      	b.n	800370e <_free_r+0x22>
 8003776:	bd38      	pop	{r3, r4, r5, pc}
 8003778:	20000244 	.word	0x20000244

0800377c <sbrk_aligned>:
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4e0f      	ldr	r6, [pc, #60]	@ (80037bc <sbrk_aligned+0x40>)
 8003780:	460c      	mov	r4, r1
 8003782:	6831      	ldr	r1, [r6, #0]
 8003784:	4605      	mov	r5, r0
 8003786:	b911      	cbnz	r1, 800378e <sbrk_aligned+0x12>
 8003788:	f000 f9d2 	bl	8003b30 <_sbrk_r>
 800378c:	6030      	str	r0, [r6, #0]
 800378e:	4621      	mov	r1, r4
 8003790:	4628      	mov	r0, r5
 8003792:	f000 f9cd 	bl	8003b30 <_sbrk_r>
 8003796:	1c43      	adds	r3, r0, #1
 8003798:	d103      	bne.n	80037a2 <sbrk_aligned+0x26>
 800379a:	f04f 34ff 	mov.w	r4, #4294967295
 800379e:	4620      	mov	r0, r4
 80037a0:	bd70      	pop	{r4, r5, r6, pc}
 80037a2:	1cc4      	adds	r4, r0, #3
 80037a4:	f024 0403 	bic.w	r4, r4, #3
 80037a8:	42a0      	cmp	r0, r4
 80037aa:	d0f8      	beq.n	800379e <sbrk_aligned+0x22>
 80037ac:	1a21      	subs	r1, r4, r0
 80037ae:	4628      	mov	r0, r5
 80037b0:	f000 f9be 	bl	8003b30 <_sbrk_r>
 80037b4:	3001      	adds	r0, #1
 80037b6:	d1f2      	bne.n	800379e <sbrk_aligned+0x22>
 80037b8:	e7ef      	b.n	800379a <sbrk_aligned+0x1e>
 80037ba:	bf00      	nop
 80037bc:	20000240 	.word	0x20000240

080037c0 <_malloc_r>:
 80037c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037c4:	1ccd      	adds	r5, r1, #3
 80037c6:	f025 0503 	bic.w	r5, r5, #3
 80037ca:	3508      	adds	r5, #8
 80037cc:	2d0c      	cmp	r5, #12
 80037ce:	bf38      	it	cc
 80037d0:	250c      	movcc	r5, #12
 80037d2:	2d00      	cmp	r5, #0
 80037d4:	4606      	mov	r6, r0
 80037d6:	db01      	blt.n	80037dc <_malloc_r+0x1c>
 80037d8:	42a9      	cmp	r1, r5
 80037da:	d904      	bls.n	80037e6 <_malloc_r+0x26>
 80037dc:	230c      	movs	r3, #12
 80037de:	6033      	str	r3, [r6, #0]
 80037e0:	2000      	movs	r0, #0
 80037e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80038bc <_malloc_r+0xfc>
 80037ea:	f000 f869 	bl	80038c0 <__malloc_lock>
 80037ee:	f8d8 3000 	ldr.w	r3, [r8]
 80037f2:	461c      	mov	r4, r3
 80037f4:	bb44      	cbnz	r4, 8003848 <_malloc_r+0x88>
 80037f6:	4629      	mov	r1, r5
 80037f8:	4630      	mov	r0, r6
 80037fa:	f7ff ffbf 	bl	800377c <sbrk_aligned>
 80037fe:	1c43      	adds	r3, r0, #1
 8003800:	4604      	mov	r4, r0
 8003802:	d158      	bne.n	80038b6 <_malloc_r+0xf6>
 8003804:	f8d8 4000 	ldr.w	r4, [r8]
 8003808:	4627      	mov	r7, r4
 800380a:	2f00      	cmp	r7, #0
 800380c:	d143      	bne.n	8003896 <_malloc_r+0xd6>
 800380e:	2c00      	cmp	r4, #0
 8003810:	d04b      	beq.n	80038aa <_malloc_r+0xea>
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	4639      	mov	r1, r7
 8003816:	4630      	mov	r0, r6
 8003818:	eb04 0903 	add.w	r9, r4, r3
 800381c:	f000 f988 	bl	8003b30 <_sbrk_r>
 8003820:	4581      	cmp	r9, r0
 8003822:	d142      	bne.n	80038aa <_malloc_r+0xea>
 8003824:	6821      	ldr	r1, [r4, #0]
 8003826:	4630      	mov	r0, r6
 8003828:	1a6d      	subs	r5, r5, r1
 800382a:	4629      	mov	r1, r5
 800382c:	f7ff ffa6 	bl	800377c <sbrk_aligned>
 8003830:	3001      	adds	r0, #1
 8003832:	d03a      	beq.n	80038aa <_malloc_r+0xea>
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	442b      	add	r3, r5
 8003838:	6023      	str	r3, [r4, #0]
 800383a:	f8d8 3000 	ldr.w	r3, [r8]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	bb62      	cbnz	r2, 800389c <_malloc_r+0xdc>
 8003842:	f8c8 7000 	str.w	r7, [r8]
 8003846:	e00f      	b.n	8003868 <_malloc_r+0xa8>
 8003848:	6822      	ldr	r2, [r4, #0]
 800384a:	1b52      	subs	r2, r2, r5
 800384c:	d420      	bmi.n	8003890 <_malloc_r+0xd0>
 800384e:	2a0b      	cmp	r2, #11
 8003850:	d917      	bls.n	8003882 <_malloc_r+0xc2>
 8003852:	1961      	adds	r1, r4, r5
 8003854:	42a3      	cmp	r3, r4
 8003856:	6025      	str	r5, [r4, #0]
 8003858:	bf18      	it	ne
 800385a:	6059      	strne	r1, [r3, #4]
 800385c:	6863      	ldr	r3, [r4, #4]
 800385e:	bf08      	it	eq
 8003860:	f8c8 1000 	streq.w	r1, [r8]
 8003864:	5162      	str	r2, [r4, r5]
 8003866:	604b      	str	r3, [r1, #4]
 8003868:	4630      	mov	r0, r6
 800386a:	f000 f82f 	bl	80038cc <__malloc_unlock>
 800386e:	f104 000b 	add.w	r0, r4, #11
 8003872:	1d23      	adds	r3, r4, #4
 8003874:	f020 0007 	bic.w	r0, r0, #7
 8003878:	1ac2      	subs	r2, r0, r3
 800387a:	bf1c      	itt	ne
 800387c:	1a1b      	subne	r3, r3, r0
 800387e:	50a3      	strne	r3, [r4, r2]
 8003880:	e7af      	b.n	80037e2 <_malloc_r+0x22>
 8003882:	6862      	ldr	r2, [r4, #4]
 8003884:	42a3      	cmp	r3, r4
 8003886:	bf0c      	ite	eq
 8003888:	f8c8 2000 	streq.w	r2, [r8]
 800388c:	605a      	strne	r2, [r3, #4]
 800388e:	e7eb      	b.n	8003868 <_malloc_r+0xa8>
 8003890:	4623      	mov	r3, r4
 8003892:	6864      	ldr	r4, [r4, #4]
 8003894:	e7ae      	b.n	80037f4 <_malloc_r+0x34>
 8003896:	463c      	mov	r4, r7
 8003898:	687f      	ldr	r7, [r7, #4]
 800389a:	e7b6      	b.n	800380a <_malloc_r+0x4a>
 800389c:	461a      	mov	r2, r3
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	42a3      	cmp	r3, r4
 80038a2:	d1fb      	bne.n	800389c <_malloc_r+0xdc>
 80038a4:	2300      	movs	r3, #0
 80038a6:	6053      	str	r3, [r2, #4]
 80038a8:	e7de      	b.n	8003868 <_malloc_r+0xa8>
 80038aa:	230c      	movs	r3, #12
 80038ac:	4630      	mov	r0, r6
 80038ae:	6033      	str	r3, [r6, #0]
 80038b0:	f000 f80c 	bl	80038cc <__malloc_unlock>
 80038b4:	e794      	b.n	80037e0 <_malloc_r+0x20>
 80038b6:	6005      	str	r5, [r0, #0]
 80038b8:	e7d6      	b.n	8003868 <_malloc_r+0xa8>
 80038ba:	bf00      	nop
 80038bc:	20000244 	.word	0x20000244

080038c0 <__malloc_lock>:
 80038c0:	4801      	ldr	r0, [pc, #4]	@ (80038c8 <__malloc_lock+0x8>)
 80038c2:	f7ff bf10 	b.w	80036e6 <__retarget_lock_acquire_recursive>
 80038c6:	bf00      	nop
 80038c8:	2000023c 	.word	0x2000023c

080038cc <__malloc_unlock>:
 80038cc:	4801      	ldr	r0, [pc, #4]	@ (80038d4 <__malloc_unlock+0x8>)
 80038ce:	f7ff bf0b 	b.w	80036e8 <__retarget_lock_release_recursive>
 80038d2:	bf00      	nop
 80038d4:	2000023c 	.word	0x2000023c

080038d8 <__sflush_r>:
 80038d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038de:	0716      	lsls	r6, r2, #28
 80038e0:	4605      	mov	r5, r0
 80038e2:	460c      	mov	r4, r1
 80038e4:	d454      	bmi.n	8003990 <__sflush_r+0xb8>
 80038e6:	684b      	ldr	r3, [r1, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	dc02      	bgt.n	80038f2 <__sflush_r+0x1a>
 80038ec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	dd48      	ble.n	8003984 <__sflush_r+0xac>
 80038f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038f4:	2e00      	cmp	r6, #0
 80038f6:	d045      	beq.n	8003984 <__sflush_r+0xac>
 80038f8:	2300      	movs	r3, #0
 80038fa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80038fe:	682f      	ldr	r7, [r5, #0]
 8003900:	6a21      	ldr	r1, [r4, #32]
 8003902:	602b      	str	r3, [r5, #0]
 8003904:	d030      	beq.n	8003968 <__sflush_r+0x90>
 8003906:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003908:	89a3      	ldrh	r3, [r4, #12]
 800390a:	0759      	lsls	r1, r3, #29
 800390c:	d505      	bpl.n	800391a <__sflush_r+0x42>
 800390e:	6863      	ldr	r3, [r4, #4]
 8003910:	1ad2      	subs	r2, r2, r3
 8003912:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003914:	b10b      	cbz	r3, 800391a <__sflush_r+0x42>
 8003916:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003918:	1ad2      	subs	r2, r2, r3
 800391a:	2300      	movs	r3, #0
 800391c:	4628      	mov	r0, r5
 800391e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003920:	6a21      	ldr	r1, [r4, #32]
 8003922:	47b0      	blx	r6
 8003924:	1c43      	adds	r3, r0, #1
 8003926:	89a3      	ldrh	r3, [r4, #12]
 8003928:	d106      	bne.n	8003938 <__sflush_r+0x60>
 800392a:	6829      	ldr	r1, [r5, #0]
 800392c:	291d      	cmp	r1, #29
 800392e:	d82b      	bhi.n	8003988 <__sflush_r+0xb0>
 8003930:	4a28      	ldr	r2, [pc, #160]	@ (80039d4 <__sflush_r+0xfc>)
 8003932:	40ca      	lsrs	r2, r1
 8003934:	07d6      	lsls	r6, r2, #31
 8003936:	d527      	bpl.n	8003988 <__sflush_r+0xb0>
 8003938:	2200      	movs	r2, #0
 800393a:	6062      	str	r2, [r4, #4]
 800393c:	6922      	ldr	r2, [r4, #16]
 800393e:	04d9      	lsls	r1, r3, #19
 8003940:	6022      	str	r2, [r4, #0]
 8003942:	d504      	bpl.n	800394e <__sflush_r+0x76>
 8003944:	1c42      	adds	r2, r0, #1
 8003946:	d101      	bne.n	800394c <__sflush_r+0x74>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	b903      	cbnz	r3, 800394e <__sflush_r+0x76>
 800394c:	6560      	str	r0, [r4, #84]	@ 0x54
 800394e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003950:	602f      	str	r7, [r5, #0]
 8003952:	b1b9      	cbz	r1, 8003984 <__sflush_r+0xac>
 8003954:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003958:	4299      	cmp	r1, r3
 800395a:	d002      	beq.n	8003962 <__sflush_r+0x8a>
 800395c:	4628      	mov	r0, r5
 800395e:	f7ff fec5 	bl	80036ec <_free_r>
 8003962:	2300      	movs	r3, #0
 8003964:	6363      	str	r3, [r4, #52]	@ 0x34
 8003966:	e00d      	b.n	8003984 <__sflush_r+0xac>
 8003968:	2301      	movs	r3, #1
 800396a:	4628      	mov	r0, r5
 800396c:	47b0      	blx	r6
 800396e:	4602      	mov	r2, r0
 8003970:	1c50      	adds	r0, r2, #1
 8003972:	d1c9      	bne.n	8003908 <__sflush_r+0x30>
 8003974:	682b      	ldr	r3, [r5, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0c6      	beq.n	8003908 <__sflush_r+0x30>
 800397a:	2b1d      	cmp	r3, #29
 800397c:	d001      	beq.n	8003982 <__sflush_r+0xaa>
 800397e:	2b16      	cmp	r3, #22
 8003980:	d11d      	bne.n	80039be <__sflush_r+0xe6>
 8003982:	602f      	str	r7, [r5, #0]
 8003984:	2000      	movs	r0, #0
 8003986:	e021      	b.n	80039cc <__sflush_r+0xf4>
 8003988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800398c:	b21b      	sxth	r3, r3
 800398e:	e01a      	b.n	80039c6 <__sflush_r+0xee>
 8003990:	690f      	ldr	r7, [r1, #16]
 8003992:	2f00      	cmp	r7, #0
 8003994:	d0f6      	beq.n	8003984 <__sflush_r+0xac>
 8003996:	0793      	lsls	r3, r2, #30
 8003998:	bf18      	it	ne
 800399a:	2300      	movne	r3, #0
 800399c:	680e      	ldr	r6, [r1, #0]
 800399e:	bf08      	it	eq
 80039a0:	694b      	ldreq	r3, [r1, #20]
 80039a2:	1bf6      	subs	r6, r6, r7
 80039a4:	600f      	str	r7, [r1, #0]
 80039a6:	608b      	str	r3, [r1, #8]
 80039a8:	2e00      	cmp	r6, #0
 80039aa:	ddeb      	ble.n	8003984 <__sflush_r+0xac>
 80039ac:	4633      	mov	r3, r6
 80039ae:	463a      	mov	r2, r7
 80039b0:	4628      	mov	r0, r5
 80039b2:	6a21      	ldr	r1, [r4, #32]
 80039b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80039b8:	47e0      	blx	ip
 80039ba:	2800      	cmp	r0, #0
 80039bc:	dc07      	bgt.n	80039ce <__sflush_r+0xf6>
 80039be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039c6:	f04f 30ff 	mov.w	r0, #4294967295
 80039ca:	81a3      	strh	r3, [r4, #12]
 80039cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039ce:	4407      	add	r7, r0
 80039d0:	1a36      	subs	r6, r6, r0
 80039d2:	e7e9      	b.n	80039a8 <__sflush_r+0xd0>
 80039d4:	20400001 	.word	0x20400001

080039d8 <_fflush_r>:
 80039d8:	b538      	push	{r3, r4, r5, lr}
 80039da:	690b      	ldr	r3, [r1, #16]
 80039dc:	4605      	mov	r5, r0
 80039de:	460c      	mov	r4, r1
 80039e0:	b913      	cbnz	r3, 80039e8 <_fflush_r+0x10>
 80039e2:	2500      	movs	r5, #0
 80039e4:	4628      	mov	r0, r5
 80039e6:	bd38      	pop	{r3, r4, r5, pc}
 80039e8:	b118      	cbz	r0, 80039f2 <_fflush_r+0x1a>
 80039ea:	6a03      	ldr	r3, [r0, #32]
 80039ec:	b90b      	cbnz	r3, 80039f2 <_fflush_r+0x1a>
 80039ee:	f7ff fc95 	bl	800331c <__sinit>
 80039f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f3      	beq.n	80039e2 <_fflush_r+0xa>
 80039fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80039fc:	07d0      	lsls	r0, r2, #31
 80039fe:	d404      	bmi.n	8003a0a <_fflush_r+0x32>
 8003a00:	0599      	lsls	r1, r3, #22
 8003a02:	d402      	bmi.n	8003a0a <_fflush_r+0x32>
 8003a04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a06:	f7ff fe6e 	bl	80036e6 <__retarget_lock_acquire_recursive>
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	f7ff ff63 	bl	80038d8 <__sflush_r>
 8003a12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a14:	4605      	mov	r5, r0
 8003a16:	07da      	lsls	r2, r3, #31
 8003a18:	d4e4      	bmi.n	80039e4 <_fflush_r+0xc>
 8003a1a:	89a3      	ldrh	r3, [r4, #12]
 8003a1c:	059b      	lsls	r3, r3, #22
 8003a1e:	d4e1      	bmi.n	80039e4 <_fflush_r+0xc>
 8003a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a22:	f7ff fe61 	bl	80036e8 <__retarget_lock_release_recursive>
 8003a26:	e7dd      	b.n	80039e4 <_fflush_r+0xc>

08003a28 <__swhatbuf_r>:
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a30:	4615      	mov	r5, r2
 8003a32:	2900      	cmp	r1, #0
 8003a34:	461e      	mov	r6, r3
 8003a36:	b096      	sub	sp, #88	@ 0x58
 8003a38:	da0c      	bge.n	8003a54 <__swhatbuf_r+0x2c>
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003a42:	bf14      	ite	ne
 8003a44:	2340      	movne	r3, #64	@ 0x40
 8003a46:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	6031      	str	r1, [r6, #0]
 8003a4e:	602b      	str	r3, [r5, #0]
 8003a50:	b016      	add	sp, #88	@ 0x58
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
 8003a54:	466a      	mov	r2, sp
 8003a56:	f000 f849 	bl	8003aec <_fstat_r>
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	dbed      	blt.n	8003a3a <__swhatbuf_r+0x12>
 8003a5e:	9901      	ldr	r1, [sp, #4]
 8003a60:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003a64:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003a68:	4259      	negs	r1, r3
 8003a6a:	4159      	adcs	r1, r3
 8003a6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a70:	e7eb      	b.n	8003a4a <__swhatbuf_r+0x22>

08003a72 <__smakebuf_r>:
 8003a72:	898b      	ldrh	r3, [r1, #12]
 8003a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a76:	079d      	lsls	r5, r3, #30
 8003a78:	4606      	mov	r6, r0
 8003a7a:	460c      	mov	r4, r1
 8003a7c:	d507      	bpl.n	8003a8e <__smakebuf_r+0x1c>
 8003a7e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003a82:	6023      	str	r3, [r4, #0]
 8003a84:	6123      	str	r3, [r4, #16]
 8003a86:	2301      	movs	r3, #1
 8003a88:	6163      	str	r3, [r4, #20]
 8003a8a:	b003      	add	sp, #12
 8003a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a8e:	466a      	mov	r2, sp
 8003a90:	ab01      	add	r3, sp, #4
 8003a92:	f7ff ffc9 	bl	8003a28 <__swhatbuf_r>
 8003a96:	9f00      	ldr	r7, [sp, #0]
 8003a98:	4605      	mov	r5, r0
 8003a9a:	4639      	mov	r1, r7
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	f7ff fe8f 	bl	80037c0 <_malloc_r>
 8003aa2:	b948      	cbnz	r0, 8003ab8 <__smakebuf_r+0x46>
 8003aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aa8:	059a      	lsls	r2, r3, #22
 8003aaa:	d4ee      	bmi.n	8003a8a <__smakebuf_r+0x18>
 8003aac:	f023 0303 	bic.w	r3, r3, #3
 8003ab0:	f043 0302 	orr.w	r3, r3, #2
 8003ab4:	81a3      	strh	r3, [r4, #12]
 8003ab6:	e7e2      	b.n	8003a7e <__smakebuf_r+0xc>
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ac2:	81a3      	strh	r3, [r4, #12]
 8003ac4:	9b01      	ldr	r3, [sp, #4]
 8003ac6:	6020      	str	r0, [r4, #0]
 8003ac8:	b15b      	cbz	r3, 8003ae2 <__smakebuf_r+0x70>
 8003aca:	4630      	mov	r0, r6
 8003acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ad0:	f000 f81e 	bl	8003b10 <_isatty_r>
 8003ad4:	b128      	cbz	r0, 8003ae2 <__smakebuf_r+0x70>
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	f023 0303 	bic.w	r3, r3, #3
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	81a3      	strh	r3, [r4, #12]
 8003ae2:	89a3      	ldrh	r3, [r4, #12]
 8003ae4:	431d      	orrs	r5, r3
 8003ae6:	81a5      	strh	r5, [r4, #12]
 8003ae8:	e7cf      	b.n	8003a8a <__smakebuf_r+0x18>
	...

08003aec <_fstat_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	2300      	movs	r3, #0
 8003af0:	4d06      	ldr	r5, [pc, #24]	@ (8003b0c <_fstat_r+0x20>)
 8003af2:	4604      	mov	r4, r0
 8003af4:	4608      	mov	r0, r1
 8003af6:	4611      	mov	r1, r2
 8003af8:	602b      	str	r3, [r5, #0]
 8003afa:	f7fc fed5 	bl	80008a8 <_fstat>
 8003afe:	1c43      	adds	r3, r0, #1
 8003b00:	d102      	bne.n	8003b08 <_fstat_r+0x1c>
 8003b02:	682b      	ldr	r3, [r5, #0]
 8003b04:	b103      	cbz	r3, 8003b08 <_fstat_r+0x1c>
 8003b06:	6023      	str	r3, [r4, #0]
 8003b08:	bd38      	pop	{r3, r4, r5, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000238 	.word	0x20000238

08003b10 <_isatty_r>:
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	2300      	movs	r3, #0
 8003b14:	4d05      	ldr	r5, [pc, #20]	@ (8003b2c <_isatty_r+0x1c>)
 8003b16:	4604      	mov	r4, r0
 8003b18:	4608      	mov	r0, r1
 8003b1a:	602b      	str	r3, [r5, #0]
 8003b1c:	f7fc fed3 	bl	80008c6 <_isatty>
 8003b20:	1c43      	adds	r3, r0, #1
 8003b22:	d102      	bne.n	8003b2a <_isatty_r+0x1a>
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	b103      	cbz	r3, 8003b2a <_isatty_r+0x1a>
 8003b28:	6023      	str	r3, [r4, #0]
 8003b2a:	bd38      	pop	{r3, r4, r5, pc}
 8003b2c:	20000238 	.word	0x20000238

08003b30 <_sbrk_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	2300      	movs	r3, #0
 8003b34:	4d05      	ldr	r5, [pc, #20]	@ (8003b4c <_sbrk_r+0x1c>)
 8003b36:	4604      	mov	r4, r0
 8003b38:	4608      	mov	r0, r1
 8003b3a:	602b      	str	r3, [r5, #0]
 8003b3c:	f7fc feda 	bl	80008f4 <_sbrk>
 8003b40:	1c43      	adds	r3, r0, #1
 8003b42:	d102      	bne.n	8003b4a <_sbrk_r+0x1a>
 8003b44:	682b      	ldr	r3, [r5, #0]
 8003b46:	b103      	cbz	r3, 8003b4a <_sbrk_r+0x1a>
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	bd38      	pop	{r3, r4, r5, pc}
 8003b4c:	20000238 	.word	0x20000238

08003b50 <_init>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	bf00      	nop
 8003b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b56:	bc08      	pop	{r3}
 8003b58:	469e      	mov	lr, r3
 8003b5a:	4770      	bx	lr

08003b5c <_fini>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	bf00      	nop
 8003b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b62:	bc08      	pop	{r3}
 8003b64:	469e      	mov	lr, r3
 8003b66:	4770      	bx	lr
