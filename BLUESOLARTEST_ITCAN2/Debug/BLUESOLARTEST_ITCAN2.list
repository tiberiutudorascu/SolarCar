
BLUESOLARTEST_ITCAN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040bc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080041c8  080041c8  000051c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004220  08004220  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004220  08004220  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004220  08004220  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004220  08004220  00005220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004224  08004224  00005224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004228  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000068  08004290  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08004290  00006364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e12e  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002186  00000000  00000000  000141bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00016348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b25  00000000  00000000  00017198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d9d  00000000  00000000  00017cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1d8  00000000  00000000  00030a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ed0a  00000000  00000000  0003fc32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce93c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000427c  00000000  00000000  000ce980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d2bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080041b0 	.word	0x080041b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080041b0 	.word	0x080041b0

0800014c <rb_next>:

static CANMSG_T RXQ[16];
static volatile uint16_t RX_HEAD = 0;
static volatile uint16_t RX_TAIL = 0;

static inline uint16_t rb_next(uint16_t i) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	return (uint16_t) ((i + 1u) & (16 - 1u));
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	3301      	adds	r3, #1
 800015a:	b29b      	uxth	r3, r3
 800015c:	f003 030f 	and.w	r3, r3, #15
 8000160:	b29b      	uxth	r3, r3
}
 8000162:	4618      	mov	r0, r3
 8000164:	370c      	adds	r7, #12
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr

0800016c <rb_empty>:
static inline bool rb_empty(void) {
 800016c:	b480      	push	{r7}
 800016e:	af00      	add	r7, sp, #0
	return RX_HEAD == RX_TAIL;
 8000170:	4b07      	ldr	r3, [pc, #28]	@ (8000190 <rb_empty+0x24>)
 8000172:	881b      	ldrh	r3, [r3, #0]
 8000174:	b29a      	uxth	r2, r3
 8000176:	4b07      	ldr	r3, [pc, #28]	@ (8000194 <rb_empty+0x28>)
 8000178:	881b      	ldrh	r3, [r3, #0]
 800017a:	b29b      	uxth	r3, r3
 800017c:	429a      	cmp	r2, r3
 800017e:	bf0c      	ite	eq
 8000180:	2301      	moveq	r3, #1
 8000182:	2300      	movne	r3, #0
 8000184:	b2db      	uxtb	r3, r3
}
 8000186:	4618      	mov	r0, r3
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	2000020c 	.word	0x2000020c
 8000194:	2000020e 	.word	0x2000020e

08000198 <rb_full>:
static inline bool rb_full(void) {
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	return rb_next(RX_HEAD) == RX_TAIL;
 800019c:	4b08      	ldr	r3, [pc, #32]	@ (80001c0 <rb_full+0x28>)
 800019e:	881b      	ldrh	r3, [r3, #0]
 80001a0:	b29b      	uxth	r3, r3
 80001a2:	4618      	mov	r0, r3
 80001a4:	f7ff ffd2 	bl	800014c <rb_next>
 80001a8:	4603      	mov	r3, r0
 80001aa:	461a      	mov	r2, r3
 80001ac:	4b05      	ldr	r3, [pc, #20]	@ (80001c4 <rb_full+0x2c>)
 80001ae:	881b      	ldrh	r3, [r3, #0]
 80001b0:	b29b      	uxth	r3, r3
 80001b2:	429a      	cmp	r2, r3
 80001b4:	bf0c      	ite	eq
 80001b6:	2301      	moveq	r3, #1
 80001b8:	2300      	movne	r3, #0
 80001ba:	b2db      	uxtb	r3, r3
}
 80001bc:	4618      	mov	r0, r3
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	2000020c 	.word	0x2000020c
 80001c4:	2000020e 	.word	0x2000020e

080001c8 <rb_add>:
static inline void rb_add(const CANMSG_T *canmsg) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if (rb_full()) {
 80001d0:	f7ff ffe2 	bl	8000198 <rb_full>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d009      	beq.n	80001ee <rb_add+0x26>
		RX_TAIL = rb_next(RX_TAIL);
 80001da:	4b13      	ldr	r3, [pc, #76]	@ (8000228 <rb_add+0x60>)
 80001dc:	881b      	ldrh	r3, [r3, #0]
 80001de:	b29b      	uxth	r3, r3
 80001e0:	4618      	mov	r0, r3
 80001e2:	f7ff ffb3 	bl	800014c <rb_next>
 80001e6:	4603      	mov	r3, r0
 80001e8:	461a      	mov	r2, r3
 80001ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000228 <rb_add+0x60>)
 80001ec:	801a      	strh	r2, [r3, #0]
	}
	memcpy(&RXQ[RX_HEAD], canmsg, sizeof(CANMSG_T));
 80001ee:	4b0f      	ldr	r3, [pc, #60]	@ (800022c <rb_add+0x64>)
 80001f0:	881b      	ldrh	r3, [r3, #0]
 80001f2:	b29b      	uxth	r3, r3
 80001f4:	461a      	mov	r2, r3
 80001f6:	4613      	mov	r3, r2
 80001f8:	005b      	lsls	r3, r3, #1
 80001fa:	4413      	add	r3, r2
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000230 <rb_add+0x68>)
 8000200:	4413      	add	r3, r2
 8000202:	220c      	movs	r2, #12
 8000204:	6879      	ldr	r1, [r7, #4]
 8000206:	4618      	mov	r0, r3
 8000208:	f003 fd91 	bl	8003d2e <memcpy>

	RX_HEAD = rb_next(RX_HEAD);
 800020c:	4b07      	ldr	r3, [pc, #28]	@ (800022c <rb_add+0x64>)
 800020e:	881b      	ldrh	r3, [r3, #0]
 8000210:	b29b      	uxth	r3, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f7ff ff9a 	bl	800014c <rb_next>
 8000218:	4603      	mov	r3, r0
 800021a:	461a      	mov	r2, r3
 800021c:	4b03      	ldr	r3, [pc, #12]	@ (800022c <rb_add+0x64>)
 800021e:	801a      	strh	r2, [r3, #0]
}
 8000220:	bf00      	nop
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	2000020e 	.word	0x2000020e
 800022c:	2000020c 	.word	0x2000020c
 8000230:	2000014c 	.word	0x2000014c

08000234 <rb_pop>:
static inline bool rb_pop(CANMSG_T *canmsgread) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	if (rb_empty()) {
 800023c:	f7ff ff96 	bl	800016c <rb_empty>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <rb_pop+0x16>
		return 0;
 8000246:	2300      	movs	r3, #0
 8000248:	e019      	b.n	800027e <rb_pop+0x4a>
	}
	memcpy(canmsgread, &RXQ[RX_TAIL], sizeof(CANMSG_T));
 800024a:	4b0f      	ldr	r3, [pc, #60]	@ (8000288 <rb_pop+0x54>)
 800024c:	881b      	ldrh	r3, [r3, #0]
 800024e:	b29b      	uxth	r3, r3
 8000250:	461a      	mov	r2, r3
 8000252:	4613      	mov	r3, r2
 8000254:	005b      	lsls	r3, r3, #1
 8000256:	4413      	add	r3, r2
 8000258:	009b      	lsls	r3, r3, #2
 800025a:	4a0c      	ldr	r2, [pc, #48]	@ (800028c <rb_pop+0x58>)
 800025c:	4413      	add	r3, r2
 800025e:	220c      	movs	r2, #12
 8000260:	4619      	mov	r1, r3
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	f003 fd63 	bl	8003d2e <memcpy>
	RX_TAIL = rb_next(RX_TAIL);
 8000268:	4b07      	ldr	r3, [pc, #28]	@ (8000288 <rb_pop+0x54>)
 800026a:	881b      	ldrh	r3, [r3, #0]
 800026c:	b29b      	uxth	r3, r3
 800026e:	4618      	mov	r0, r3
 8000270:	f7ff ff6c 	bl	800014c <rb_next>
 8000274:	4603      	mov	r3, r0
 8000276:	461a      	mov	r2, r3
 8000278:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <rb_pop+0x54>)
 800027a:	801a      	strh	r2, [r3, #0]
	return 1;
 800027c:	2301      	movs	r3, #1
}
 800027e:	4618      	mov	r0, r3
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	2000020e 	.word	0x2000020e
 800028c:	2000014c 	.word	0x2000014c

08000290 <main>:

int main(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	HAL_Init();
 8000294:	f000 fc6a 	bl	8000b6c <HAL_Init>
	SystemClock_Config();
 8000298:	f000 f83e 	bl	8000318 <SystemClock_Config>
	MX_GPIO_INIT();
 800029c:	f000 f9ca 	bl	8000634 <MX_GPIO_INIT>
	UART_INIT();
 80002a0:	f000 f980 	bl	80005a4 <UART_INIT>
	CAN_INIT();
 80002a4:	f000 f9f4 	bl	8000690 <CAN_INIT>
	CAN_FILTER_CONFIG();
 80002a8:	f000 f8b2 	bl	8000410 <CAN_FILTER_CONFIG>
	CANTIM2_INIT();
 80002ac:	f000 f94c 	bl	8000548 <CANTIM2_INIT>

	if (HAL_CAN_ActivateNotification(&hcan,
 80002b0:	f240 4103 	movw	r1, #1027	@ 0x403
 80002b4:	4812      	ldr	r0, [pc, #72]	@ (8000300 <main+0x70>)
 80002b6:	f001 f8d7 	bl	8001468 <HAL_CAN_ActivateNotification>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <main+0x34>
	CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)
			!= HAL_OK) {
		Error_Handler();
 80002c0:	f000 f826 	bl	8000310 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 80002c4:	480e      	ldr	r0, [pc, #56]	@ (8000300 <main+0x70>)
 80002c6:	f000 fe9b 	bl	8001000 <HAL_CAN_Start>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <main+0x44>
		Error_Handler();
 80002d0:	f000 f81e 	bl	8000310 <Error_Handler>
	}
	HAL_TIM_Base_Start_IT(&htim2);
 80002d4:	480b      	ldr	r0, [pc, #44]	@ (8000304 <main+0x74>)
 80002d6:	f002 fabb 	bl	8002850 <HAL_TIM_Base_Start_IT>

	while (1) {

		if (flag == 1) {
 80002da:	4b0b      	ldr	r3, [pc, #44]	@ (8000308 <main+0x78>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d004      	beq.n	80002ee <main+0x5e>
			CAN_TX();
 80002e4:	f000 f85a 	bl	800039c <CAN_TX>
			flag = 0;
 80002e8:	4b07      	ldr	r3, [pc, #28]	@ (8000308 <main+0x78>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	701a      	strb	r2, [r3, #0]

		}
		while(rb_pop(&CAN_MESSAGE))
 80002ee:	bf00      	nop
 80002f0:	4806      	ldr	r0, [pc, #24]	@ (800030c <main+0x7c>)
 80002f2:	f7ff ff9f 	bl	8000234 <rb_pop>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d1f9      	bne.n	80002f0 <main+0x60>
		if (flag == 1) {
 80002fc:	e7ed      	b.n	80002da <main+0x4a>
 80002fe:	bf00      	nop
 8000300:	20000084 	.word	0x20000084
 8000304:	200000f4 	.word	0x200000f4
 8000308:	2000013c 	.word	0x2000013c
 800030c:	20000140 	.word	0x20000140

08000310 <Error_Handler>:
		}
	}

}

void Error_Handler(void) {
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	while (1) {
 8000314:	bf00      	nop
 8000316:	e7fd      	b.n	8000314 <Error_Handler+0x4>

08000318 <SystemClock_Config>:

	}
}

void SystemClock_Config() {
 8000318:	b580      	push	{r7, lr}
 800031a:	b090      	sub	sp, #64	@ 0x40
 800031c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef osc_init = { 0 };
 800031e:	f107 0318 	add.w	r3, r7, #24
 8000322:	2228      	movs	r2, #40	@ 0x28
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f003 fc86 	bl	8003c38 <memset>
	RCC_ClkInitTypeDef clk_init = { 0 };
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	611a      	str	r2, [r3, #16]
	osc_init.HSEState = RCC_HSE_OFF;
 800033a:	2300      	movs	r3, #0
 800033c:	61fb      	str	r3, [r7, #28]
	osc_init.HSIState = RCC_HSI_ON;
 800033e:	2301      	movs	r3, #1
 8000340:	62bb      	str	r3, [r7, #40]	@ 0x28
	osc_init.HSICalibrationValue = 16;
 8000342:	2310      	movs	r3, #16
 8000344:	62fb      	str	r3, [r7, #44]	@ 0x2c
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8000346:	2302      	movs	r3, #2
 8000348:	637b      	str	r3, [r7, #52]	@ 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800034a:	2300      	movs	r3, #0
 800034c:	63bb      	str	r3, [r7, #56]	@ 0x38
	osc_init.PLL.PLLMUL = RCC_PLL_MUL10;
 800034e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000352:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&osc_init) != HAL_OK) {
 8000354:	f107 0318 	add.w	r3, r7, #24
 8000358:	4618      	mov	r0, r3
 800035a:	f001 fe19 	bl	8001f90 <HAL_RCC_OscConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0x50>
		Error_Handler();
 8000364:	f7ff ffd4 	bl	8000310 <Error_Handler>
	}

	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8000368:	230f      	movs	r3, #15
 800036a:	607b      	str	r3, [r7, #4]
	RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036c:	2302      	movs	r3, #2
 800036e:	60bb      	str	r3, [r7, #8]
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
	clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000374:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000378:	613b      	str	r3, [r7, #16]
	clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]
	if (HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_1) != HAL_OK) {
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2102      	movs	r1, #2
 8000382:	4618      	mov	r0, r3
 8000384:	f002 f886 	bl	8002494 <HAL_RCC_ClockConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x7a>
		Error_Handler();
 800038e:	f7ff ffbf 	bl	8000310 <Error_Handler>
	}
}
 8000392:	bf00      	nop
 8000394:	3740      	adds	r7, #64	@ 0x40
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <CAN_TX>:

void CAN_TX() {
 800039c:	b580      	push	{r7, lr}
 800039e:	b08a      	sub	sp, #40	@ 0x28
 80003a0:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txheader;
	uint32_t txmailbox;
	uint8_t test[6] = "test\r\n";
 80003a2:	4a17      	ldr	r2, [pc, #92]	@ (8000400 <CAN_TX+0x64>)
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003aa:	6018      	str	r0, [r3, #0]
 80003ac:	3304      	adds	r3, #4
 80003ae:	8019      	strh	r1, [r3, #0]

	txheader.DLC = 6;
 80003b0:	2306      	movs	r3, #6
 80003b2:	623b      	str	r3, [r7, #32]
	txheader.StdId = 0x01;
 80003b4:	2301      	movs	r3, #1
 80003b6:	613b      	str	r3, [r7, #16]
	txheader.IDE = CAN_ID_STD;
 80003b8:	2300      	movs	r3, #0
 80003ba:	61bb      	str	r3, [r7, #24]
	txheader.RTR = CAN_RTR_DATA;
 80003bc:	2300      	movs	r3, #0
 80003be:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_AddTxMessage(&hcan, &txheader, test, &txmailbox) != HAL_OK) {
 80003c0:	f107 030c 	add.w	r3, r7, #12
 80003c4:	1d3a      	adds	r2, r7, #4
 80003c6:	f107 0110 	add.w	r1, r7, #16
 80003ca:	480e      	ldr	r0, [pc, #56]	@ (8000404 <CAN_TX+0x68>)
 80003cc:	f000 fe5c 	bl	8001088 <HAL_CAN_AddTxMessage>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d00f      	beq.n	80003f6 <CAN_TX+0x5a>
		Error_Handler();
 80003d6:	f7ff ff9b 	bl	8000310 <Error_Handler>
		while (1) {
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003de:	480a      	ldr	r0, [pc, #40]	@ (8000408 <CAN_TX+0x6c>)
 80003e0:	f001 fdbc 	bl	8001f5c <HAL_GPIO_TogglePin>
			HAL_Delay(800);
 80003e4:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80003e8:	f000 fc22 	bl	8000c30 <HAL_Delay>
			printf("1\n");
 80003ec:	4807      	ldr	r0, [pc, #28]	@ (800040c <CAN_TX+0x70>)
 80003ee:	f003 fb43 	bl	8003a78 <puts>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003f2:	bf00      	nop
 80003f4:	e7f1      	b.n	80003da <CAN_TX+0x3e>
		}
	}

}
 80003f6:	bf00      	nop
 80003f8:	3728      	adds	r7, #40	@ 0x28
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	080041cc 	.word	0x080041cc
 8000404:	20000084 	.word	0x20000084
 8000408:	40011000 	.word	0x40011000
 800040c:	080041c8 	.word	0x080041c8

08000410 <CAN_FILTER_CONFIG>:

void CAN_FILTER_CONFIG() {
 8000410:	b580      	push	{r7, lr}
 8000412:	b08a      	sub	sp, #40	@ 0x28
 8000414:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef canfilter = { 0 };
 8000416:	463b      	mov	r3, r7
 8000418:	2228      	movs	r2, #40	@ 0x28
 800041a:	2100      	movs	r1, #0
 800041c:	4618      	mov	r0, r3
 800041e:	f003 fc0b 	bl	8003c38 <memset>

	canfilter.FilterActivation = ENABLE;
 8000422:	2301      	movs	r3, #1
 8000424:	623b      	str	r3, [r7, #32]
	canfilter.FilterBank = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]
	canfilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 800042a:	2300      	movs	r3, #0
 800042c:	613b      	str	r3, [r7, #16]
	canfilter.FilterIdHigh = 0x0000;
 800042e:	2300      	movs	r3, #0
 8000430:	603b      	str	r3, [r7, #0]
	canfilter.FilterIdLow = 0x0000;
 8000432:	2300      	movs	r3, #0
 8000434:	607b      	str	r3, [r7, #4]
	canfilter.FilterMaskIdHigh = 0x0000;
 8000436:	2300      	movs	r3, #0
 8000438:	60bb      	str	r3, [r7, #8]
	canfilter.FilterMaskIdLow = 0x0000;
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]
	canfilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800043e:	2300      	movs	r3, #0
 8000440:	61bb      	str	r3, [r7, #24]
	canfilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000442:	2301      	movs	r3, #1
 8000444:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(&hcan, &canfilter) != HAL_OK) {
 8000446:	463b      	mov	r3, r7
 8000448:	4619      	mov	r1, r3
 800044a:	4806      	ldr	r0, [pc, #24]	@ (8000464 <CAN_FILTER_CONFIG+0x54>)
 800044c:	f000 fd0f 	bl	8000e6e <HAL_CAN_ConfigFilter>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <CAN_FILTER_CONFIG+0x4a>
		Error_Handler();
 8000456:	f7ff ff5b 	bl	8000310 <Error_Handler>
	}

}
 800045a:	bf00      	nop
 800045c:	3728      	adds	r7, #40	@ 0x28
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000084 	.word	0x20000084

08000468 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000468:	b5b0      	push	{r4, r5, r7, lr}
 800046a:	b08a      	sub	sp, #40	@ 0x28
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	const char msg[] = "Message sent from mailbox 1\n\r";
 8000470:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <HAL_CAN_TxMailbox0CompleteCallback+0x40>)
 8000472:	f107 0408 	add.w	r4, r7, #8
 8000476:	461d      	mov	r5, r3
 8000478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800047a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800047c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000480:	c407      	stmia	r4!, {r0, r1, r2}
 8000482:	8023      	strh	r3, [r4, #0]

	if (HAL_UART_Transmit(&huart, (uint8_t*) msg, sizeof(msg) - 1,
 8000484:	f107 0108 	add.w	r1, r7, #8
 8000488:	f04f 33ff 	mov.w	r3, #4294967295
 800048c:	221d      	movs	r2, #29
 800048e:	4807      	ldr	r0, [pc, #28]	@ (80004ac <HAL_CAN_TxMailbox0CompleteCallback+0x44>)
 8000490:	f002 fc14 	bl	8002cbc <HAL_UART_Transmit>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <HAL_CAN_TxMailbox0CompleteCallback+0x36>
	HAL_MAX_DELAY) != HAL_OK) {
		Error_Handler();
 800049a:	f7ff ff39 	bl	8000310 <Error_Handler>
	}

}
 800049e:	bf00      	nop
 80004a0:	3728      	adds	r7, #40	@ 0x28
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bdb0      	pop	{r4, r5, r7, pc}
 80004a6:	bf00      	nop
 80004a8:	080041d4 	.word	0x080041d4
 80004ac:	200000ac 	.word	0x200000ac

080004b0 <HAL_CAN_RxFifo0MsgPendingCallback>:
 if (HAL_UART_Transmit(&huart, (uint8_t*) msg, sizeof(msg) - 1,
 HAL_MAX_DELAY) != HAL_OK) {
 Error_Handler();
 }
 } */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b090      	sub	sp, #64	@ 0x40
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxheader = { 0 };
 80004b8:	f107 0320 	add.w	r3, r7, #32
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
 80004c6:	611a      	str	r2, [r3, #16]
 80004c8:	615a      	str	r2, [r3, #20]
 80004ca:	619a      	str	r2, [r3, #24]
	uint8_t recieved_msg[8];
	CANMSG_T recievedCAN = {0};
 80004cc:	f107 030c 	add.w	r3, r7, #12
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxheader, recieved_msg)
 80004d8:	f107 0318 	add.w	r3, r7, #24
 80004dc:	f107 0220 	add.w	r2, r7, #32
 80004e0:	2100      	movs	r1, #0
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f000 fe9f 	bl	8001226 <HAL_CAN_GetRxMessage>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			!= HAL_OK) {
		Error_Handler();
 80004ee:	f7ff ff0f 	bl	8000310 <Error_Handler>
	}
	uint8_t len = (rxheader.DLC > 8) ? 8 : rxheader.DLC;
 80004f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004f4:	2b08      	cmp	r3, #8
 80004f6:	bf28      	it	cs
 80004f8:	2308      	movcs	r3, #8
 80004fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	recievedCAN.id = rxheader.StdId;
 80004fe:	6a3b      	ldr	r3, [r7, #32]
 8000500:	b29b      	uxth	r3, r3
 8000502:	81bb      	strh	r3, [r7, #12]
	recievedCAN.dlc = len;
 8000504:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000508:	73bb      	strb	r3, [r7, #14]
	memcpy(recievedCAN.data,recieved_msg,len);
 800050a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800050e:	f107 0118 	add.w	r1, r7, #24
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	3303      	adds	r3, #3
 8000518:	4618      	mov	r0, r3
 800051a:	f003 fc08 	bl	8003d2e <memcpy>
	recievedCAN.flags = rxheader.RTR;
 800051e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000520:	b2db      	uxtb	r3, r3
 8000522:	75fb      	strb	r3, [r7, #23]

	rb_add(&recievedCAN);
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff fe4d 	bl	80001c8 <rb_add>
	//HAL_UART_Transmit(&huart, (uint8_t*) recieved_msg, sizeof(recieved_msg) - 1,
	//HAL_MAX_DELAY);

}
 800052e:	bf00      	nop
 8000530:	3740      	adds	r7, #64	@ 0x40
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8000536:	b480      	push	{r7}
 8000538:	b083      	sub	sp, #12
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]

}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr

08000548 <CANTIM2_INIT>:
void CANTIM2_INIT() {
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	htim2.Instance = TIM2;
 800054c:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <CANTIM2_INIT+0x30>)
 800054e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000552:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0x18F;
 8000554:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <CANTIM2_INIT+0x30>)
 8000556:	f240 128f 	movw	r2, #399	@ 0x18f
 800055a:	605a      	str	r2, [r3, #4]
	htim2.Init.Period = 0xC34F;
 800055c:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <CANTIM2_INIT+0x30>)
 800055e:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000562:	60da      	str	r2, [r3, #12]

	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000564:	4804      	ldr	r0, [pc, #16]	@ (8000578 <CANTIM2_INIT+0x30>)
 8000566:	f002 f923 	bl	80027b0 <HAL_TIM_Base_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <CANTIM2_INIT+0x2c>
		Error_Handler();
 8000570:	f7ff fece 	bl	8000310 <Error_Handler>
	}

}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200000f4 	.word	0x200000f4

0800057c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800058c:	d102      	bne.n	8000594 <HAL_TIM_PeriodElapsedCallback+0x18>
		flag = 1;
 800058e:	4b04      	ldr	r3, [pc, #16]	@ (80005a0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000590:	2201      	movs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	2000013c 	.word	0x2000013c

080005a4 <UART_INIT>:

void UART_INIT() {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	huart.Instance = USART1;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <UART_INIT+0x44>)
 80005aa:	4a10      	ldr	r2, [pc, #64]	@ (80005ec <UART_INIT+0x48>)
 80005ac:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate = 115200;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <UART_INIT+0x44>)
 80005b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005b4:	605a      	str	r2, [r3, #4]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <UART_INIT+0x44>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
	huart.Init.StopBits = UART_STOPBITS_1;
 80005bc:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <UART_INIT+0x44>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
	huart.Init.Parity = UART_PARITY_NONE;
 80005c2:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <UART_INIT+0x44>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c8:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <UART_INIT+0x44>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	619a      	str	r2, [r3, #24]
	huart.Init.Mode = UART_MODE_TX_RX;
 80005ce:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <UART_INIT+0x44>)
 80005d0:	220c      	movs	r2, #12
 80005d2:	615a      	str	r2, [r3, #20]
	if (HAL_UART_Init(&huart) != HAL_OK) {
 80005d4:	4804      	ldr	r0, [pc, #16]	@ (80005e8 <UART_INIT+0x44>)
 80005d6:	f002 fb21 	bl	8002c1c <HAL_UART_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <UART_INIT+0x40>
		Error_Handler();
 80005e0:	f7ff fe96 	bl	8000310 <Error_Handler>
	}
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000ac 	.word	0x200000ac
 80005ec:	40013800 	.word	0x40013800

080005f0 <HAL_MspInit>:

#include "main.h"
#include "stm32f1xx_hal.h"
void HAL_MspInit(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0


  //Here we will do low level processor specific inits.
 	//1. Set up the priority grouping of the arm cortex mx processor
 	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f001 fa39 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>
 	//2. Enable the required system exceptions of the arm cortex processor
 	SCB->SHCSR |= 0x7 << 16; //usage fault,bus fault and memory fault system exceptions
 80005fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <HAL_MspInit+0x40>)
 80005fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000630 <HAL_MspInit+0x40>)
 8000600:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000604:	6253      	str	r3, [r2, #36]	@ 0x24

 	//3. configure the priority of the system exceptions
 	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	f06f 000b 	mvn.w	r0, #11
 800060e:	f001 fa38 	bl	8001a82 <HAL_NVIC_SetPriority>
 	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	f06f 000a 	mvn.w	r0, #10
 800061a:	f001 fa32 	bl	8001a82 <HAL_NVIC_SetPriority>
 	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	f06f 0009 	mvn.w	r0, #9
 8000626:	f001 fa2c 	bl	8001a82 <HAL_NVIC_SetPriority>



}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <MX_GPIO_INIT>:
void MX_GPIO_INIT()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioLED = {0};
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <MX_GPIO_INIT+0x54>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a0e      	ldr	r2, [pc, #56]	@ (8000688 <MX_GPIO_INIT+0x54>)
 800064e:	f043 0310 	orr.w	r3, r3, #16
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <MX_GPIO_INIT+0x54>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0310 	and.w	r3, r3, #16
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
	gpioLED.Pin = GPIO_PIN_13;
 8000660:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000664:	60bb      	str	r3, [r7, #8]
	gpioLED.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
	gpioLED.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
	gpioLED.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2302      	movs	r3, #2
 8000670:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &gpioLED);
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	4619      	mov	r1, r3
 8000678:	4804      	ldr	r0, [pc, #16]	@ (800068c <MX_GPIO_INIT+0x58>)
 800067a:	f001 faeb 	bl	8001c54 <HAL_GPIO_Init>


}
 800067e:	bf00      	nop
 8000680:	3718      	adds	r7, #24
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000
 800068c:	40011000 	.word	0x40011000

08000690 <CAN_INIT>:
void CAN_INIT()
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
	//CAN_HandleTypeDef hcan ={0};
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000696:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <CAN_INIT+0x84>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <CAN_INIT+0x84>)
 800069c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006a0:	61d3      	str	r3, [r2, #28]
 80006a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000714 <CAN_INIT+0x84>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]


	hcan.Instance = CAN1;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <CAN_INIT+0x88>)
 80006b0:	4a1a      	ldr	r2, [pc, #104]	@ (800071c <CAN_INIT+0x8c>)
 80006b2:	601a      	str	r2, [r3, #0]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <CAN_INIT+0x88>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
	hcan.Init.AutoBusOff = DISABLE;
 80006ba:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <CAN_INIT+0x88>)
 80006bc:	2200      	movs	r2, #0
 80006be:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoRetransmission = ENABLE;
 80006c0:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <CAN_INIT+0x88>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	76da      	strb	r2, [r3, #27]
	hcan.Init.AutoWakeUp = DISABLE;
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <CAN_INIT+0x88>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	769a      	strb	r2, [r3, #26]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <CAN_INIT+0x88>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <CAN_INIT+0x88>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	775a      	strb	r2, [r3, #29]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <CAN_INIT+0x88>)
 80006da:	2200      	movs	r2, #0
 80006dc:	761a      	strb	r2, [r3, #24]

	hcan.Init.Prescaler = 5;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <CAN_INIT+0x88>)
 80006e0:	2205      	movs	r2, #5
 80006e2:	605a      	str	r2, [r3, #4]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <CAN_INIT+0x88>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <CAN_INIT+0x88>)
 80006ec:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80006f0:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <CAN_INIT+0x88>)
 80006f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80006f8:	615a      	str	r2, [r3, #20]
	if(HAL_CAN_Init(&hcan) != HAL_OK)
 80006fa:	4807      	ldr	r0, [pc, #28]	@ (8000718 <CAN_INIT+0x88>)
 80006fc:	f000 fabc 	bl	8000c78 <HAL_CAN_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <CAN_INIT+0x7a>
	{
		Error_Handler();
 8000706:	f7ff fe03 	bl	8000310 <Error_Handler>
	}


}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	20000084 	.word	0x20000084
 800071c:	40006400 	.word	0x40006400

08000720 <HAL_CAN_MspInit>:
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <HAL_CAN_MspInit+0xb4>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a26      	ldr	r2, [pc, #152]	@ (80007d4 <HAL_CAN_MspInit+0xb4>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6193      	str	r3, [r2, #24]
 8000742:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <HAL_CAN_MspInit+0xb4>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_CAN1_CLK_ENABLE();
 800074e:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <HAL_CAN_MspInit+0xb4>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a20      	ldr	r2, [pc, #128]	@ (80007d4 <HAL_CAN_MspInit+0xb4>)
 8000754:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <HAL_CAN_MspInit+0xb4>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]

	    GPIO_InitStruct.Pin  = GPIO_PIN_11;
 8000766:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800076a:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	4817      	ldr	r0, [pc, #92]	@ (80007d8 <HAL_CAN_MspInit+0xb8>)
 800077c:	f001 fa6a 	bl	8001c54 <HAL_GPIO_Init>

	    // PA12 - CAN_TX (AF push-pull)
	    GPIO_InitStruct.Pin   = GPIO_PIN_12;
 8000780:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000784:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	4619      	mov	r1, r3
 8000794:	4810      	ldr	r0, [pc, #64]	@ (80007d8 <HAL_CAN_MspInit+0xb8>)
 8000796:	f001 fa5d 	bl	8001c54 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 15, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	210f      	movs	r1, #15
 800079e:	2013      	movs	r0, #19
 80007a0:	f001 f96f 	bl	8001a82 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 15, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	210f      	movs	r1, #15
 80007a8:	2014      	movs	r0, #20
 80007aa:	f001 f96a 	bl	8001a82 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	210f      	movs	r1, #15
 80007b2:	2016      	movs	r0, #22
 80007b4:	f001 f965 	bl	8001a82 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80007b8:	2013      	movs	r0, #19
 80007ba:	f001 f97e 	bl	8001aba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80007be:	2014      	movs	r0, #20
 80007c0:	f001 f97b 	bl	8001aba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80007c4:	2016      	movs	r0, #22
 80007c6:	f001 f978 	bl	8001aba <HAL_NVIC_EnableIRQ>


}
 80007ca:	bf00      	nop
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40010800 	.word	0x40010800

080007dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart ={0};
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]

	//1. here we will do the low level inits of the usart2 peripheral
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b20      	ldr	r3, [pc, #128]	@ (8000874 <HAL_UART_MspInit+0x98>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000874 <HAL_UART_MspInit+0x98>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6193      	str	r3, [r2, #24]
 80007fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <HAL_UART_MspInit+0x98>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_USART1_CLK_ENABLE();
 800080a:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <HAL_UART_MspInit+0x98>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a19      	ldr	r2, [pc, #100]	@ (8000874 <HAL_UART_MspInit+0x98>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000814:	6193      	str	r3, [r2, #24]
 8000816:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <HAL_UART_MspInit+0x98>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
	//2. do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_9;
 8000822:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000826:	613b      	str	r3, [r7, #16]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	617b      	str	r3, [r7, #20]
	gpio_uart.Pull= GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
	gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	4619      	mov	r1, r3
 800083a:	480f      	ldr	r0, [pc, #60]	@ (8000878 <HAL_UART_MspInit+0x9c>)
 800083c:	f001 fa0a 	bl	8001c54 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_10;
 8000840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000844:	613b      	str	r3, [r7, #16]
	gpio_uart.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
	gpio_uart.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 800084e:	f107 0310 	add.w	r3, r7, #16
 8000852:	4619      	mov	r1, r3
 8000854:	4808      	ldr	r0, [pc, #32]	@ (8000878 <HAL_UART_MspInit+0x9c>)
 8000856:	f001 f9fd 	bl	8001c54 <HAL_GPIO_Init>

	//3. enable the irq and set up the priority (NVIC settings
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800085a:	2025      	movs	r0, #37	@ 0x25
 800085c:	f001 f92d 	bl	8001aba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	210f      	movs	r1, #15
 8000864:	2025      	movs	r0, #37	@ 0x25
 8000866:	f001 f90c 	bl	8001a82 <HAL_NVIC_SetPriority>
}
 800086a:	bf00      	nop
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000
 8000878:	40010800 	.word	0x40010800

0800087c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000884:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <HAL_TIM_Base_MspInit+0x38>)
 8000886:	69db      	ldr	r3, [r3, #28]
 8000888:	4a0a      	ldr	r2, [pc, #40]	@ (80008b4 <HAL_TIM_Base_MspInit+0x38>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	61d3      	str	r3, [r2, #28]
 8000890:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <HAL_TIM_Base_MspInit+0x38>)
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]

	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800089c:	201c      	movs	r0, #28
 800089e:	f001 f90c 	bl	8001aba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	201c      	movs	r0, #28
 80008a8:	f001 f8eb 	bl	8001a82 <HAL_NVIC_SetPriority>
}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000

080008b8 <USART1_IRQHandler>:
/**
 * @brief This function handles Non maskable interrupt.
 */


void USART1_IRQHandler(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart);
 80008bc:	4802      	ldr	r0, [pc, #8]	@ (80008c8 <USART1_IRQHandler+0x10>)
 80008be:	f002 fa89 	bl	8002dd4 <HAL_UART_IRQHandler>
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200000ac 	.word	0x200000ac

080008cc <USB_HP_CAN1_TX_IRQHandler>:

void USB_HP_CAN1_TX_IRQHandler(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80008d0:	4802      	ldr	r0, [pc, #8]	@ (80008dc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80008d2:	f000 fdee 	bl	80014b2 <HAL_CAN_IRQHandler>
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000084 	.word	0x20000084

080008e0 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80008e4:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008e6:	f000 fde4 	bl	80014b2 <HAL_CAN_IRQHandler>
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000084 	.word	0x20000084

080008f4 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80008f8:	4802      	ldr	r0, [pc, #8]	@ (8000904 <CAN1_RX1_IRQHandler+0x10>)
 80008fa:	f000 fdda 	bl	80014b2 <HAL_CAN_IRQHandler>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000084 	.word	0x20000084

08000908 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void) {
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 800090c:	4802      	ldr	r0, [pc, #8]	@ (8000918 <CAN1_SCE_IRQHandler+0x10>)
 800090e:	f000 fdd0 	bl	80014b2 <HAL_CAN_IRQHandler>
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000084 	.word	0x20000084

0800091c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 8000920:	4802      	ldr	r0, [pc, #8]	@ (800092c <TIM2_IRQHandler+0x10>)
 8000922:	f001 ffe7 	bl	80028f4 <HAL_TIM_IRQHandler>
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000f4 	.word	0x200000f4

08000930 <NMI_Handler>:
void NMI_Handler(void) {
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <NMI_Handler+0x4>

08000938 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <MemManage_Handler+0x4>

08000948 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <UsageFault_Handler+0x4>

08000958 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000980:	f000 f93a 	bl	8000bf8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <ITM_SendChar+0x44>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a0d      	ldr	r2, [pc, #52]	@ (80009cc <ITM_SendChar+0x44>)
 8000998:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800099c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800099e:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <ITM_SendChar+0x48>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a0b      	ldr	r2, [pc, #44]	@ (80009d0 <ITM_SendChar+0x48>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80009aa:	bf00      	nop
 80009ac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0f8      	beq.n	80009ac <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80009ba:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	6013      	str	r3, [r2, #0]
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	e000edfc 	.word	0xe000edfc
 80009d0:	e0000e00 	.word	0xe0000e00

080009d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	e00a      	b.n	80009fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009e6:	f3af 8000 	nop.w
 80009ea:	4601      	mov	r1, r0
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	60ba      	str	r2, [r7, #8]
 80009f2:	b2ca      	uxtb	r2, r1
 80009f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3301      	adds	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dbf0      	blt.n	80009e6 <_read+0x12>
  }

  return len;
 8000a04:	687b      	ldr	r3, [r7, #4]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b086      	sub	sp, #24
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	60f8      	str	r0, [r7, #12]
 8000a16:	60b9      	str	r1, [r7, #8]
 8000a18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	e009      	b.n	8000a34 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	60ba      	str	r2, [r7, #8]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ffad 	bl	8000988 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbf1      	blt.n	8000a20 <_write+0x12>
  }
  return len;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <_close>:

int _close(int file)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a6c:	605a      	str	r2, [r3, #4]
  return 0;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <_isatty>:

int _isatty(int file)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr

08000a8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b085      	sub	sp, #20
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
	...

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f003 f8fc 	bl	8003cd4 <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	@ (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20005000 	.word	0x20005000
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	20000210 	.word	0x20000210
 8000b10:	20000368 	.word	0x20000368

08000b14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b20:	f7ff fff8 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b24:	480b      	ldr	r0, [pc, #44]	@ (8000b54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b26:	490c      	ldr	r1, [pc, #48]	@ (8000b58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b28:	4a0c      	ldr	r2, [pc, #48]	@ (8000b5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a09      	ldr	r2, [pc, #36]	@ (8000b60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b3c:	4c09      	ldr	r4, [pc, #36]	@ (8000b64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f003 f8c9 	bl	8003ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b4e:	f7ff fb9f 	bl	8000290 <main>
  bx lr
 8000b52:	4770      	bx	lr
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b5c:	08004228 	.word	0x08004228
  ldr r2, =_sbss
 8000b60:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b64:	20000364 	.word	0x20000364

08000b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC1_2_IRQHandler>
	...

08000b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <HAL_Init+0x28>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a07      	ldr	r2, [pc, #28]	@ (8000b94 <HAL_Init+0x28>)
 8000b76:	f043 0310 	orr.w	r3, r3, #16
 8000b7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 ff75 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b82:	200f      	movs	r0, #15
 8000b84:	f000 f808 	bl	8000b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b88:	f7ff fd32 	bl	80005f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40022000 	.word	0x40022000

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba0:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <HAL_InitTick+0x54>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <HAL_InitTick+0x58>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 ff8d 	bl	8001ad6 <HAL_SYSTICK_Config>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00e      	b.n	8000be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d80a      	bhi.n	8000be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f000 ff55 	bl	8001a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd8:	4a06      	ldr	r2, [pc, #24]	@ (8000bf4 <HAL_InitTick+0x5c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <HAL_IncTick+0x1c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <HAL_IncTick+0x20>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a03      	ldr	r2, [pc, #12]	@ (8000c18 <HAL_IncTick+0x20>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000214 	.word	0x20000214

08000c1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b02      	ldr	r3, [pc, #8]	@ (8000c2c <HAL_GetTick+0x10>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	20000214 	.word	0x20000214

08000c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff fff0 	bl	8000c1c <HAL_GetTick>
 8000c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c48:	d005      	beq.n	8000c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <HAL_Delay+0x44>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c56:	bf00      	nop
 8000c58:	f7ff ffe0 	bl	8000c1c <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d8f7      	bhi.n	8000c58 <HAL_Delay+0x28>
  {
  }
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008

08000c78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d101      	bne.n	8000c8a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e0ed      	b.n	8000e66 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d102      	bne.n	8000c9c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fd42 	bl	8000720 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f042 0201 	orr.w	r2, r2, #1
 8000caa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cac:	f7ff ffb6 	bl	8000c1c <HAL_GetTick>
 8000cb0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cb2:	e012      	b.n	8000cda <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cb4:	f7ff ffb2 	bl	8000c1c <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	2b0a      	cmp	r3, #10
 8000cc0:	d90b      	bls.n	8000cda <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2205      	movs	r2, #5
 8000cd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e0c5      	b.n	8000e66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0e5      	beq.n	8000cb4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f022 0202 	bic.w	r2, r2, #2
 8000cf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cf8:	f7ff ff90 	bl	8000c1c <HAL_GetTick>
 8000cfc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cfe:	e012      	b.n	8000d26 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d00:	f7ff ff8c 	bl	8000c1c <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	2b0a      	cmp	r3, #10
 8000d0c:	d90b      	bls.n	8000d26 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d12:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2205      	movs	r2, #5
 8000d1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e09f      	b.n	8000e66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1e5      	bne.n	8000d00 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	7e1b      	ldrb	r3, [r3, #24]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d108      	bne.n	8000d4e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	e007      	b.n	8000d5e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7e5b      	ldrb	r3, [r3, #25]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d108      	bne.n	8000d78 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	e007      	b.n	8000d88 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d86:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	7e9b      	ldrb	r3, [r3, #26]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d108      	bne.n	8000da2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f042 0220 	orr.w	r2, r2, #32
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	e007      	b.n	8000db2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f022 0220 	bic.w	r2, r2, #32
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7edb      	ldrb	r3, [r3, #27]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d108      	bne.n	8000dcc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 0210 	bic.w	r2, r2, #16
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	e007      	b.n	8000ddc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f042 0210 	orr.w	r2, r2, #16
 8000dda:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7f1b      	ldrb	r3, [r3, #28]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d108      	bne.n	8000df6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 0208 	orr.w	r2, r2, #8
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	e007      	b.n	8000e06 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 0208 	bic.w	r2, r2, #8
 8000e04:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	7f5b      	ldrb	r3, [r3, #29]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d108      	bne.n	8000e20 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f042 0204 	orr.w	r2, r2, #4
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e007      	b.n	8000e30 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0204 	bic.w	r2, r2, #4
 8000e2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	ea42 0103 	orr.w	r1, r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	1e5a      	subs	r2, r3, #1
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	430a      	orrs	r2, r1
 8000e54:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b087      	sub	sp, #28
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e84:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e86:	7cfb      	ldrb	r3, [r7, #19]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d003      	beq.n	8000e94 <HAL_CAN_ConfigFilter+0x26>
 8000e8c:	7cfb      	ldrb	r3, [r7, #19]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	f040 80aa 	bne.w	8000fe8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000e9a:	f043 0201 	orr.w	r2, r3, #1
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	f003 031f 	and.w	r3, r3, #31
 8000eac:	2201      	movs	r2, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d123      	bne.n	8000f16 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	401a      	ands	r2, r3
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ef0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	3248      	adds	r2, #72	@ 0x48
 8000ef6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f0a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f0c:	6979      	ldr	r1, [r7, #20]
 8000f0e:	3348      	adds	r3, #72	@ 0x48
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	440b      	add	r3, r1
 8000f14:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d122      	bne.n	8000f64 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	431a      	orrs	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f3e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3248      	adds	r2, #72	@ 0x48
 8000f44:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f58:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f5a:	6979      	ldr	r1, [r7, #20]
 8000f5c:	3348      	adds	r3, #72	@ 0x48
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	440b      	add	r3, r1
 8000f62:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d109      	bne.n	8000f80 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000f7e:	e007      	b.n	8000f90 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d109      	bne.n	8000fac <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000faa:	e007      	b.n	8000fbc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d107      	bne.n	8000fd4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000fda:	f023 0201 	bic.w	r2, r3, #1
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e006      	b.n	8000ff6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
  }
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	371c      	adds	r7, #28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b01      	cmp	r3, #1
 8001012:	d12e      	bne.n	8001072 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2202      	movs	r2, #2
 8001018:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800102c:	f7ff fdf6 	bl	8000c1c <HAL_GetTick>
 8001030:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001032:	e012      	b.n	800105a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001034:	f7ff fdf2 	bl	8000c1c <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b0a      	cmp	r3, #10
 8001040:	d90b      	bls.n	800105a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001046:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2205      	movs	r2, #5
 8001052:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e012      	b.n	8001080 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1e5      	bne.n	8001034 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e006      	b.n	8001080 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001076:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
  }
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	@ 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800109c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80010a6:	7ffb      	ldrb	r3, [r7, #31]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d003      	beq.n	80010b4 <HAL_CAN_AddTxMessage+0x2c>
 80010ac:	7ffb      	ldrb	r3, [r7, #31]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	f040 80ad 	bne.w	800120e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10a      	bne.n	80010d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d105      	bne.n	80010d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 8095 	beq.w	80011fe <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	0e1b      	lsrs	r3, r3, #24
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80010de:	2201      	movs	r2, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10d      	bne.n	800110c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010fa:	68f9      	ldr	r1, [r7, #12]
 80010fc:	6809      	ldr	r1, [r1, #0]
 80010fe:	431a      	orrs	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	3318      	adds	r3, #24
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	440b      	add	r3, r1
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e00f      	b.n	800112c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001116:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800111c:	68f9      	ldr	r1, [r7, #12]
 800111e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001120:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3318      	adds	r3, #24
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	440b      	add	r3, r1
 800112a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6819      	ldr	r1, [r3, #0]
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	691a      	ldr	r2, [r3, #16]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3318      	adds	r3, #24
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	440b      	add	r3, r1
 800113c:	3304      	adds	r3, #4
 800113e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	7d1b      	ldrb	r3, [r3, #20]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d111      	bne.n	800116c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	3318      	adds	r3, #24
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	4413      	add	r3, r2
 8001154:	3304      	adds	r3, #4
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	6811      	ldr	r1, [r2, #0]
 800115c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3318      	adds	r3, #24
 8001164:	011b      	lsls	r3, r3, #4
 8001166:	440b      	add	r3, r1
 8001168:	3304      	adds	r3, #4
 800116a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3307      	adds	r3, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	061a      	lsls	r2, r3, #24
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3306      	adds	r3, #6
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	041b      	lsls	r3, r3, #16
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3305      	adds	r3, #5
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	4313      	orrs	r3, r2
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	3204      	adds	r2, #4
 800118c:	7812      	ldrb	r2, [r2, #0]
 800118e:	4610      	mov	r0, r2
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	6811      	ldr	r1, [r2, #0]
 8001194:	ea43 0200 	orr.w	r2, r3, r0
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	440b      	add	r3, r1
 800119e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80011a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3303      	adds	r3, #3
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	061a      	lsls	r2, r3, #24
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3302      	adds	r3, #2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	041b      	lsls	r3, r3, #16
 80011b4:	431a      	orrs	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3301      	adds	r3, #1
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	4313      	orrs	r3, r2
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	7812      	ldrb	r2, [r2, #0]
 80011c4:	4610      	mov	r0, r2
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	6811      	ldr	r1, [r2, #0]
 80011ca:	ea43 0200 	orr.w	r2, r3, r0
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	440b      	add	r3, r1
 80011d4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80011d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	3318      	adds	r3, #24
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	4413      	add	r3, r2
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	6811      	ldr	r1, [r2, #0]
 80011ec:	f043 0201 	orr.w	r2, r3, #1
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3318      	adds	r3, #24
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	440b      	add	r3, r1
 80011f8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e00e      	b.n	800121c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001202:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e006      	b.n	800121c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001212:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
  }
}
 800121c:	4618      	mov	r0, r3
 800121e:	3724      	adds	r7, #36	@ 0x24
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr

08001226 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001226:	b480      	push	{r7}
 8001228:	b087      	sub	sp, #28
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800123a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d003      	beq.n	800124a <HAL_CAN_GetRxMessage+0x24>
 8001242:	7dfb      	ldrb	r3, [r7, #23]
 8001244:	2b02      	cmp	r3, #2
 8001246:	f040 8103 	bne.w	8001450 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10e      	bne.n	800126e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d116      	bne.n	800128c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001262:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e0f7      	b.n	800145e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d107      	bne.n	800128c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001280:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e0e8      	b.n	800145e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	331b      	adds	r3, #27
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	4413      	add	r3, r2
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0204 	and.w	r2, r3, #4
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10c      	bne.n	80012c4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	331b      	adds	r3, #27
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	4413      	add	r3, r2
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0d5b      	lsrs	r3, r3, #21
 80012ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	e00b      	b.n	80012dc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	331b      	adds	r3, #27
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	4413      	add	r3, r2
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	08db      	lsrs	r3, r3, #3
 80012d4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	331b      	adds	r3, #27
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	4413      	add	r3, r2
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0202 	and.w	r2, r3, #2
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	331b      	adds	r3, #27
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	4413      	add	r3, r2
 80012fe:	3304      	adds	r3, #4
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2208      	movs	r2, #8
 800130e:	611a      	str	r2, [r3, #16]
 8001310:	e00b      	b.n	800132a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	331b      	adds	r3, #27
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	4413      	add	r3, r2
 800131e:	3304      	adds	r3, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 020f 	and.w	r2, r3, #15
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	331b      	adds	r3, #27
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	4413      	add	r3, r2
 8001336:	3304      	adds	r3, #4
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	b2da      	uxtb	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	331b      	adds	r3, #27
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	4413      	add	r3, r2
 800134e:	3304      	adds	r3, #4
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	0c1b      	lsrs	r3, r3, #16
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	4413      	add	r3, r2
 8001364:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	4413      	add	r3, r2
 800137a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0a1a      	lsrs	r2, r3, #8
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	4413      	add	r3, r2
 8001394:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	0c1a      	lsrs	r2, r3, #16
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	3302      	adds	r3, #2
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	4413      	add	r3, r2
 80013ae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	0e1a      	lsrs	r2, r3, #24
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3303      	adds	r3, #3
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	4413      	add	r3, r2
 80013c8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	3304      	adds	r3, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	4413      	add	r3, r2
 80013e0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	0a1a      	lsrs	r2, r3, #8
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	3305      	adds	r3, #5
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	4413      	add	r3, r2
 80013fa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	0c1a      	lsrs	r2, r3, #16
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	3306      	adds	r3, #6
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	4413      	add	r3, r2
 8001414:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	0e1a      	lsrs	r2, r3, #24
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	3307      	adds	r3, #7
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d108      	bne.n	800143c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 0220 	orr.w	r2, r2, #32
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	e007      	b.n	800144c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	691a      	ldr	r2, [r3, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 0220 	orr.w	r2, r2, #32
 800144a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	e006      	b.n	800145e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001454:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
  }
}
 800145e:	4618      	mov	r0, r3
 8001460:	371c      	adds	r7, #28
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001478:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d002      	beq.n	8001486 <HAL_CAN_ActivateNotification+0x1e>
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d109      	bne.n	800149a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6959      	ldr	r1, [r3, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e006      	b.n	80014a8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
  }
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b08a      	sub	sp, #40	@ 0x28
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d07c      	beq.n	80015f2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d023      	beq.n	800154a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2201      	movs	r2, #1
 8001508:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7fe ffa7 	bl	8000468 <HAL_CAN_TxMailbox0CompleteCallback>
 800151a:	e016      	b.n	800154a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
 800152e:	e00c      	b.n	800154a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d004      	beq.n	8001544 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
 8001542:	e002      	b.n	800154a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f97d 	bl	8001844 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d024      	beq.n	800159e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800155c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f959 	bl	8001820 <HAL_CAN_TxMailbox1CompleteCallback>
 800156e:	e016      	b.n	800159e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
 8001582:	e00c      	b.n	800159e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800158a:	2b00      	cmp	r3, #0
 800158c:	d004      	beq.n	8001598 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
 8001596:	e002      	b.n	800159e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f95c 	bl	8001856 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d024      	beq.n	80015f2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f938 	bl	8001832 <HAL_CAN_TxMailbox2CompleteCallback>
 80015c2:	e016      	b.n	80015f2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015d6:	e00c      	b.n	80015f2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d004      	beq.n	80015ec <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ea:	e002      	b.n	80015f2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f93b 	bl	8001868 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00c      	beq.n	8001616 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	2b00      	cmp	r3, #0
 8001604:	d007      	beq.n	8001616 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001608:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2210      	movs	r2, #16
 8001614:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00b      	beq.n	8001638 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2208      	movs	r2, #8
 8001630:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f921 	bl	800187a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d009      	beq.n	8001656 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7fe ff2d 	bl	80004b0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00c      	beq.n	800167a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b00      	cmp	r3, #0
 8001668:	d007      	beq.n	800167a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2210      	movs	r2, #16
 8001678:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00b      	beq.n	800169c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2208      	movs	r2, #8
 8001694:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f901 	bl	800189e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d002      	beq.n	80016ba <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f8e9 	bl	800188c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00b      	beq.n	80016dc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d006      	beq.n	80016dc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2210      	movs	r2, #16
 80016d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f8ea 	bl	80018b0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00b      	beq.n	80016fe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2208      	movs	r2, #8
 80016f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f8e2 	bl	80018c2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d07b      	beq.n	8001800 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b00      	cmp	r3, #0
 8001710:	d072      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001750:	2b00      	cmp	r3, #0
 8001752:	d008      	beq.n	8001766 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800176c:	2b00      	cmp	r3, #0
 800176e:	d043      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001776:	2b00      	cmp	r3, #0
 8001778:	d03e      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001780:	2b60      	cmp	r3, #96	@ 0x60
 8001782:	d02b      	beq.n	80017dc <HAL_CAN_IRQHandler+0x32a>
 8001784:	2b60      	cmp	r3, #96	@ 0x60
 8001786:	d82e      	bhi.n	80017e6 <HAL_CAN_IRQHandler+0x334>
 8001788:	2b50      	cmp	r3, #80	@ 0x50
 800178a:	d022      	beq.n	80017d2 <HAL_CAN_IRQHandler+0x320>
 800178c:	2b50      	cmp	r3, #80	@ 0x50
 800178e:	d82a      	bhi.n	80017e6 <HAL_CAN_IRQHandler+0x334>
 8001790:	2b40      	cmp	r3, #64	@ 0x40
 8001792:	d019      	beq.n	80017c8 <HAL_CAN_IRQHandler+0x316>
 8001794:	2b40      	cmp	r3, #64	@ 0x40
 8001796:	d826      	bhi.n	80017e6 <HAL_CAN_IRQHandler+0x334>
 8001798:	2b30      	cmp	r3, #48	@ 0x30
 800179a:	d010      	beq.n	80017be <HAL_CAN_IRQHandler+0x30c>
 800179c:	2b30      	cmp	r3, #48	@ 0x30
 800179e:	d822      	bhi.n	80017e6 <HAL_CAN_IRQHandler+0x334>
 80017a0:	2b10      	cmp	r3, #16
 80017a2:	d002      	beq.n	80017aa <HAL_CAN_IRQHandler+0x2f8>
 80017a4:	2b20      	cmp	r3, #32
 80017a6:	d005      	beq.n	80017b4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017a8:	e01d      	b.n	80017e6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	f043 0308 	orr.w	r3, r3, #8
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017b2:	e019      	b.n	80017e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017bc:	e014      	b.n	80017e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	f043 0320 	orr.w	r3, r3, #32
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017c6:	e00f      	b.n	80017e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017d0:	e00a      	b.n	80017e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017da:	e005      	b.n	80017e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017e4:	e000      	b.n	80017e8 <HAL_CAN_IRQHandler+0x336>
            break;
 80017e6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	699a      	ldr	r2, [r3, #24]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80017f6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2204      	movs	r2, #4
 80017fe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001802:	2b00      	cmp	r3, #0
 8001804:	d008      	beq.n	8001818 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7fe fe8f 	bl	8000536 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001818:	bf00      	nop
 800181a:	3728      	adds	r7, #40	@ 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f0:	4013      	ands	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001906:	4a04      	ldr	r2, [pc, #16]	@ (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	60d3      	str	r3, [r2, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001920:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <__NVIC_GetPriorityGrouping+0x18>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0307 	and.w	r3, r3, #7
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db0b      	blt.n	8001962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	4906      	ldr	r1, [pc, #24]	@ (800196c <__NVIC_EnableIRQ+0x34>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2001      	movs	r0, #1
 800195a:	fa00 f202 	lsl.w	r2, r0, r2
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100

08001970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	db0a      	blt.n	800199a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	490c      	ldr	r1, [pc, #48]	@ (80019bc <__NVIC_SetPriority+0x4c>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	440b      	add	r3, r1
 8001994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001998:	e00a      	b.n	80019b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4908      	ldr	r1, [pc, #32]	@ (80019c0 <__NVIC_SetPriority+0x50>)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3b04      	subs	r3, #4
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	761a      	strb	r2, [r3, #24]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e100 	.word	0xe000e100
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	@ 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f1c3 0307 	rsb	r3, r3, #7
 80019de:	2b04      	cmp	r3, #4
 80019e0:	bf28      	it	cs
 80019e2:	2304      	movcs	r3, #4
 80019e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d902      	bls.n	80019f4 <NVIC_EncodePriority+0x30>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3b03      	subs	r3, #3
 80019f2:	e000      	b.n	80019f6 <NVIC_EncodePriority+0x32>
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	401a      	ands	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	4313      	orrs	r3, r2
         );
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	@ 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a38:	d301      	bcc.n	8001a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <SysTick_Config+0x40>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a46:	210f      	movs	r1, #15
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f7ff ff90 	bl	8001970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <SysTick_Config+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <SysTick_Config+0x40>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff2d 	bl	80018d4 <__NVIC_SetPriorityGrouping>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a94:	f7ff ff42 	bl	800191c <__NVIC_GetPriorityGrouping>
 8001a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f7ff ff90 	bl	80019c4 <NVIC_EncodePriority>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff5f 	bl	8001970 <__NVIC_SetPriority>
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff35 	bl	8001938 <__NVIC_EnableIRQ>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ffa2 	bl	8001a28 <SysTick_Config>
 8001ae4:	4603      	mov	r3, r0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d008      	beq.n	8001b18 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2204      	movs	r2, #4
 8001b0a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e020      	b.n	8001b5a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 020e 	bic.w	r2, r2, #14
 8001b26:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b40:	2101      	movs	r1, #1
 8001b42:	fa01 f202 	lsl.w	r2, r1, r2
 8001b46:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d005      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2204      	movs	r2, #4
 8001b80:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	73fb      	strb	r3, [r7, #15]
 8001b86:	e051      	b.n	8001c2c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 020e 	bic.w	r2, r2, #14
 8001b96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a22      	ldr	r2, [pc, #136]	@ (8001c38 <HAL_DMA_Abort_IT+0xd4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d029      	beq.n	8001c06 <HAL_DMA_Abort_IT+0xa2>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a21      	ldr	r2, [pc, #132]	@ (8001c3c <HAL_DMA_Abort_IT+0xd8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d022      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x9e>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <HAL_DMA_Abort_IT+0xdc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d01a      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x98>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1e      	ldr	r2, [pc, #120]	@ (8001c44 <HAL_DMA_Abort_IT+0xe0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d012      	beq.n	8001bf6 <HAL_DMA_Abort_IT+0x92>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c48 <HAL_DMA_Abort_IT+0xe4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00a      	beq.n	8001bf0 <HAL_DMA_Abort_IT+0x8c>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1b      	ldr	r2, [pc, #108]	@ (8001c4c <HAL_DMA_Abort_IT+0xe8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d102      	bne.n	8001bea <HAL_DMA_Abort_IT+0x86>
 8001be4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001be8:	e00e      	b.n	8001c08 <HAL_DMA_Abort_IT+0xa4>
 8001bea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bee:	e00b      	b.n	8001c08 <HAL_DMA_Abort_IT+0xa4>
 8001bf0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bf4:	e008      	b.n	8001c08 <HAL_DMA_Abort_IT+0xa4>
 8001bf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bfa:	e005      	b.n	8001c08 <HAL_DMA_Abort_IT+0xa4>
 8001bfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c00:	e002      	b.n	8001c08 <HAL_DMA_Abort_IT+0xa4>
 8001c02:	2310      	movs	r3, #16
 8001c04:	e000      	b.n	8001c08 <HAL_DMA_Abort_IT+0xa4>
 8001c06:	2301      	movs	r3, #1
 8001c08:	4a11      	ldr	r2, [pc, #68]	@ (8001c50 <HAL_DMA_Abort_IT+0xec>)
 8001c0a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	4798      	blx	r3
    } 
  }
  return status;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40020008 	.word	0x40020008
 8001c3c:	4002001c 	.word	0x4002001c
 8001c40:	40020030 	.word	0x40020030
 8001c44:	40020044 	.word	0x40020044
 8001c48:	40020058 	.word	0x40020058
 8001c4c:	4002006c 	.word	0x4002006c
 8001c50:	40020000 	.word	0x40020000

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b08b      	sub	sp, #44	@ 0x2c
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c66:	e169      	b.n	8001f3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	f040 8158 	bne.w	8001f36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4a9a      	ldr	r2, [pc, #616]	@ (8001ef4 <HAL_GPIO_Init+0x2a0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d05e      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001c90:	4a98      	ldr	r2, [pc, #608]	@ (8001ef4 <HAL_GPIO_Init+0x2a0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d875      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001c96:	4a98      	ldr	r2, [pc, #608]	@ (8001ef8 <HAL_GPIO_Init+0x2a4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d058      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001c9c:	4a96      	ldr	r2, [pc, #600]	@ (8001ef8 <HAL_GPIO_Init+0x2a4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d86f      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001ca2:	4a96      	ldr	r2, [pc, #600]	@ (8001efc <HAL_GPIO_Init+0x2a8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d052      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001ca8:	4a94      	ldr	r2, [pc, #592]	@ (8001efc <HAL_GPIO_Init+0x2a8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d869      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001cae:	4a94      	ldr	r2, [pc, #592]	@ (8001f00 <HAL_GPIO_Init+0x2ac>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d04c      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001cb4:	4a92      	ldr	r2, [pc, #584]	@ (8001f00 <HAL_GPIO_Init+0x2ac>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d863      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001cba:	4a92      	ldr	r2, [pc, #584]	@ (8001f04 <HAL_GPIO_Init+0x2b0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d046      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001cc0:	4a90      	ldr	r2, [pc, #576]	@ (8001f04 <HAL_GPIO_Init+0x2b0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d85d      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001cc6:	2b12      	cmp	r3, #18
 8001cc8:	d82a      	bhi.n	8001d20 <HAL_GPIO_Init+0xcc>
 8001cca:	2b12      	cmp	r3, #18
 8001ccc:	d859      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001cce:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd4 <HAL_GPIO_Init+0x80>)
 8001cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd4:	08001d4f 	.word	0x08001d4f
 8001cd8:	08001d29 	.word	0x08001d29
 8001cdc:	08001d3b 	.word	0x08001d3b
 8001ce0:	08001d7d 	.word	0x08001d7d
 8001ce4:	08001d83 	.word	0x08001d83
 8001ce8:	08001d83 	.word	0x08001d83
 8001cec:	08001d83 	.word	0x08001d83
 8001cf0:	08001d83 	.word	0x08001d83
 8001cf4:	08001d83 	.word	0x08001d83
 8001cf8:	08001d83 	.word	0x08001d83
 8001cfc:	08001d83 	.word	0x08001d83
 8001d00:	08001d83 	.word	0x08001d83
 8001d04:	08001d83 	.word	0x08001d83
 8001d08:	08001d83 	.word	0x08001d83
 8001d0c:	08001d83 	.word	0x08001d83
 8001d10:	08001d83 	.word	0x08001d83
 8001d14:	08001d83 	.word	0x08001d83
 8001d18:	08001d31 	.word	0x08001d31
 8001d1c:	08001d45 	.word	0x08001d45
 8001d20:	4a79      	ldr	r2, [pc, #484]	@ (8001f08 <HAL_GPIO_Init+0x2b4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d26:	e02c      	b.n	8001d82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	623b      	str	r3, [r7, #32]
          break;
 8001d2e:	e029      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	3304      	adds	r3, #4
 8001d36:	623b      	str	r3, [r7, #32]
          break;
 8001d38:	e024      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	3308      	adds	r3, #8
 8001d40:	623b      	str	r3, [r7, #32]
          break;
 8001d42:	e01f      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	330c      	adds	r3, #12
 8001d4a:	623b      	str	r3, [r7, #32]
          break;
 8001d4c:	e01a      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d56:	2304      	movs	r3, #4
 8001d58:	623b      	str	r3, [r7, #32]
          break;
 8001d5a:	e013      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d64:	2308      	movs	r3, #8
 8001d66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	611a      	str	r2, [r3, #16]
          break;
 8001d6e:	e009      	b.n	8001d84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d70:	2308      	movs	r3, #8
 8001d72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	615a      	str	r2, [r3, #20]
          break;
 8001d7a:	e003      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
          break;
 8001d80:	e000      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          break;
 8001d82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	2bff      	cmp	r3, #255	@ 0xff
 8001d88:	d801      	bhi.n	8001d8e <HAL_GPIO_Init+0x13a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	e001      	b.n	8001d92 <HAL_GPIO_Init+0x13e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3304      	adds	r3, #4
 8001d92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2bff      	cmp	r3, #255	@ 0xff
 8001d98:	d802      	bhi.n	8001da0 <HAL_GPIO_Init+0x14c>
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	e002      	b.n	8001da6 <HAL_GPIO_Init+0x152>
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	3b08      	subs	r3, #8
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	210f      	movs	r1, #15
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	401a      	ands	r2, r3
 8001db8:	6a39      	ldr	r1, [r7, #32]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80b1 	beq.w	8001f36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dd4:	4b4d      	ldr	r3, [pc, #308]	@ (8001f0c <HAL_GPIO_Init+0x2b8>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8001f0c <HAL_GPIO_Init+0x2b8>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b4a      	ldr	r3, [pc, #296]	@ (8001f0c <HAL_GPIO_Init+0x2b8>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dec:	4a48      	ldr	r2, [pc, #288]	@ (8001f10 <HAL_GPIO_Init+0x2bc>)
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	3302      	adds	r3, #2
 8001df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a40      	ldr	r2, [pc, #256]	@ (8001f14 <HAL_GPIO_Init+0x2c0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d013      	beq.n	8001e40 <HAL_GPIO_Init+0x1ec>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f18 <HAL_GPIO_Init+0x2c4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d00d      	beq.n	8001e3c <HAL_GPIO_Init+0x1e8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a3e      	ldr	r2, [pc, #248]	@ (8001f1c <HAL_GPIO_Init+0x2c8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d007      	beq.n	8001e38 <HAL_GPIO_Init+0x1e4>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a3d      	ldr	r2, [pc, #244]	@ (8001f20 <HAL_GPIO_Init+0x2cc>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d101      	bne.n	8001e34 <HAL_GPIO_Init+0x1e0>
 8001e30:	2303      	movs	r3, #3
 8001e32:	e006      	b.n	8001e42 <HAL_GPIO_Init+0x1ee>
 8001e34:	2304      	movs	r3, #4
 8001e36:	e004      	b.n	8001e42 <HAL_GPIO_Init+0x1ee>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e002      	b.n	8001e42 <HAL_GPIO_Init+0x1ee>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <HAL_GPIO_Init+0x1ee>
 8001e40:	2300      	movs	r3, #0
 8001e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e44:	f002 0203 	and.w	r2, r2, #3
 8001e48:	0092      	lsls	r2, r2, #2
 8001e4a:	4093      	lsls	r3, r2
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e52:	492f      	ldr	r1, [pc, #188]	@ (8001f10 <HAL_GPIO_Init+0x2bc>)
 8001e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d006      	beq.n	8001e7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	492c      	ldr	r1, [pc, #176]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	4928      	ldr	r1, [pc, #160]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e94:	4b23      	ldr	r3, [pc, #140]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	4922      	ldr	r1, [pc, #136]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	60cb      	str	r3, [r1, #12]
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ea2:	4b20      	ldr	r3, [pc, #128]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	491e      	ldr	r1, [pc, #120]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ebc:	4b19      	ldr	r3, [pc, #100]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	4918      	ldr	r1, [pc, #96]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eca:	4b16      	ldr	r3, [pc, #88]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	4914      	ldr	r1, [pc, #80]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d021      	beq.n	8001f28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	490e      	ldr	r1, [pc, #56]	@ (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]
 8001ef0:	e021      	b.n	8001f36 <HAL_GPIO_Init+0x2e2>
 8001ef2:	bf00      	nop
 8001ef4:	10320000 	.word	0x10320000
 8001ef8:	10310000 	.word	0x10310000
 8001efc:	10220000 	.word	0x10220000
 8001f00:	10210000 	.word	0x10210000
 8001f04:	10120000 	.word	0x10120000
 8001f08:	10110000 	.word	0x10110000
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40010800 	.word	0x40010800
 8001f18:	40010c00 	.word	0x40010c00
 8001f1c:	40011000 	.word	0x40011000
 8001f20:	40011400 	.word	0x40011400
 8001f24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <HAL_GPIO_Init+0x304>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	4909      	ldr	r1, [pc, #36]	@ (8001f58 <HAL_GPIO_Init+0x304>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	3301      	adds	r3, #1
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f42:	fa22 f303 	lsr.w	r3, r2, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f47f ae8e 	bne.w	8001c68 <HAL_GPIO_Init+0x14>
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	372c      	adds	r7, #44	@ 0x2c
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr
 8001f58:	40010400 	.word	0x40010400

08001f5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4013      	ands	r3, r2
 8001f74:	041a      	lsls	r2, r3, #16
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	43d9      	mvns	r1, r3
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	400b      	ands	r3, r1
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	611a      	str	r2, [r3, #16]
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e272      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 8087 	beq.w	80020be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fb0:	4b92      	ldr	r3, [pc, #584]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d00c      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fbc:	4b8f      	ldr	r3, [pc, #572]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d112      	bne.n	8001fee <HAL_RCC_OscConfig+0x5e>
 8001fc8:	4b8c      	ldr	r3, [pc, #560]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd4:	d10b      	bne.n	8001fee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd6:	4b89      	ldr	r3, [pc, #548]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d06c      	beq.n	80020bc <HAL_RCC_OscConfig+0x12c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d168      	bne.n	80020bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e24c      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ff6:	d106      	bne.n	8002006 <HAL_RCC_OscConfig+0x76>
 8001ff8:	4b80      	ldr	r3, [pc, #512]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a7f      	ldr	r2, [pc, #508]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	e02e      	b.n	8002064 <HAL_RCC_OscConfig+0xd4>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0x98>
 800200e:	4b7b      	ldr	r3, [pc, #492]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a7a      	ldr	r2, [pc, #488]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002014:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b78      	ldr	r3, [pc, #480]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a77      	ldr	r2, [pc, #476]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002020:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e01d      	b.n	8002064 <HAL_RCC_OscConfig+0xd4>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0xbc>
 8002032:	4b72      	ldr	r3, [pc, #456]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a71      	ldr	r2, [pc, #452]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	4b6f      	ldr	r3, [pc, #444]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a6e      	ldr	r2, [pc, #440]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e00b      	b.n	8002064 <HAL_RCC_OscConfig+0xd4>
 800204c:	4b6b      	ldr	r3, [pc, #428]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a6a      	ldr	r2, [pc, #424]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	4b68      	ldr	r3, [pc, #416]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a67      	ldr	r2, [pc, #412]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 800205e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002062:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d013      	beq.n	8002094 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7fe fdd6 	bl	8000c1c <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002074:	f7fe fdd2 	bl	8000c1c <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	@ 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e200      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002086:	4b5d      	ldr	r3, [pc, #372]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0xe4>
 8002092:	e014      	b.n	80020be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7fe fdc2 	bl	8000c1c <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800209c:	f7fe fdbe 	bl	8000c1c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	@ 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e1ec      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ae:	4b53      	ldr	r3, [pc, #332]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x10c>
 80020ba:	e000      	b.n	80020be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d063      	beq.n	8002192 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ca:	4b4c      	ldr	r3, [pc, #304]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020d6:	4b49      	ldr	r3, [pc, #292]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d11c      	bne.n	800211c <HAL_RCC_OscConfig+0x18c>
 80020e2:	4b46      	ldr	r3, [pc, #280]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d116      	bne.n	800211c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ee:	4b43      	ldr	r3, [pc, #268]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <HAL_RCC_OscConfig+0x176>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d001      	beq.n	8002106 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e1c0      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002106:	4b3d      	ldr	r3, [pc, #244]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4939      	ldr	r1, [pc, #228]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211a:	e03a      	b.n	8002192 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d020      	beq.n	8002166 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002124:	4b36      	ldr	r3, [pc, #216]	@ (8002200 <HAL_RCC_OscConfig+0x270>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7fe fd77 	bl	8000c1c <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002132:	f7fe fd73 	bl	8000c1c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e1a1      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002144:	4b2d      	ldr	r3, [pc, #180]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002150:	4b2a      	ldr	r3, [pc, #168]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4927      	ldr	r1, [pc, #156]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]
 8002164:	e015      	b.n	8002192 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002166:	4b26      	ldr	r3, [pc, #152]	@ (8002200 <HAL_RCC_OscConfig+0x270>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7fe fd56 	bl	8000c1c <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002174:	f7fe fd52 	bl	8000c1c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e180      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002186:	4b1d      	ldr	r3, [pc, #116]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d03a      	beq.n	8002214 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d019      	beq.n	80021da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a6:	4b17      	ldr	r3, [pc, #92]	@ (8002204 <HAL_RCC_OscConfig+0x274>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ac:	f7fe fd36 	bl	8000c1c <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b4:	f7fe fd32 	bl	8000c1c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e160      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c6:	4b0d      	ldr	r3, [pc, #52]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 80021c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021d2:	2001      	movs	r0, #1
 80021d4:	f000 face 	bl	8002774 <RCC_Delay>
 80021d8:	e01c      	b.n	8002214 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021da:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <HAL_RCC_OscConfig+0x274>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e0:	f7fe fd1c 	bl	8000c1c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e6:	e00f      	b.n	8002208 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e8:	f7fe fd18 	bl	8000c1c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d908      	bls.n	8002208 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e146      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	42420000 	.word	0x42420000
 8002204:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002208:	4b92      	ldr	r3, [pc, #584]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1e9      	bne.n	80021e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80a6 	beq.w	800236e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002226:	4b8b      	ldr	r3, [pc, #556]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10d      	bne.n	800224e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002232:	4b88      	ldr	r3, [pc, #544]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4a87      	ldr	r2, [pc, #540]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800223c:	61d3      	str	r3, [r2, #28]
 800223e:	4b85      	ldr	r3, [pc, #532]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224a:	2301      	movs	r3, #1
 800224c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224e:	4b82      	ldr	r3, [pc, #520]	@ (8002458 <HAL_RCC_OscConfig+0x4c8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d118      	bne.n	800228c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225a:	4b7f      	ldr	r3, [pc, #508]	@ (8002458 <HAL_RCC_OscConfig+0x4c8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a7e      	ldr	r2, [pc, #504]	@ (8002458 <HAL_RCC_OscConfig+0x4c8>)
 8002260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002266:	f7fe fcd9 	bl	8000c1c <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226e:	f7fe fcd5 	bl	8000c1c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b64      	cmp	r3, #100	@ 0x64
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e103      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	4b75      	ldr	r3, [pc, #468]	@ (8002458 <HAL_RCC_OscConfig+0x4c8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x312>
 8002294:	4b6f      	ldr	r3, [pc, #444]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	4a6e      	ldr	r2, [pc, #440]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6213      	str	r3, [r2, #32]
 80022a0:	e02d      	b.n	80022fe <HAL_RCC_OscConfig+0x36e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x334>
 80022aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4a69      	ldr	r2, [pc, #420]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	f023 0301 	bic.w	r3, r3, #1
 80022b4:	6213      	str	r3, [r2, #32]
 80022b6:	4b67      	ldr	r3, [pc, #412]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4a66      	ldr	r2, [pc, #408]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	f023 0304 	bic.w	r3, r3, #4
 80022c0:	6213      	str	r3, [r2, #32]
 80022c2:	e01c      	b.n	80022fe <HAL_RCC_OscConfig+0x36e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b05      	cmp	r3, #5
 80022ca:	d10c      	bne.n	80022e6 <HAL_RCC_OscConfig+0x356>
 80022cc:	4b61      	ldr	r3, [pc, #388]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4a60      	ldr	r2, [pc, #384]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	f043 0304 	orr.w	r3, r3, #4
 80022d6:	6213      	str	r3, [r2, #32]
 80022d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6213      	str	r3, [r2, #32]
 80022e4:	e00b      	b.n	80022fe <HAL_RCC_OscConfig+0x36e>
 80022e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a5a      	ldr	r2, [pc, #360]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	6213      	str	r3, [r2, #32]
 80022f2:	4b58      	ldr	r3, [pc, #352]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a57      	ldr	r2, [pc, #348]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d015      	beq.n	8002332 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002306:	f7fe fc89 	bl	8000c1c <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7fe fc85 	bl	8000c1c <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e0b1      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002324:	4b4b      	ldr	r3, [pc, #300]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0ee      	beq.n	800230e <HAL_RCC_OscConfig+0x37e>
 8002330:	e014      	b.n	800235c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002332:	f7fe fc73 	bl	8000c1c <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002338:	e00a      	b.n	8002350 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7fe fc6f 	bl	8000c1c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002348:	4293      	cmp	r3, r2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e09b      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002350:	4b40      	ldr	r3, [pc, #256]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1ee      	bne.n	800233a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800235c:	7dfb      	ldrb	r3, [r7, #23]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002362:	4b3c      	ldr	r3, [pc, #240]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	4a3b      	ldr	r2, [pc, #236]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800236c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8087 	beq.w	8002486 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002378:	4b36      	ldr	r3, [pc, #216]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b08      	cmp	r3, #8
 8002382:	d061      	beq.n	8002448 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d146      	bne.n	800241a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238c:	4b33      	ldr	r3, [pc, #204]	@ (800245c <HAL_RCC_OscConfig+0x4cc>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe fc43 	bl	8000c1c <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239a:	f7fe fc3f 	bl	8000c1c <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e06d      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ac:	4b29      	ldr	r3, [pc, #164]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f0      	bne.n	800239a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023c0:	d108      	bne.n	80023d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023c2:	4b24      	ldr	r3, [pc, #144]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4921      	ldr	r1, [pc, #132]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a19      	ldr	r1, [r3, #32]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e4:	430b      	orrs	r3, r1
 80023e6:	491b      	ldr	r1, [pc, #108]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ec:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <HAL_RCC_OscConfig+0x4cc>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7fe fc13 	bl	8000c1c <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fa:	f7fe fc0f 	bl	8000c1c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e03d      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800240c:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x46a>
 8002418:	e035      	b.n	8002486 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241a:	4b10      	ldr	r3, [pc, #64]	@ (800245c <HAL_RCC_OscConfig+0x4cc>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7fe fbfc 	bl	8000c1c <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002428:	f7fe fbf8 	bl	8000c1c <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e026      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243a:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x498>
 8002446:	e01e      	b.n	8002486 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d107      	bne.n	8002460 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e019      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
 8002454:	40021000 	.word	0x40021000
 8002458:	40007000 	.word	0x40007000
 800245c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_RCC_OscConfig+0x500>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	429a      	cmp	r2, r3
 8002472:	d106      	bne.n	8002482 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d001      	beq.n	8002486 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40021000 	.word	0x40021000

08002494 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0d0      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d910      	bls.n	80024d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b67      	ldr	r3, [pc, #412]	@ (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 0207 	bic.w	r2, r3, #7
 80024be:	4965      	ldr	r1, [pc, #404]	@ (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b63      	ldr	r3, [pc, #396]	@ (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0b8      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f0:	4b59      	ldr	r3, [pc, #356]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4a58      	ldr	r2, [pc, #352]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002508:	4b53      	ldr	r3, [pc, #332]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a52      	ldr	r2, [pc, #328]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002512:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002514:	4b50      	ldr	r3, [pc, #320]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	494d      	ldr	r1, [pc, #308]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d040      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	4b47      	ldr	r3, [pc, #284]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d115      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e07f      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002552:	4b41      	ldr	r3, [pc, #260]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e073      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002562:	4b3d      	ldr	r3, [pc, #244]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e06b      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002572:	4b39      	ldr	r3, [pc, #228]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4936      	ldr	r1, [pc, #216]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002584:	f7fe fb4a 	bl	8000c1c <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800258c:	f7fe fb46 	bl	8000c1c <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e053      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 020c 	and.w	r2, r3, #12
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d1eb      	bne.n	800258c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b4:	4b27      	ldr	r3, [pc, #156]	@ (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d210      	bcs.n	80025e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b24      	ldr	r3, [pc, #144]	@ (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 0207 	bic.w	r2, r3, #7
 80025ca:	4922      	ldr	r1, [pc, #136]	@ (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b20      	ldr	r3, [pc, #128]	@ (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e032      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f0:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4916      	ldr	r1, [pc, #88]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800260e:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	490e      	ldr	r1, [pc, #56]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002622:	f000 f821 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 8002626:	4602      	mov	r2, r0
 8002628:	4b0b      	ldr	r3, [pc, #44]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	490a      	ldr	r1, [pc, #40]	@ (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002634:	5ccb      	ldrb	r3, [r1, r3]
 8002636:	fa22 f303 	lsr.w	r3, r2, r3
 800263a:	4a09      	ldr	r2, [pc, #36]	@ (8002660 <HAL_RCC_ClockConfig+0x1cc>)
 800263c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800263e:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <HAL_RCC_ClockConfig+0x1d0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe faa8 	bl	8000b98 <HAL_InitTick>

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40022000 	.word	0x40022000
 8002658:	40021000 	.word	0x40021000
 800265c:	080041f4 	.word	0x080041f4
 8002660:	20000000 	.word	0x20000000
 8002664:	20000004 	.word	0x20000004

08002668 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	2300      	movs	r3, #0
 800267c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002682:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x94>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b04      	cmp	r3, #4
 8002690:	d002      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x30>
 8002692:	2b08      	cmp	r3, #8
 8002694:	d003      	beq.n	800269e <HAL_RCC_GetSysClockFreq+0x36>
 8002696:	e027      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002698:	4b19      	ldr	r3, [pc, #100]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x98>)
 800269a:	613b      	str	r3, [r7, #16]
      break;
 800269c:	e027      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	0c9b      	lsrs	r3, r3, #18
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	4a17      	ldr	r2, [pc, #92]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026a8:	5cd3      	ldrb	r3, [r2, r3]
 80026aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d010      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026b6:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x94>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	0c5b      	lsrs	r3, r3, #17
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	4a11      	ldr	r2, [pc, #68]	@ (8002708 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026c2:	5cd3      	ldrb	r3, [r2, r3]
 80026c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ca:	fb03 f202 	mul.w	r2, r3, r2
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e004      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a0c      	ldr	r2, [pc, #48]	@ (800270c <HAL_RCC_GetSysClockFreq+0xa4>)
 80026dc:	fb02 f303 	mul.w	r3, r2, r3
 80026e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	613b      	str	r3, [r7, #16]
      break;
 80026e6:	e002      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026e8:	4b05      	ldr	r3, [pc, #20]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ea:	613b      	str	r3, [r7, #16]
      break;
 80026ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ee:	693b      	ldr	r3, [r7, #16]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	007a1200 	.word	0x007a1200
 8002704:	0800420c 	.word	0x0800420c
 8002708:	0800421c 	.word	0x0800421c
 800270c:	003d0900 	.word	0x003d0900

08002710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002714:	4b02      	ldr	r3, [pc, #8]	@ (8002720 <HAL_RCC_GetHCLKFreq+0x10>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	20000000 	.word	0x20000000

08002724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002728:	f7ff fff2 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	0a1b      	lsrs	r3, r3, #8
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	4903      	ldr	r1, [pc, #12]	@ (8002748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40021000 	.word	0x40021000
 8002748:	08004204 	.word	0x08004204

0800274c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002750:	f7ff ffde 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 8002754:	4602      	mov	r2, r0
 8002756:	4b05      	ldr	r3, [pc, #20]	@ (800276c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	0adb      	lsrs	r3, r3, #11
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	4903      	ldr	r1, [pc, #12]	@ (8002770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002762:	5ccb      	ldrb	r3, [r1, r3]
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002768:	4618      	mov	r0, r3
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	08004204 	.word	0x08004204

08002774 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800277c:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <RCC_Delay+0x34>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0a      	ldr	r2, [pc, #40]	@ (80027ac <RCC_Delay+0x38>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	0a5b      	lsrs	r3, r3, #9
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002790:	bf00      	nop
  }
  while (Delay --);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1e5a      	subs	r2, r3, #1
 8002796:	60fa      	str	r2, [r7, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f9      	bne.n	8002790 <RCC_Delay+0x1c>
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	20000000 	.word	0x20000000
 80027ac:	10624dd3 	.word	0x10624dd3

080027b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e041      	b.n	8002846 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fe f850 	bl	800087c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3304      	adds	r3, #4
 80027ec:	4619      	mov	r1, r3
 80027ee:	4610      	mov	r0, r2
 80027f0:	f000 f994 	bl	8002b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d001      	beq.n	8002868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e03a      	b.n	80028de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a18      	ldr	r2, [pc, #96]	@ (80028e8 <HAL_TIM_Base_Start_IT+0x98>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00e      	beq.n	80028a8 <HAL_TIM_Base_Start_IT+0x58>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002892:	d009      	beq.n	80028a8 <HAL_TIM_Base_Start_IT+0x58>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a14      	ldr	r2, [pc, #80]	@ (80028ec <HAL_TIM_Base_Start_IT+0x9c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d004      	beq.n	80028a8 <HAL_TIM_Base_Start_IT+0x58>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a13      	ldr	r2, [pc, #76]	@ (80028f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d111      	bne.n	80028cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d010      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ca:	e007      	b.n	80028dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr
 80028e8:	40012c00 	.word	0x40012c00
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40000800 	.word	0x40000800

080028f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d020      	beq.n	8002958 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01b      	beq.n	8002958 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0202 	mvn.w	r2, #2
 8002928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f8d1 	bl	8002ae6 <HAL_TIM_IC_CaptureCallback>
 8002944:	e005      	b.n	8002952 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f8c4 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f8d3 	bl	8002af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d020      	beq.n	80029a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01b      	beq.n	80029a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0204 	mvn.w	r2, #4
 8002974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8ab 	bl	8002ae6 <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f89e 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f8ad 	bl	8002af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d020      	beq.n	80029f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01b      	beq.n	80029f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0208 	mvn.w	r2, #8
 80029c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2204      	movs	r2, #4
 80029c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f885 	bl	8002ae6 <HAL_TIM_IC_CaptureCallback>
 80029dc:	e005      	b.n	80029ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f878 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f887 	bl	8002af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d020      	beq.n	8002a3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01b      	beq.n	8002a3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0210 	mvn.w	r2, #16
 8002a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2208      	movs	r2, #8
 8002a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f85f 	bl	8002ae6 <HAL_TIM_IC_CaptureCallback>
 8002a28:	e005      	b.n	8002a36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f852 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f861 	bl	8002af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00c      	beq.n	8002a60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0201 	mvn.w	r2, #1
 8002a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fd fd8e 	bl	800057c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00c      	beq.n	8002a84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8c3 	bl	8002c0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00c      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d007      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f831 	bl	8002b0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00c      	beq.n	8002acc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0220 	mvn.w	r2, #32
 8002ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f896 	bl	8002bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a2f      	ldr	r2, [pc, #188]	@ (8002bec <TIM_Base_SetConfig+0xd0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00b      	beq.n	8002b4c <TIM_Base_SetConfig+0x30>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b3a:	d007      	beq.n	8002b4c <TIM_Base_SetConfig+0x30>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8002bf0 <TIM_Base_SetConfig+0xd4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d003      	beq.n	8002b4c <TIM_Base_SetConfig+0x30>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a2b      	ldr	r2, [pc, #172]	@ (8002bf4 <TIM_Base_SetConfig+0xd8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d108      	bne.n	8002b5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a22      	ldr	r2, [pc, #136]	@ (8002bec <TIM_Base_SetConfig+0xd0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00b      	beq.n	8002b7e <TIM_Base_SetConfig+0x62>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b6c:	d007      	beq.n	8002b7e <TIM_Base_SetConfig+0x62>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf0 <TIM_Base_SetConfig+0xd4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d003      	beq.n	8002b7e <TIM_Base_SetConfig+0x62>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf4 <TIM_Base_SetConfig+0xd8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d108      	bne.n	8002b90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8002bec <TIM_Base_SetConfig+0xd0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d103      	bne.n	8002bc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f023 0201 	bic.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	611a      	str	r2, [r3, #16]
  }
}
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40000800 	.word	0x40000800

08002bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e042      	b.n	8002cb4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fd fdca 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2224      	movs	r2, #36	@ 0x24
 8002c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fd63 	bl	800372c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	@ 0x28
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d175      	bne.n	8002dc8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_UART_Transmit+0x2c>
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e06e      	b.n	8002dca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2221      	movs	r2, #33	@ 0x21
 8002cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cfa:	f7fd ff8f 	bl	8000c1c <HAL_GetTick>
 8002cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	88fa      	ldrh	r2, [r7, #6]
 8002d04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	88fa      	ldrh	r2, [r7, #6]
 8002d0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d14:	d108      	bne.n	8002d28 <HAL_UART_Transmit+0x6c>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d104      	bne.n	8002d28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	61bb      	str	r3, [r7, #24]
 8002d26:	e003      	b.n	8002d30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d30:	e02e      	b.n	8002d90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2180      	movs	r1, #128	@ 0x80
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 fb01 	bl	8003344 <UART_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e03a      	b.n	8002dca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10b      	bne.n	8002d72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	e007      	b.n	8002d82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	781a      	ldrb	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1cb      	bne.n	8002d32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2200      	movs	r2, #0
 8002da2:	2140      	movs	r1, #64	@ 0x40
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 facd 	bl	8003344 <UART_WaitOnFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e006      	b.n	8002dca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b0ba      	sub	sp, #232	@ 0xe8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10f      	bne.n	8002e3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d009      	beq.n	8002e3a <HAL_UART_IRQHandler+0x66>
 8002e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fbbc 	bl	80035b0 <UART_Receive_IT>
      return;
 8002e38:	e25b      	b.n	80032f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80de 	beq.w	8003000 <HAL_UART_IRQHandler+0x22c>
 8002e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d106      	bne.n	8002e5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e54:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80d1 	beq.w	8003000 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00b      	beq.n	8002e82 <HAL_UART_IRQHandler+0xae>
 8002e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	f043 0201 	orr.w	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_UART_IRQHandler+0xd2>
 8002e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	f043 0202 	orr.w	r2, r3, #2
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <HAL_UART_IRQHandler+0xf6>
 8002eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec2:	f043 0204 	orr.w	r2, r3, #4
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d011      	beq.n	8002efa <HAL_UART_IRQHandler+0x126>
 8002ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef2:	f043 0208 	orr.w	r2, r3, #8
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 81f2 	beq.w	80032e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_UART_IRQHandler+0x14e>
 8002f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fb47 	bl	80035b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf14      	ite	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	2300      	moveq	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d103      	bne.n	8002f4e <HAL_UART_IRQHandler+0x17a>
 8002f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d04f      	beq.n	8002fee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fa51 	bl	80033f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d041      	beq.n	8002fe6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3314      	adds	r3, #20
 8002f68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f70:	e853 3f00 	ldrex	r3, [r3]
 8002f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3314      	adds	r3, #20
 8002f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1d9      	bne.n	8002f62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d013      	beq.n	8002fde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fba:	4a7e      	ldr	r2, [pc, #504]	@ (80031b4 <HAL_UART_IRQHandler+0x3e0>)
 8002fbc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe fdce 	bl	8001b64 <HAL_DMA_Abort_IT>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d016      	beq.n	8002ffc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fdc:	e00e      	b.n	8002ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f99c 	bl	800331c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe4:	e00a      	b.n	8002ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f998 	bl	800331c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fec:	e006      	b.n	8002ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f994 	bl	800331c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002ffa:	e175      	b.n	80032e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffc:	bf00      	nop
    return;
 8002ffe:	e173      	b.n	80032e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	2b01      	cmp	r3, #1
 8003006:	f040 814f 	bne.w	80032a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800300a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8148 	beq.w	80032a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 8141 	beq.w	80032a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 80b6 	beq.w	80031b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003058:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8145 	beq.w	80032ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800306a:	429a      	cmp	r2, r3
 800306c:	f080 813e 	bcs.w	80032ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003076:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b20      	cmp	r3, #32
 8003080:	f000 8088 	beq.w	8003194 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	330c      	adds	r3, #12
 800308a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003092:	e853 3f00 	ldrex	r3, [r3]
 8003096:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800309a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800309e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	330c      	adds	r3, #12
 80030ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80030b0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030c0:	e841 2300 	strex	r3, r2, [r1]
 80030c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1d9      	bne.n	8003084 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3314      	adds	r3, #20
 80030d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030da:	e853 3f00 	ldrex	r3, [r3]
 80030de:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80030e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3314      	adds	r3, #20
 80030f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030f4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80030f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80030fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003100:	e841 2300 	strex	r3, r2, [r1]
 8003104:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003106:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e1      	bne.n	80030d0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3314      	adds	r3, #20
 8003112:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003114:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003116:	e853 3f00 	ldrex	r3, [r3]
 800311a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800311c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800311e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003122:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3314      	adds	r3, #20
 800312c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003130:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003132:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003134:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003136:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003138:	e841 2300 	strex	r3, r2, [r1]
 800313c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800313e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1e3      	bne.n	800310c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	330c      	adds	r3, #12
 8003158:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800315c:	e853 3f00 	ldrex	r3, [r3]
 8003160:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003164:	f023 0310 	bic.w	r3, r3, #16
 8003168:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	330c      	adds	r3, #12
 8003172:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003176:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003178:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800317c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800317e:	e841 2300 	strex	r3, r2, [r1]
 8003182:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1e3      	bne.n	8003152 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe fcad 	bl	8001aee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	4619      	mov	r1, r3
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f8bf 	bl	800332e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031b0:	e09c      	b.n	80032ec <HAL_UART_IRQHandler+0x518>
 80031b2:	bf00      	nop
 80031b4:	080034bb 	.word	0x080034bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 808e 	beq.w	80032f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80031d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8089 	beq.w	80032f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	330c      	adds	r3, #12
 80031e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e8:	e853 3f00 	ldrex	r3, [r3]
 80031ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	330c      	adds	r3, #12
 80031fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003202:	647a      	str	r2, [r7, #68]	@ 0x44
 8003204:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003206:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003208:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800320a:	e841 2300 	strex	r3, r2, [r1]
 800320e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1e3      	bne.n	80031de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	3314      	adds	r3, #20
 800321c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	e853 3f00 	ldrex	r3, [r3]
 8003224:	623b      	str	r3, [r7, #32]
   return(result);
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3314      	adds	r3, #20
 8003236:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800323a:	633a      	str	r2, [r7, #48]	@ 0x30
 800323c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003242:	e841 2300 	strex	r3, r2, [r1]
 8003246:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1e3      	bne.n	8003216 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	330c      	adds	r3, #12
 8003262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	e853 3f00 	ldrex	r3, [r3]
 800326a:	60fb      	str	r3, [r7, #12]
   return(result);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0310 	bic.w	r3, r3, #16
 8003272:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	330c      	adds	r3, #12
 800327c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003280:	61fa      	str	r2, [r7, #28]
 8003282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003284:	69b9      	ldr	r1, [r7, #24]
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	e841 2300 	strex	r3, r2, [r1]
 800328c:	617b      	str	r3, [r7, #20]
   return(result);
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1e3      	bne.n	800325c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800329a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800329e:	4619      	mov	r1, r3
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f844 	bl	800332e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032a6:	e023      	b.n	80032f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d009      	beq.n	80032c8 <HAL_UART_IRQHandler+0x4f4>
 80032b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f90e 	bl	80034e2 <UART_Transmit_IT>
    return;
 80032c6:	e014      	b.n	80032f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00e      	beq.n	80032f2 <HAL_UART_IRQHandler+0x51e>
 80032d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f94d 	bl	8003580 <UART_EndTransmit_IT>
    return;
 80032e6:	e004      	b.n	80032f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80032e8:	bf00      	nop
 80032ea:	e002      	b.n	80032f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80032ec:	bf00      	nop
 80032ee:	e000      	b.n	80032f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80032f0:	bf00      	nop
  }
}
 80032f2:	37e8      	adds	r7, #232	@ 0xe8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	460b      	mov	r3, r1
 8003338:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003354:	e03b      	b.n	80033ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d037      	beq.n	80033ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335e:	f7fd fc5d 	bl	8000c1c <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	6a3a      	ldr	r2, [r7, #32]
 800336a:	429a      	cmp	r2, r3
 800336c:	d302      	bcc.n	8003374 <UART_WaitOnFlagUntilTimeout+0x30>
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e03a      	b.n	80033ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d023      	beq.n	80033ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b80      	cmp	r3, #128	@ 0x80
 800338a:	d020      	beq.n	80033ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b40      	cmp	r3, #64	@ 0x40
 8003390:	d01d      	beq.n	80033ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b08      	cmp	r3, #8
 800339e:	d116      	bne.n	80033ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f81d 	bl	80033f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2208      	movs	r2, #8
 80033c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e00f      	b.n	80033ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4013      	ands	r3, r2
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	429a      	cmp	r2, r3
 80033dc:	bf0c      	ite	eq
 80033de:	2301      	moveq	r3, #1
 80033e0:	2300      	movne	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d0b4      	beq.n	8003356 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b095      	sub	sp, #84	@ 0x54
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	330c      	adds	r3, #12
 8003404:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003408:	e853 3f00 	ldrex	r3, [r3]
 800340c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800340e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003410:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003414:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	330c      	adds	r3, #12
 800341c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800341e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003420:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003422:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003424:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003426:	e841 2300 	strex	r3, r2, [r1]
 800342a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800342c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e5      	bne.n	80033fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3314      	adds	r3, #20
 8003438:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	e853 3f00 	ldrex	r3, [r3]
 8003440:	61fb      	str	r3, [r7, #28]
   return(result);
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	64bb      	str	r3, [r7, #72]	@ 0x48
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3314      	adds	r3, #20
 8003450:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003452:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003454:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003458:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800345a:	e841 2300 	strex	r3, r2, [r1]
 800345e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1e5      	bne.n	8003432 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346a:	2b01      	cmp	r3, #1
 800346c:	d119      	bne.n	80034a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	330c      	adds	r3, #12
 8003474:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	60bb      	str	r3, [r7, #8]
   return(result);
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f023 0310 	bic.w	r3, r3, #16
 8003484:	647b      	str	r3, [r7, #68]	@ 0x44
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	330c      	adds	r3, #12
 800348c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800348e:	61ba      	str	r2, [r7, #24]
 8003490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	6979      	ldr	r1, [r7, #20]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	613b      	str	r3, [r7, #16]
   return(result);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e5      	bne.n	800346e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034b0:	bf00      	nop
 80034b2:	3754      	adds	r7, #84	@ 0x54
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff ff21 	bl	800331c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034da:	bf00      	nop
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b21      	cmp	r3, #33	@ 0x21
 80034f4:	d13e      	bne.n	8003574 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034fe:	d114      	bne.n	800352a <UART_Transmit_IT+0x48>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d110      	bne.n	800352a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800351c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	1c9a      	adds	r2, r3, #2
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	621a      	str	r2, [r3, #32]
 8003528:	e008      	b.n	800353c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	1c59      	adds	r1, r3, #1
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6211      	str	r1, [r2, #32]
 8003534:	781a      	ldrb	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29b      	uxth	r3, r3
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4619      	mov	r1, r3
 800354a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10f      	bne.n	8003570 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800355e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800356e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003596:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff fea9 	bl	80032f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08c      	sub	sp, #48	@ 0x30
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b22      	cmp	r3, #34	@ 0x22
 80035c2:	f040 80ae 	bne.w	8003722 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ce:	d117      	bne.n	8003600 <UART_Receive_IT+0x50>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d113      	bne.n	8003600 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f8:	1c9a      	adds	r2, r3, #2
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80035fe:	e026      	b.n	800364e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003604:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003606:	2300      	movs	r3, #0
 8003608:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003612:	d007      	beq.n	8003624 <UART_Receive_IT+0x74>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <UART_Receive_IT+0x82>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d106      	bne.n	8003632 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362e:	701a      	strb	r2, [r3, #0]
 8003630:	e008      	b.n	8003644 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800363e:	b2da      	uxtb	r2, r3
 8003640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003642:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29b      	uxth	r3, r3
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	4619      	mov	r1, r3
 800365c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800365e:	2b00      	cmp	r3, #0
 8003660:	d15d      	bne.n	800371e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0220 	bic.w	r2, r2, #32
 8003670:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003680:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d135      	bne.n	8003714 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	330c      	adds	r3, #12
 80036b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	613b      	str	r3, [r7, #16]
   return(result);
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f023 0310 	bic.w	r3, r3, #16
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ce:	623a      	str	r2, [r7, #32]
 80036d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	69f9      	ldr	r1, [r7, #28]
 80036d4:	6a3a      	ldr	r2, [r7, #32]
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	61bb      	str	r3, [r7, #24]
   return(result);
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e5      	bne.n	80036ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b10      	cmp	r3, #16
 80036ee:	d10a      	bne.n	8003706 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800370a:	4619      	mov	r1, r3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff fe0e 	bl	800332e <HAL_UARTEx_RxEventCallback>
 8003712:	e002      	b.n	800371a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff fdf8 	bl	800330a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	e002      	b.n	8003724 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	e000      	b.n	8003724 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003722:	2302      	movs	r3, #2
  }
}
 8003724:	4618      	mov	r0, r3
 8003726:	3730      	adds	r7, #48	@ 0x30
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003766:	f023 030c 	bic.w	r3, r3, #12
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	430b      	orrs	r3, r1
 8003772:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699a      	ldr	r2, [r3, #24]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a2c      	ldr	r2, [pc, #176]	@ (8003840 <UART_SetConfig+0x114>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d103      	bne.n	800379c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003794:	f7fe ffda 	bl	800274c <HAL_RCC_GetPCLK2Freq>
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	e002      	b.n	80037a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800379c:	f7fe ffc2 	bl	8002724 <HAL_RCC_GetPCLK1Freq>
 80037a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	009a      	lsls	r2, r3, #2
 80037ac:	441a      	add	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b8:	4a22      	ldr	r2, [pc, #136]	@ (8003844 <UART_SetConfig+0x118>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	0119      	lsls	r1, r3, #4
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	009a      	lsls	r2, r3, #2
 80037cc:	441a      	add	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003844 <UART_SetConfig+0x118>)
 80037da:	fba3 0302 	umull	r0, r3, r3, r2
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	2064      	movs	r0, #100	@ 0x64
 80037e2:	fb00 f303 	mul.w	r3, r0, r3
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	3332      	adds	r3, #50	@ 0x32
 80037ec:	4a15      	ldr	r2, [pc, #84]	@ (8003844 <UART_SetConfig+0x118>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037f8:	4419      	add	r1, r3
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	009a      	lsls	r2, r3, #2
 8003804:	441a      	add	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003810:	4b0c      	ldr	r3, [pc, #48]	@ (8003844 <UART_SetConfig+0x118>)
 8003812:	fba3 0302 	umull	r0, r3, r3, r2
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	2064      	movs	r0, #100	@ 0x64
 800381a:	fb00 f303 	mul.w	r3, r0, r3
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	3332      	adds	r3, #50	@ 0x32
 8003824:	4a07      	ldr	r2, [pc, #28]	@ (8003844 <UART_SetConfig+0x118>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	f003 020f 	and.w	r2, r3, #15
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	440a      	add	r2, r1
 8003836:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003838:	bf00      	nop
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40013800 	.word	0x40013800
 8003844:	51eb851f 	.word	0x51eb851f

08003848 <std>:
 8003848:	2300      	movs	r3, #0
 800384a:	b510      	push	{r4, lr}
 800384c:	4604      	mov	r4, r0
 800384e:	e9c0 3300 	strd	r3, r3, [r0]
 8003852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003856:	6083      	str	r3, [r0, #8]
 8003858:	8181      	strh	r1, [r0, #12]
 800385a:	6643      	str	r3, [r0, #100]	@ 0x64
 800385c:	81c2      	strh	r2, [r0, #14]
 800385e:	6183      	str	r3, [r0, #24]
 8003860:	4619      	mov	r1, r3
 8003862:	2208      	movs	r2, #8
 8003864:	305c      	adds	r0, #92	@ 0x5c
 8003866:	f000 f9e7 	bl	8003c38 <memset>
 800386a:	4b0d      	ldr	r3, [pc, #52]	@ (80038a0 <std+0x58>)
 800386c:	6224      	str	r4, [r4, #32]
 800386e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003870:	4b0c      	ldr	r3, [pc, #48]	@ (80038a4 <std+0x5c>)
 8003872:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003874:	4b0c      	ldr	r3, [pc, #48]	@ (80038a8 <std+0x60>)
 8003876:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003878:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <std+0x64>)
 800387a:	6323      	str	r3, [r4, #48]	@ 0x30
 800387c:	4b0c      	ldr	r3, [pc, #48]	@ (80038b0 <std+0x68>)
 800387e:	429c      	cmp	r4, r3
 8003880:	d006      	beq.n	8003890 <std+0x48>
 8003882:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003886:	4294      	cmp	r4, r2
 8003888:	d002      	beq.n	8003890 <std+0x48>
 800388a:	33d0      	adds	r3, #208	@ 0xd0
 800388c:	429c      	cmp	r4, r3
 800388e:	d105      	bne.n	800389c <std+0x54>
 8003890:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003898:	f000 ba46 	b.w	8003d28 <__retarget_lock_init_recursive>
 800389c:	bd10      	pop	{r4, pc}
 800389e:	bf00      	nop
 80038a0:	08003a89 	.word	0x08003a89
 80038a4:	08003aab 	.word	0x08003aab
 80038a8:	08003ae3 	.word	0x08003ae3
 80038ac:	08003b07 	.word	0x08003b07
 80038b0:	20000218 	.word	0x20000218

080038b4 <stdio_exit_handler>:
 80038b4:	4a02      	ldr	r2, [pc, #8]	@ (80038c0 <stdio_exit_handler+0xc>)
 80038b6:	4903      	ldr	r1, [pc, #12]	@ (80038c4 <stdio_exit_handler+0x10>)
 80038b8:	4803      	ldr	r0, [pc, #12]	@ (80038c8 <stdio_exit_handler+0x14>)
 80038ba:	f000 b869 	b.w	8003990 <_fwalk_sglue>
 80038be:	bf00      	nop
 80038c0:	2000000c 	.word	0x2000000c
 80038c4:	08004039 	.word	0x08004039
 80038c8:	2000001c 	.word	0x2000001c

080038cc <cleanup_stdio>:
 80038cc:	6841      	ldr	r1, [r0, #4]
 80038ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003900 <cleanup_stdio+0x34>)
 80038d0:	b510      	push	{r4, lr}
 80038d2:	4299      	cmp	r1, r3
 80038d4:	4604      	mov	r4, r0
 80038d6:	d001      	beq.n	80038dc <cleanup_stdio+0x10>
 80038d8:	f000 fbae 	bl	8004038 <_fflush_r>
 80038dc:	68a1      	ldr	r1, [r4, #8]
 80038de:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <cleanup_stdio+0x38>)
 80038e0:	4299      	cmp	r1, r3
 80038e2:	d002      	beq.n	80038ea <cleanup_stdio+0x1e>
 80038e4:	4620      	mov	r0, r4
 80038e6:	f000 fba7 	bl	8004038 <_fflush_r>
 80038ea:	68e1      	ldr	r1, [r4, #12]
 80038ec:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <cleanup_stdio+0x3c>)
 80038ee:	4299      	cmp	r1, r3
 80038f0:	d004      	beq.n	80038fc <cleanup_stdio+0x30>
 80038f2:	4620      	mov	r0, r4
 80038f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038f8:	f000 bb9e 	b.w	8004038 <_fflush_r>
 80038fc:	bd10      	pop	{r4, pc}
 80038fe:	bf00      	nop
 8003900:	20000218 	.word	0x20000218
 8003904:	20000280 	.word	0x20000280
 8003908:	200002e8 	.word	0x200002e8

0800390c <global_stdio_init.part.0>:
 800390c:	b510      	push	{r4, lr}
 800390e:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <global_stdio_init.part.0+0x30>)
 8003910:	4c0b      	ldr	r4, [pc, #44]	@ (8003940 <global_stdio_init.part.0+0x34>)
 8003912:	4a0c      	ldr	r2, [pc, #48]	@ (8003944 <global_stdio_init.part.0+0x38>)
 8003914:	4620      	mov	r0, r4
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	2104      	movs	r1, #4
 800391a:	2200      	movs	r2, #0
 800391c:	f7ff ff94 	bl	8003848 <std>
 8003920:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003924:	2201      	movs	r2, #1
 8003926:	2109      	movs	r1, #9
 8003928:	f7ff ff8e 	bl	8003848 <std>
 800392c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003930:	2202      	movs	r2, #2
 8003932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003936:	2112      	movs	r1, #18
 8003938:	f7ff bf86 	b.w	8003848 <std>
 800393c:	20000350 	.word	0x20000350
 8003940:	20000218 	.word	0x20000218
 8003944:	080038b5 	.word	0x080038b5

08003948 <__sfp_lock_acquire>:
 8003948:	4801      	ldr	r0, [pc, #4]	@ (8003950 <__sfp_lock_acquire+0x8>)
 800394a:	f000 b9ee 	b.w	8003d2a <__retarget_lock_acquire_recursive>
 800394e:	bf00      	nop
 8003950:	20000359 	.word	0x20000359

08003954 <__sfp_lock_release>:
 8003954:	4801      	ldr	r0, [pc, #4]	@ (800395c <__sfp_lock_release+0x8>)
 8003956:	f000 b9e9 	b.w	8003d2c <__retarget_lock_release_recursive>
 800395a:	bf00      	nop
 800395c:	20000359 	.word	0x20000359

08003960 <__sinit>:
 8003960:	b510      	push	{r4, lr}
 8003962:	4604      	mov	r4, r0
 8003964:	f7ff fff0 	bl	8003948 <__sfp_lock_acquire>
 8003968:	6a23      	ldr	r3, [r4, #32]
 800396a:	b11b      	cbz	r3, 8003974 <__sinit+0x14>
 800396c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003970:	f7ff bff0 	b.w	8003954 <__sfp_lock_release>
 8003974:	4b04      	ldr	r3, [pc, #16]	@ (8003988 <__sinit+0x28>)
 8003976:	6223      	str	r3, [r4, #32]
 8003978:	4b04      	ldr	r3, [pc, #16]	@ (800398c <__sinit+0x2c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f5      	bne.n	800396c <__sinit+0xc>
 8003980:	f7ff ffc4 	bl	800390c <global_stdio_init.part.0>
 8003984:	e7f2      	b.n	800396c <__sinit+0xc>
 8003986:	bf00      	nop
 8003988:	080038cd 	.word	0x080038cd
 800398c:	20000350 	.word	0x20000350

08003990 <_fwalk_sglue>:
 8003990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003994:	4607      	mov	r7, r0
 8003996:	4688      	mov	r8, r1
 8003998:	4614      	mov	r4, r2
 800399a:	2600      	movs	r6, #0
 800399c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039a0:	f1b9 0901 	subs.w	r9, r9, #1
 80039a4:	d505      	bpl.n	80039b2 <_fwalk_sglue+0x22>
 80039a6:	6824      	ldr	r4, [r4, #0]
 80039a8:	2c00      	cmp	r4, #0
 80039aa:	d1f7      	bne.n	800399c <_fwalk_sglue+0xc>
 80039ac:	4630      	mov	r0, r6
 80039ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039b2:	89ab      	ldrh	r3, [r5, #12]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d907      	bls.n	80039c8 <_fwalk_sglue+0x38>
 80039b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039bc:	3301      	adds	r3, #1
 80039be:	d003      	beq.n	80039c8 <_fwalk_sglue+0x38>
 80039c0:	4629      	mov	r1, r5
 80039c2:	4638      	mov	r0, r7
 80039c4:	47c0      	blx	r8
 80039c6:	4306      	orrs	r6, r0
 80039c8:	3568      	adds	r5, #104	@ 0x68
 80039ca:	e7e9      	b.n	80039a0 <_fwalk_sglue+0x10>

080039cc <_puts_r>:
 80039cc:	6a03      	ldr	r3, [r0, #32]
 80039ce:	b570      	push	{r4, r5, r6, lr}
 80039d0:	4605      	mov	r5, r0
 80039d2:	460e      	mov	r6, r1
 80039d4:	6884      	ldr	r4, [r0, #8]
 80039d6:	b90b      	cbnz	r3, 80039dc <_puts_r+0x10>
 80039d8:	f7ff ffc2 	bl	8003960 <__sinit>
 80039dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039de:	07db      	lsls	r3, r3, #31
 80039e0:	d405      	bmi.n	80039ee <_puts_r+0x22>
 80039e2:	89a3      	ldrh	r3, [r4, #12]
 80039e4:	0598      	lsls	r0, r3, #22
 80039e6:	d402      	bmi.n	80039ee <_puts_r+0x22>
 80039e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039ea:	f000 f99e 	bl	8003d2a <__retarget_lock_acquire_recursive>
 80039ee:	89a3      	ldrh	r3, [r4, #12]
 80039f0:	0719      	lsls	r1, r3, #28
 80039f2:	d502      	bpl.n	80039fa <_puts_r+0x2e>
 80039f4:	6923      	ldr	r3, [r4, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d135      	bne.n	8003a66 <_puts_r+0x9a>
 80039fa:	4621      	mov	r1, r4
 80039fc:	4628      	mov	r0, r5
 80039fe:	f000 f8c5 	bl	8003b8c <__swsetup_r>
 8003a02:	b380      	cbz	r0, 8003a66 <_puts_r+0x9a>
 8003a04:	f04f 35ff 	mov.w	r5, #4294967295
 8003a08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a0a:	07da      	lsls	r2, r3, #31
 8003a0c:	d405      	bmi.n	8003a1a <_puts_r+0x4e>
 8003a0e:	89a3      	ldrh	r3, [r4, #12]
 8003a10:	059b      	lsls	r3, r3, #22
 8003a12:	d402      	bmi.n	8003a1a <_puts_r+0x4e>
 8003a14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a16:	f000 f989 	bl	8003d2c <__retarget_lock_release_recursive>
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	bd70      	pop	{r4, r5, r6, pc}
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	da04      	bge.n	8003a2c <_puts_r+0x60>
 8003a22:	69a2      	ldr	r2, [r4, #24]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	dc17      	bgt.n	8003a58 <_puts_r+0x8c>
 8003a28:	290a      	cmp	r1, #10
 8003a2a:	d015      	beq.n	8003a58 <_puts_r+0x8c>
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	6022      	str	r2, [r4, #0]
 8003a32:	7019      	strb	r1, [r3, #0]
 8003a34:	68a3      	ldr	r3, [r4, #8]
 8003a36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	60a3      	str	r3, [r4, #8]
 8003a3e:	2900      	cmp	r1, #0
 8003a40:	d1ed      	bne.n	8003a1e <_puts_r+0x52>
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	da11      	bge.n	8003a6a <_puts_r+0x9e>
 8003a46:	4622      	mov	r2, r4
 8003a48:	210a      	movs	r1, #10
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	f000 f85f 	bl	8003b0e <__swbuf_r>
 8003a50:	3001      	adds	r0, #1
 8003a52:	d0d7      	beq.n	8003a04 <_puts_r+0x38>
 8003a54:	250a      	movs	r5, #10
 8003a56:	e7d7      	b.n	8003a08 <_puts_r+0x3c>
 8003a58:	4622      	mov	r2, r4
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	f000 f857 	bl	8003b0e <__swbuf_r>
 8003a60:	3001      	adds	r0, #1
 8003a62:	d1e7      	bne.n	8003a34 <_puts_r+0x68>
 8003a64:	e7ce      	b.n	8003a04 <_puts_r+0x38>
 8003a66:	3e01      	subs	r6, #1
 8003a68:	e7e4      	b.n	8003a34 <_puts_r+0x68>
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	6022      	str	r2, [r4, #0]
 8003a70:	220a      	movs	r2, #10
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	e7ee      	b.n	8003a54 <_puts_r+0x88>
	...

08003a78 <puts>:
 8003a78:	4b02      	ldr	r3, [pc, #8]	@ (8003a84 <puts+0xc>)
 8003a7a:	4601      	mov	r1, r0
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	f7ff bfa5 	b.w	80039cc <_puts_r>
 8003a82:	bf00      	nop
 8003a84:	20000018 	.word	0x20000018

08003a88 <__sread>:
 8003a88:	b510      	push	{r4, lr}
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a90:	f000 f8fc 	bl	8003c8c <_read_r>
 8003a94:	2800      	cmp	r0, #0
 8003a96:	bfab      	itete	ge
 8003a98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8003a9c:	181b      	addge	r3, r3, r0
 8003a9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003aa2:	bfac      	ite	ge
 8003aa4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003aa6:	81a3      	strhlt	r3, [r4, #12]
 8003aa8:	bd10      	pop	{r4, pc}

08003aaa <__swrite>:
 8003aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aae:	461f      	mov	r7, r3
 8003ab0:	898b      	ldrh	r3, [r1, #12]
 8003ab2:	4605      	mov	r5, r0
 8003ab4:	05db      	lsls	r3, r3, #23
 8003ab6:	460c      	mov	r4, r1
 8003ab8:	4616      	mov	r6, r2
 8003aba:	d505      	bpl.n	8003ac8 <__swrite+0x1e>
 8003abc:	2302      	movs	r3, #2
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac4:	f000 f8d0 	bl	8003c68 <_lseek_r>
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	4632      	mov	r2, r6
 8003acc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ad0:	81a3      	strh	r3, [r4, #12]
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	463b      	mov	r3, r7
 8003ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ade:	f000 b8e7 	b.w	8003cb0 <_write_r>

08003ae2 <__sseek>:
 8003ae2:	b510      	push	{r4, lr}
 8003ae4:	460c      	mov	r4, r1
 8003ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aea:	f000 f8bd 	bl	8003c68 <_lseek_r>
 8003aee:	1c43      	adds	r3, r0, #1
 8003af0:	89a3      	ldrh	r3, [r4, #12]
 8003af2:	bf15      	itete	ne
 8003af4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003af6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003afa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003afe:	81a3      	strheq	r3, [r4, #12]
 8003b00:	bf18      	it	ne
 8003b02:	81a3      	strhne	r3, [r4, #12]
 8003b04:	bd10      	pop	{r4, pc}

08003b06 <__sclose>:
 8003b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b0a:	f000 b89d 	b.w	8003c48 <_close_r>

08003b0e <__swbuf_r>:
 8003b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b10:	460e      	mov	r6, r1
 8003b12:	4614      	mov	r4, r2
 8003b14:	4605      	mov	r5, r0
 8003b16:	b118      	cbz	r0, 8003b20 <__swbuf_r+0x12>
 8003b18:	6a03      	ldr	r3, [r0, #32]
 8003b1a:	b90b      	cbnz	r3, 8003b20 <__swbuf_r+0x12>
 8003b1c:	f7ff ff20 	bl	8003960 <__sinit>
 8003b20:	69a3      	ldr	r3, [r4, #24]
 8003b22:	60a3      	str	r3, [r4, #8]
 8003b24:	89a3      	ldrh	r3, [r4, #12]
 8003b26:	071a      	lsls	r2, r3, #28
 8003b28:	d501      	bpl.n	8003b2e <__swbuf_r+0x20>
 8003b2a:	6923      	ldr	r3, [r4, #16]
 8003b2c:	b943      	cbnz	r3, 8003b40 <__swbuf_r+0x32>
 8003b2e:	4621      	mov	r1, r4
 8003b30:	4628      	mov	r0, r5
 8003b32:	f000 f82b 	bl	8003b8c <__swsetup_r>
 8003b36:	b118      	cbz	r0, 8003b40 <__swbuf_r+0x32>
 8003b38:	f04f 37ff 	mov.w	r7, #4294967295
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	6922      	ldr	r2, [r4, #16]
 8003b44:	b2f6      	uxtb	r6, r6
 8003b46:	1a98      	subs	r0, r3, r2
 8003b48:	6963      	ldr	r3, [r4, #20]
 8003b4a:	4637      	mov	r7, r6
 8003b4c:	4283      	cmp	r3, r0
 8003b4e:	dc05      	bgt.n	8003b5c <__swbuf_r+0x4e>
 8003b50:	4621      	mov	r1, r4
 8003b52:	4628      	mov	r0, r5
 8003b54:	f000 fa70 	bl	8004038 <_fflush_r>
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	d1ed      	bne.n	8003b38 <__swbuf_r+0x2a>
 8003b5c:	68a3      	ldr	r3, [r4, #8]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	60a3      	str	r3, [r4, #8]
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	6022      	str	r2, [r4, #0]
 8003b68:	701e      	strb	r6, [r3, #0]
 8003b6a:	6962      	ldr	r2, [r4, #20]
 8003b6c:	1c43      	adds	r3, r0, #1
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d004      	beq.n	8003b7c <__swbuf_r+0x6e>
 8003b72:	89a3      	ldrh	r3, [r4, #12]
 8003b74:	07db      	lsls	r3, r3, #31
 8003b76:	d5e1      	bpl.n	8003b3c <__swbuf_r+0x2e>
 8003b78:	2e0a      	cmp	r6, #10
 8003b7a:	d1df      	bne.n	8003b3c <__swbuf_r+0x2e>
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	4628      	mov	r0, r5
 8003b80:	f000 fa5a 	bl	8004038 <_fflush_r>
 8003b84:	2800      	cmp	r0, #0
 8003b86:	d0d9      	beq.n	8003b3c <__swbuf_r+0x2e>
 8003b88:	e7d6      	b.n	8003b38 <__swbuf_r+0x2a>
	...

08003b8c <__swsetup_r>:
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	4b29      	ldr	r3, [pc, #164]	@ (8003c34 <__swsetup_r+0xa8>)
 8003b90:	4605      	mov	r5, r0
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	460c      	mov	r4, r1
 8003b96:	b118      	cbz	r0, 8003ba0 <__swsetup_r+0x14>
 8003b98:	6a03      	ldr	r3, [r0, #32]
 8003b9a:	b90b      	cbnz	r3, 8003ba0 <__swsetup_r+0x14>
 8003b9c:	f7ff fee0 	bl	8003960 <__sinit>
 8003ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ba4:	0719      	lsls	r1, r3, #28
 8003ba6:	d422      	bmi.n	8003bee <__swsetup_r+0x62>
 8003ba8:	06da      	lsls	r2, r3, #27
 8003baa:	d407      	bmi.n	8003bbc <__swsetup_r+0x30>
 8003bac:	2209      	movs	r2, #9
 8003bae:	602a      	str	r2, [r5, #0]
 8003bb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb8:	81a3      	strh	r3, [r4, #12]
 8003bba:	e033      	b.n	8003c24 <__swsetup_r+0x98>
 8003bbc:	0758      	lsls	r0, r3, #29
 8003bbe:	d512      	bpl.n	8003be6 <__swsetup_r+0x5a>
 8003bc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bc2:	b141      	cbz	r1, 8003bd6 <__swsetup_r+0x4a>
 8003bc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bc8:	4299      	cmp	r1, r3
 8003bca:	d002      	beq.n	8003bd2 <__swsetup_r+0x46>
 8003bcc:	4628      	mov	r0, r5
 8003bce:	f000 f8bd 	bl	8003d4c <_free_r>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bd6:	89a3      	ldrh	r3, [r4, #12]
 8003bd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003bdc:	81a3      	strh	r3, [r4, #12]
 8003bde:	2300      	movs	r3, #0
 8003be0:	6063      	str	r3, [r4, #4]
 8003be2:	6923      	ldr	r3, [r4, #16]
 8003be4:	6023      	str	r3, [r4, #0]
 8003be6:	89a3      	ldrh	r3, [r4, #12]
 8003be8:	f043 0308 	orr.w	r3, r3, #8
 8003bec:	81a3      	strh	r3, [r4, #12]
 8003bee:	6923      	ldr	r3, [r4, #16]
 8003bf0:	b94b      	cbnz	r3, 8003c06 <__swsetup_r+0x7a>
 8003bf2:	89a3      	ldrh	r3, [r4, #12]
 8003bf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bfc:	d003      	beq.n	8003c06 <__swsetup_r+0x7a>
 8003bfe:	4621      	mov	r1, r4
 8003c00:	4628      	mov	r0, r5
 8003c02:	f000 fa66 	bl	80040d2 <__smakebuf_r>
 8003c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c0a:	f013 0201 	ands.w	r2, r3, #1
 8003c0e:	d00a      	beq.n	8003c26 <__swsetup_r+0x9a>
 8003c10:	2200      	movs	r2, #0
 8003c12:	60a2      	str	r2, [r4, #8]
 8003c14:	6962      	ldr	r2, [r4, #20]
 8003c16:	4252      	negs	r2, r2
 8003c18:	61a2      	str	r2, [r4, #24]
 8003c1a:	6922      	ldr	r2, [r4, #16]
 8003c1c:	b942      	cbnz	r2, 8003c30 <__swsetup_r+0xa4>
 8003c1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003c22:	d1c5      	bne.n	8003bb0 <__swsetup_r+0x24>
 8003c24:	bd38      	pop	{r3, r4, r5, pc}
 8003c26:	0799      	lsls	r1, r3, #30
 8003c28:	bf58      	it	pl
 8003c2a:	6962      	ldrpl	r2, [r4, #20]
 8003c2c:	60a2      	str	r2, [r4, #8]
 8003c2e:	e7f4      	b.n	8003c1a <__swsetup_r+0x8e>
 8003c30:	2000      	movs	r0, #0
 8003c32:	e7f7      	b.n	8003c24 <__swsetup_r+0x98>
 8003c34:	20000018 	.word	0x20000018

08003c38 <memset>:
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4402      	add	r2, r0
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d100      	bne.n	8003c42 <memset+0xa>
 8003c40:	4770      	bx	lr
 8003c42:	f803 1b01 	strb.w	r1, [r3], #1
 8003c46:	e7f9      	b.n	8003c3c <memset+0x4>

08003c48 <_close_r>:
 8003c48:	b538      	push	{r3, r4, r5, lr}
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	4d05      	ldr	r5, [pc, #20]	@ (8003c64 <_close_r+0x1c>)
 8003c4e:	4604      	mov	r4, r0
 8003c50:	4608      	mov	r0, r1
 8003c52:	602b      	str	r3, [r5, #0]
 8003c54:	f7fc fef7 	bl	8000a46 <_close>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	d102      	bne.n	8003c62 <_close_r+0x1a>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	b103      	cbz	r3, 8003c62 <_close_r+0x1a>
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	bd38      	pop	{r3, r4, r5, pc}
 8003c64:	20000354 	.word	0x20000354

08003c68 <_lseek_r>:
 8003c68:	b538      	push	{r3, r4, r5, lr}
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	4608      	mov	r0, r1
 8003c6e:	4611      	mov	r1, r2
 8003c70:	2200      	movs	r2, #0
 8003c72:	4d05      	ldr	r5, [pc, #20]	@ (8003c88 <_lseek_r+0x20>)
 8003c74:	602a      	str	r2, [r5, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	f7fc ff09 	bl	8000a8e <_lseek>
 8003c7c:	1c43      	adds	r3, r0, #1
 8003c7e:	d102      	bne.n	8003c86 <_lseek_r+0x1e>
 8003c80:	682b      	ldr	r3, [r5, #0]
 8003c82:	b103      	cbz	r3, 8003c86 <_lseek_r+0x1e>
 8003c84:	6023      	str	r3, [r4, #0]
 8003c86:	bd38      	pop	{r3, r4, r5, pc}
 8003c88:	20000354 	.word	0x20000354

08003c8c <_read_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	4604      	mov	r4, r0
 8003c90:	4608      	mov	r0, r1
 8003c92:	4611      	mov	r1, r2
 8003c94:	2200      	movs	r2, #0
 8003c96:	4d05      	ldr	r5, [pc, #20]	@ (8003cac <_read_r+0x20>)
 8003c98:	602a      	str	r2, [r5, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f7fc fe9a 	bl	80009d4 <_read>
 8003ca0:	1c43      	adds	r3, r0, #1
 8003ca2:	d102      	bne.n	8003caa <_read_r+0x1e>
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	b103      	cbz	r3, 8003caa <_read_r+0x1e>
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	bd38      	pop	{r3, r4, r5, pc}
 8003cac:	20000354 	.word	0x20000354

08003cb0 <_write_r>:
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	4608      	mov	r0, r1
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	2200      	movs	r2, #0
 8003cba:	4d05      	ldr	r5, [pc, #20]	@ (8003cd0 <_write_r+0x20>)
 8003cbc:	602a      	str	r2, [r5, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f7fc fea5 	bl	8000a0e <_write>
 8003cc4:	1c43      	adds	r3, r0, #1
 8003cc6:	d102      	bne.n	8003cce <_write_r+0x1e>
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	b103      	cbz	r3, 8003cce <_write_r+0x1e>
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	bd38      	pop	{r3, r4, r5, pc}
 8003cd0:	20000354 	.word	0x20000354

08003cd4 <__errno>:
 8003cd4:	4b01      	ldr	r3, [pc, #4]	@ (8003cdc <__errno+0x8>)
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000018 	.word	0x20000018

08003ce0 <__libc_init_array>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	2600      	movs	r6, #0
 8003ce4:	4d0c      	ldr	r5, [pc, #48]	@ (8003d18 <__libc_init_array+0x38>)
 8003ce6:	4c0d      	ldr	r4, [pc, #52]	@ (8003d1c <__libc_init_array+0x3c>)
 8003ce8:	1b64      	subs	r4, r4, r5
 8003cea:	10a4      	asrs	r4, r4, #2
 8003cec:	42a6      	cmp	r6, r4
 8003cee:	d109      	bne.n	8003d04 <__libc_init_array+0x24>
 8003cf0:	f000 fa5e 	bl	80041b0 <_init>
 8003cf4:	2600      	movs	r6, #0
 8003cf6:	4d0a      	ldr	r5, [pc, #40]	@ (8003d20 <__libc_init_array+0x40>)
 8003cf8:	4c0a      	ldr	r4, [pc, #40]	@ (8003d24 <__libc_init_array+0x44>)
 8003cfa:	1b64      	subs	r4, r4, r5
 8003cfc:	10a4      	asrs	r4, r4, #2
 8003cfe:	42a6      	cmp	r6, r4
 8003d00:	d105      	bne.n	8003d0e <__libc_init_array+0x2e>
 8003d02:	bd70      	pop	{r4, r5, r6, pc}
 8003d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d08:	4798      	blx	r3
 8003d0a:	3601      	adds	r6, #1
 8003d0c:	e7ee      	b.n	8003cec <__libc_init_array+0xc>
 8003d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d12:	4798      	blx	r3
 8003d14:	3601      	adds	r6, #1
 8003d16:	e7f2      	b.n	8003cfe <__libc_init_array+0x1e>
 8003d18:	08004220 	.word	0x08004220
 8003d1c:	08004220 	.word	0x08004220
 8003d20:	08004220 	.word	0x08004220
 8003d24:	08004224 	.word	0x08004224

08003d28 <__retarget_lock_init_recursive>:
 8003d28:	4770      	bx	lr

08003d2a <__retarget_lock_acquire_recursive>:
 8003d2a:	4770      	bx	lr

08003d2c <__retarget_lock_release_recursive>:
 8003d2c:	4770      	bx	lr

08003d2e <memcpy>:
 8003d2e:	440a      	add	r2, r1
 8003d30:	4291      	cmp	r1, r2
 8003d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d36:	d100      	bne.n	8003d3a <memcpy+0xc>
 8003d38:	4770      	bx	lr
 8003d3a:	b510      	push	{r4, lr}
 8003d3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d40:	4291      	cmp	r1, r2
 8003d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d46:	d1f9      	bne.n	8003d3c <memcpy+0xe>
 8003d48:	bd10      	pop	{r4, pc}
	...

08003d4c <_free_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4605      	mov	r5, r0
 8003d50:	2900      	cmp	r1, #0
 8003d52:	d040      	beq.n	8003dd6 <_free_r+0x8a>
 8003d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d58:	1f0c      	subs	r4, r1, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bfb8      	it	lt
 8003d5e:	18e4      	addlt	r4, r4, r3
 8003d60:	f000 f8de 	bl	8003f20 <__malloc_lock>
 8003d64:	4a1c      	ldr	r2, [pc, #112]	@ (8003dd8 <_free_r+0x8c>)
 8003d66:	6813      	ldr	r3, [r2, #0]
 8003d68:	b933      	cbnz	r3, 8003d78 <_free_r+0x2c>
 8003d6a:	6063      	str	r3, [r4, #4]
 8003d6c:	6014      	str	r4, [r2, #0]
 8003d6e:	4628      	mov	r0, r5
 8003d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d74:	f000 b8da 	b.w	8003f2c <__malloc_unlock>
 8003d78:	42a3      	cmp	r3, r4
 8003d7a:	d908      	bls.n	8003d8e <_free_r+0x42>
 8003d7c:	6820      	ldr	r0, [r4, #0]
 8003d7e:	1821      	adds	r1, r4, r0
 8003d80:	428b      	cmp	r3, r1
 8003d82:	bf01      	itttt	eq
 8003d84:	6819      	ldreq	r1, [r3, #0]
 8003d86:	685b      	ldreq	r3, [r3, #4]
 8003d88:	1809      	addeq	r1, r1, r0
 8003d8a:	6021      	streq	r1, [r4, #0]
 8003d8c:	e7ed      	b.n	8003d6a <_free_r+0x1e>
 8003d8e:	461a      	mov	r2, r3
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	b10b      	cbz	r3, 8003d98 <_free_r+0x4c>
 8003d94:	42a3      	cmp	r3, r4
 8003d96:	d9fa      	bls.n	8003d8e <_free_r+0x42>
 8003d98:	6811      	ldr	r1, [r2, #0]
 8003d9a:	1850      	adds	r0, r2, r1
 8003d9c:	42a0      	cmp	r0, r4
 8003d9e:	d10b      	bne.n	8003db8 <_free_r+0x6c>
 8003da0:	6820      	ldr	r0, [r4, #0]
 8003da2:	4401      	add	r1, r0
 8003da4:	1850      	adds	r0, r2, r1
 8003da6:	4283      	cmp	r3, r0
 8003da8:	6011      	str	r1, [r2, #0]
 8003daa:	d1e0      	bne.n	8003d6e <_free_r+0x22>
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4408      	add	r0, r1
 8003db2:	6010      	str	r0, [r2, #0]
 8003db4:	6053      	str	r3, [r2, #4]
 8003db6:	e7da      	b.n	8003d6e <_free_r+0x22>
 8003db8:	d902      	bls.n	8003dc0 <_free_r+0x74>
 8003dba:	230c      	movs	r3, #12
 8003dbc:	602b      	str	r3, [r5, #0]
 8003dbe:	e7d6      	b.n	8003d6e <_free_r+0x22>
 8003dc0:	6820      	ldr	r0, [r4, #0]
 8003dc2:	1821      	adds	r1, r4, r0
 8003dc4:	428b      	cmp	r3, r1
 8003dc6:	bf01      	itttt	eq
 8003dc8:	6819      	ldreq	r1, [r3, #0]
 8003dca:	685b      	ldreq	r3, [r3, #4]
 8003dcc:	1809      	addeq	r1, r1, r0
 8003dce:	6021      	streq	r1, [r4, #0]
 8003dd0:	6063      	str	r3, [r4, #4]
 8003dd2:	6054      	str	r4, [r2, #4]
 8003dd4:	e7cb      	b.n	8003d6e <_free_r+0x22>
 8003dd6:	bd38      	pop	{r3, r4, r5, pc}
 8003dd8:	20000360 	.word	0x20000360

08003ddc <sbrk_aligned>:
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	4e0f      	ldr	r6, [pc, #60]	@ (8003e1c <sbrk_aligned+0x40>)
 8003de0:	460c      	mov	r4, r1
 8003de2:	6831      	ldr	r1, [r6, #0]
 8003de4:	4605      	mov	r5, r0
 8003de6:	b911      	cbnz	r1, 8003dee <sbrk_aligned+0x12>
 8003de8:	f000 f9d2 	bl	8004190 <_sbrk_r>
 8003dec:	6030      	str	r0, [r6, #0]
 8003dee:	4621      	mov	r1, r4
 8003df0:	4628      	mov	r0, r5
 8003df2:	f000 f9cd 	bl	8004190 <_sbrk_r>
 8003df6:	1c43      	adds	r3, r0, #1
 8003df8:	d103      	bne.n	8003e02 <sbrk_aligned+0x26>
 8003dfa:	f04f 34ff 	mov.w	r4, #4294967295
 8003dfe:	4620      	mov	r0, r4
 8003e00:	bd70      	pop	{r4, r5, r6, pc}
 8003e02:	1cc4      	adds	r4, r0, #3
 8003e04:	f024 0403 	bic.w	r4, r4, #3
 8003e08:	42a0      	cmp	r0, r4
 8003e0a:	d0f8      	beq.n	8003dfe <sbrk_aligned+0x22>
 8003e0c:	1a21      	subs	r1, r4, r0
 8003e0e:	4628      	mov	r0, r5
 8003e10:	f000 f9be 	bl	8004190 <_sbrk_r>
 8003e14:	3001      	adds	r0, #1
 8003e16:	d1f2      	bne.n	8003dfe <sbrk_aligned+0x22>
 8003e18:	e7ef      	b.n	8003dfa <sbrk_aligned+0x1e>
 8003e1a:	bf00      	nop
 8003e1c:	2000035c 	.word	0x2000035c

08003e20 <_malloc_r>:
 8003e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e24:	1ccd      	adds	r5, r1, #3
 8003e26:	f025 0503 	bic.w	r5, r5, #3
 8003e2a:	3508      	adds	r5, #8
 8003e2c:	2d0c      	cmp	r5, #12
 8003e2e:	bf38      	it	cc
 8003e30:	250c      	movcc	r5, #12
 8003e32:	2d00      	cmp	r5, #0
 8003e34:	4606      	mov	r6, r0
 8003e36:	db01      	blt.n	8003e3c <_malloc_r+0x1c>
 8003e38:	42a9      	cmp	r1, r5
 8003e3a:	d904      	bls.n	8003e46 <_malloc_r+0x26>
 8003e3c:	230c      	movs	r3, #12
 8003e3e:	6033      	str	r3, [r6, #0]
 8003e40:	2000      	movs	r0, #0
 8003e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f1c <_malloc_r+0xfc>
 8003e4a:	f000 f869 	bl	8003f20 <__malloc_lock>
 8003e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8003e52:	461c      	mov	r4, r3
 8003e54:	bb44      	cbnz	r4, 8003ea8 <_malloc_r+0x88>
 8003e56:	4629      	mov	r1, r5
 8003e58:	4630      	mov	r0, r6
 8003e5a:	f7ff ffbf 	bl	8003ddc <sbrk_aligned>
 8003e5e:	1c43      	adds	r3, r0, #1
 8003e60:	4604      	mov	r4, r0
 8003e62:	d158      	bne.n	8003f16 <_malloc_r+0xf6>
 8003e64:	f8d8 4000 	ldr.w	r4, [r8]
 8003e68:	4627      	mov	r7, r4
 8003e6a:	2f00      	cmp	r7, #0
 8003e6c:	d143      	bne.n	8003ef6 <_malloc_r+0xd6>
 8003e6e:	2c00      	cmp	r4, #0
 8003e70:	d04b      	beq.n	8003f0a <_malloc_r+0xea>
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	4639      	mov	r1, r7
 8003e76:	4630      	mov	r0, r6
 8003e78:	eb04 0903 	add.w	r9, r4, r3
 8003e7c:	f000 f988 	bl	8004190 <_sbrk_r>
 8003e80:	4581      	cmp	r9, r0
 8003e82:	d142      	bne.n	8003f0a <_malloc_r+0xea>
 8003e84:	6821      	ldr	r1, [r4, #0]
 8003e86:	4630      	mov	r0, r6
 8003e88:	1a6d      	subs	r5, r5, r1
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	f7ff ffa6 	bl	8003ddc <sbrk_aligned>
 8003e90:	3001      	adds	r0, #1
 8003e92:	d03a      	beq.n	8003f0a <_malloc_r+0xea>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	442b      	add	r3, r5
 8003e98:	6023      	str	r3, [r4, #0]
 8003e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	bb62      	cbnz	r2, 8003efc <_malloc_r+0xdc>
 8003ea2:	f8c8 7000 	str.w	r7, [r8]
 8003ea6:	e00f      	b.n	8003ec8 <_malloc_r+0xa8>
 8003ea8:	6822      	ldr	r2, [r4, #0]
 8003eaa:	1b52      	subs	r2, r2, r5
 8003eac:	d420      	bmi.n	8003ef0 <_malloc_r+0xd0>
 8003eae:	2a0b      	cmp	r2, #11
 8003eb0:	d917      	bls.n	8003ee2 <_malloc_r+0xc2>
 8003eb2:	1961      	adds	r1, r4, r5
 8003eb4:	42a3      	cmp	r3, r4
 8003eb6:	6025      	str	r5, [r4, #0]
 8003eb8:	bf18      	it	ne
 8003eba:	6059      	strne	r1, [r3, #4]
 8003ebc:	6863      	ldr	r3, [r4, #4]
 8003ebe:	bf08      	it	eq
 8003ec0:	f8c8 1000 	streq.w	r1, [r8]
 8003ec4:	5162      	str	r2, [r4, r5]
 8003ec6:	604b      	str	r3, [r1, #4]
 8003ec8:	4630      	mov	r0, r6
 8003eca:	f000 f82f 	bl	8003f2c <__malloc_unlock>
 8003ece:	f104 000b 	add.w	r0, r4, #11
 8003ed2:	1d23      	adds	r3, r4, #4
 8003ed4:	f020 0007 	bic.w	r0, r0, #7
 8003ed8:	1ac2      	subs	r2, r0, r3
 8003eda:	bf1c      	itt	ne
 8003edc:	1a1b      	subne	r3, r3, r0
 8003ede:	50a3      	strne	r3, [r4, r2]
 8003ee0:	e7af      	b.n	8003e42 <_malloc_r+0x22>
 8003ee2:	6862      	ldr	r2, [r4, #4]
 8003ee4:	42a3      	cmp	r3, r4
 8003ee6:	bf0c      	ite	eq
 8003ee8:	f8c8 2000 	streq.w	r2, [r8]
 8003eec:	605a      	strne	r2, [r3, #4]
 8003eee:	e7eb      	b.n	8003ec8 <_malloc_r+0xa8>
 8003ef0:	4623      	mov	r3, r4
 8003ef2:	6864      	ldr	r4, [r4, #4]
 8003ef4:	e7ae      	b.n	8003e54 <_malloc_r+0x34>
 8003ef6:	463c      	mov	r4, r7
 8003ef8:	687f      	ldr	r7, [r7, #4]
 8003efa:	e7b6      	b.n	8003e6a <_malloc_r+0x4a>
 8003efc:	461a      	mov	r2, r3
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	42a3      	cmp	r3, r4
 8003f02:	d1fb      	bne.n	8003efc <_malloc_r+0xdc>
 8003f04:	2300      	movs	r3, #0
 8003f06:	6053      	str	r3, [r2, #4]
 8003f08:	e7de      	b.n	8003ec8 <_malloc_r+0xa8>
 8003f0a:	230c      	movs	r3, #12
 8003f0c:	4630      	mov	r0, r6
 8003f0e:	6033      	str	r3, [r6, #0]
 8003f10:	f000 f80c 	bl	8003f2c <__malloc_unlock>
 8003f14:	e794      	b.n	8003e40 <_malloc_r+0x20>
 8003f16:	6005      	str	r5, [r0, #0]
 8003f18:	e7d6      	b.n	8003ec8 <_malloc_r+0xa8>
 8003f1a:	bf00      	nop
 8003f1c:	20000360 	.word	0x20000360

08003f20 <__malloc_lock>:
 8003f20:	4801      	ldr	r0, [pc, #4]	@ (8003f28 <__malloc_lock+0x8>)
 8003f22:	f7ff bf02 	b.w	8003d2a <__retarget_lock_acquire_recursive>
 8003f26:	bf00      	nop
 8003f28:	20000358 	.word	0x20000358

08003f2c <__malloc_unlock>:
 8003f2c:	4801      	ldr	r0, [pc, #4]	@ (8003f34 <__malloc_unlock+0x8>)
 8003f2e:	f7ff befd 	b.w	8003d2c <__retarget_lock_release_recursive>
 8003f32:	bf00      	nop
 8003f34:	20000358 	.word	0x20000358

08003f38 <__sflush_r>:
 8003f38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3e:	0716      	lsls	r6, r2, #28
 8003f40:	4605      	mov	r5, r0
 8003f42:	460c      	mov	r4, r1
 8003f44:	d454      	bmi.n	8003ff0 <__sflush_r+0xb8>
 8003f46:	684b      	ldr	r3, [r1, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	dc02      	bgt.n	8003f52 <__sflush_r+0x1a>
 8003f4c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	dd48      	ble.n	8003fe4 <__sflush_r+0xac>
 8003f52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f54:	2e00      	cmp	r6, #0
 8003f56:	d045      	beq.n	8003fe4 <__sflush_r+0xac>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003f5e:	682f      	ldr	r7, [r5, #0]
 8003f60:	6a21      	ldr	r1, [r4, #32]
 8003f62:	602b      	str	r3, [r5, #0]
 8003f64:	d030      	beq.n	8003fc8 <__sflush_r+0x90>
 8003f66:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	0759      	lsls	r1, r3, #29
 8003f6c:	d505      	bpl.n	8003f7a <__sflush_r+0x42>
 8003f6e:	6863      	ldr	r3, [r4, #4]
 8003f70:	1ad2      	subs	r2, r2, r3
 8003f72:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f74:	b10b      	cbz	r3, 8003f7a <__sflush_r+0x42>
 8003f76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f78:	1ad2      	subs	r2, r2, r3
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f80:	6a21      	ldr	r1, [r4, #32]
 8003f82:	47b0      	blx	r6
 8003f84:	1c43      	adds	r3, r0, #1
 8003f86:	89a3      	ldrh	r3, [r4, #12]
 8003f88:	d106      	bne.n	8003f98 <__sflush_r+0x60>
 8003f8a:	6829      	ldr	r1, [r5, #0]
 8003f8c:	291d      	cmp	r1, #29
 8003f8e:	d82b      	bhi.n	8003fe8 <__sflush_r+0xb0>
 8003f90:	4a28      	ldr	r2, [pc, #160]	@ (8004034 <__sflush_r+0xfc>)
 8003f92:	40ca      	lsrs	r2, r1
 8003f94:	07d6      	lsls	r6, r2, #31
 8003f96:	d527      	bpl.n	8003fe8 <__sflush_r+0xb0>
 8003f98:	2200      	movs	r2, #0
 8003f9a:	6062      	str	r2, [r4, #4]
 8003f9c:	6922      	ldr	r2, [r4, #16]
 8003f9e:	04d9      	lsls	r1, r3, #19
 8003fa0:	6022      	str	r2, [r4, #0]
 8003fa2:	d504      	bpl.n	8003fae <__sflush_r+0x76>
 8003fa4:	1c42      	adds	r2, r0, #1
 8003fa6:	d101      	bne.n	8003fac <__sflush_r+0x74>
 8003fa8:	682b      	ldr	r3, [r5, #0]
 8003faa:	b903      	cbnz	r3, 8003fae <__sflush_r+0x76>
 8003fac:	6560      	str	r0, [r4, #84]	@ 0x54
 8003fae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003fb0:	602f      	str	r7, [r5, #0]
 8003fb2:	b1b9      	cbz	r1, 8003fe4 <__sflush_r+0xac>
 8003fb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003fb8:	4299      	cmp	r1, r3
 8003fba:	d002      	beq.n	8003fc2 <__sflush_r+0x8a>
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	f7ff fec5 	bl	8003d4c <_free_r>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8003fc6:	e00d      	b.n	8003fe4 <__sflush_r+0xac>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	4628      	mov	r0, r5
 8003fcc:	47b0      	blx	r6
 8003fce:	4602      	mov	r2, r0
 8003fd0:	1c50      	adds	r0, r2, #1
 8003fd2:	d1c9      	bne.n	8003f68 <__sflush_r+0x30>
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0c6      	beq.n	8003f68 <__sflush_r+0x30>
 8003fda:	2b1d      	cmp	r3, #29
 8003fdc:	d001      	beq.n	8003fe2 <__sflush_r+0xaa>
 8003fde:	2b16      	cmp	r3, #22
 8003fe0:	d11d      	bne.n	800401e <__sflush_r+0xe6>
 8003fe2:	602f      	str	r7, [r5, #0]
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	e021      	b.n	800402c <__sflush_r+0xf4>
 8003fe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fec:	b21b      	sxth	r3, r3
 8003fee:	e01a      	b.n	8004026 <__sflush_r+0xee>
 8003ff0:	690f      	ldr	r7, [r1, #16]
 8003ff2:	2f00      	cmp	r7, #0
 8003ff4:	d0f6      	beq.n	8003fe4 <__sflush_r+0xac>
 8003ff6:	0793      	lsls	r3, r2, #30
 8003ff8:	bf18      	it	ne
 8003ffa:	2300      	movne	r3, #0
 8003ffc:	680e      	ldr	r6, [r1, #0]
 8003ffe:	bf08      	it	eq
 8004000:	694b      	ldreq	r3, [r1, #20]
 8004002:	1bf6      	subs	r6, r6, r7
 8004004:	600f      	str	r7, [r1, #0]
 8004006:	608b      	str	r3, [r1, #8]
 8004008:	2e00      	cmp	r6, #0
 800400a:	ddeb      	ble.n	8003fe4 <__sflush_r+0xac>
 800400c:	4633      	mov	r3, r6
 800400e:	463a      	mov	r2, r7
 8004010:	4628      	mov	r0, r5
 8004012:	6a21      	ldr	r1, [r4, #32]
 8004014:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004018:	47e0      	blx	ip
 800401a:	2800      	cmp	r0, #0
 800401c:	dc07      	bgt.n	800402e <__sflush_r+0xf6>
 800401e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004026:	f04f 30ff 	mov.w	r0, #4294967295
 800402a:	81a3      	strh	r3, [r4, #12]
 800402c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800402e:	4407      	add	r7, r0
 8004030:	1a36      	subs	r6, r6, r0
 8004032:	e7e9      	b.n	8004008 <__sflush_r+0xd0>
 8004034:	20400001 	.word	0x20400001

08004038 <_fflush_r>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	690b      	ldr	r3, [r1, #16]
 800403c:	4605      	mov	r5, r0
 800403e:	460c      	mov	r4, r1
 8004040:	b913      	cbnz	r3, 8004048 <_fflush_r+0x10>
 8004042:	2500      	movs	r5, #0
 8004044:	4628      	mov	r0, r5
 8004046:	bd38      	pop	{r3, r4, r5, pc}
 8004048:	b118      	cbz	r0, 8004052 <_fflush_r+0x1a>
 800404a:	6a03      	ldr	r3, [r0, #32]
 800404c:	b90b      	cbnz	r3, 8004052 <_fflush_r+0x1a>
 800404e:	f7ff fc87 	bl	8003960 <__sinit>
 8004052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f3      	beq.n	8004042 <_fflush_r+0xa>
 800405a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800405c:	07d0      	lsls	r0, r2, #31
 800405e:	d404      	bmi.n	800406a <_fflush_r+0x32>
 8004060:	0599      	lsls	r1, r3, #22
 8004062:	d402      	bmi.n	800406a <_fflush_r+0x32>
 8004064:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004066:	f7ff fe60 	bl	8003d2a <__retarget_lock_acquire_recursive>
 800406a:	4628      	mov	r0, r5
 800406c:	4621      	mov	r1, r4
 800406e:	f7ff ff63 	bl	8003f38 <__sflush_r>
 8004072:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004074:	4605      	mov	r5, r0
 8004076:	07da      	lsls	r2, r3, #31
 8004078:	d4e4      	bmi.n	8004044 <_fflush_r+0xc>
 800407a:	89a3      	ldrh	r3, [r4, #12]
 800407c:	059b      	lsls	r3, r3, #22
 800407e:	d4e1      	bmi.n	8004044 <_fflush_r+0xc>
 8004080:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004082:	f7ff fe53 	bl	8003d2c <__retarget_lock_release_recursive>
 8004086:	e7dd      	b.n	8004044 <_fflush_r+0xc>

08004088 <__swhatbuf_r>:
 8004088:	b570      	push	{r4, r5, r6, lr}
 800408a:	460c      	mov	r4, r1
 800408c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004090:	4615      	mov	r5, r2
 8004092:	2900      	cmp	r1, #0
 8004094:	461e      	mov	r6, r3
 8004096:	b096      	sub	sp, #88	@ 0x58
 8004098:	da0c      	bge.n	80040b4 <__swhatbuf_r+0x2c>
 800409a:	89a3      	ldrh	r3, [r4, #12]
 800409c:	2100      	movs	r1, #0
 800409e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80040a2:	bf14      	ite	ne
 80040a4:	2340      	movne	r3, #64	@ 0x40
 80040a6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80040aa:	2000      	movs	r0, #0
 80040ac:	6031      	str	r1, [r6, #0]
 80040ae:	602b      	str	r3, [r5, #0]
 80040b0:	b016      	add	sp, #88	@ 0x58
 80040b2:	bd70      	pop	{r4, r5, r6, pc}
 80040b4:	466a      	mov	r2, sp
 80040b6:	f000 f849 	bl	800414c <_fstat_r>
 80040ba:	2800      	cmp	r0, #0
 80040bc:	dbed      	blt.n	800409a <__swhatbuf_r+0x12>
 80040be:	9901      	ldr	r1, [sp, #4]
 80040c0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80040c4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80040c8:	4259      	negs	r1, r3
 80040ca:	4159      	adcs	r1, r3
 80040cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040d0:	e7eb      	b.n	80040aa <__swhatbuf_r+0x22>

080040d2 <__smakebuf_r>:
 80040d2:	898b      	ldrh	r3, [r1, #12]
 80040d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040d6:	079d      	lsls	r5, r3, #30
 80040d8:	4606      	mov	r6, r0
 80040da:	460c      	mov	r4, r1
 80040dc:	d507      	bpl.n	80040ee <__smakebuf_r+0x1c>
 80040de:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80040e2:	6023      	str	r3, [r4, #0]
 80040e4:	6123      	str	r3, [r4, #16]
 80040e6:	2301      	movs	r3, #1
 80040e8:	6163      	str	r3, [r4, #20]
 80040ea:	b003      	add	sp, #12
 80040ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ee:	466a      	mov	r2, sp
 80040f0:	ab01      	add	r3, sp, #4
 80040f2:	f7ff ffc9 	bl	8004088 <__swhatbuf_r>
 80040f6:	9f00      	ldr	r7, [sp, #0]
 80040f8:	4605      	mov	r5, r0
 80040fa:	4639      	mov	r1, r7
 80040fc:	4630      	mov	r0, r6
 80040fe:	f7ff fe8f 	bl	8003e20 <_malloc_r>
 8004102:	b948      	cbnz	r0, 8004118 <__smakebuf_r+0x46>
 8004104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004108:	059a      	lsls	r2, r3, #22
 800410a:	d4ee      	bmi.n	80040ea <__smakebuf_r+0x18>
 800410c:	f023 0303 	bic.w	r3, r3, #3
 8004110:	f043 0302 	orr.w	r3, r3, #2
 8004114:	81a3      	strh	r3, [r4, #12]
 8004116:	e7e2      	b.n	80040de <__smakebuf_r+0xc>
 8004118:	89a3      	ldrh	r3, [r4, #12]
 800411a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800411e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004122:	81a3      	strh	r3, [r4, #12]
 8004124:	9b01      	ldr	r3, [sp, #4]
 8004126:	6020      	str	r0, [r4, #0]
 8004128:	b15b      	cbz	r3, 8004142 <__smakebuf_r+0x70>
 800412a:	4630      	mov	r0, r6
 800412c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004130:	f000 f81e 	bl	8004170 <_isatty_r>
 8004134:	b128      	cbz	r0, 8004142 <__smakebuf_r+0x70>
 8004136:	89a3      	ldrh	r3, [r4, #12]
 8004138:	f023 0303 	bic.w	r3, r3, #3
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	81a3      	strh	r3, [r4, #12]
 8004142:	89a3      	ldrh	r3, [r4, #12]
 8004144:	431d      	orrs	r5, r3
 8004146:	81a5      	strh	r5, [r4, #12]
 8004148:	e7cf      	b.n	80040ea <__smakebuf_r+0x18>
	...

0800414c <_fstat_r>:
 800414c:	b538      	push	{r3, r4, r5, lr}
 800414e:	2300      	movs	r3, #0
 8004150:	4d06      	ldr	r5, [pc, #24]	@ (800416c <_fstat_r+0x20>)
 8004152:	4604      	mov	r4, r0
 8004154:	4608      	mov	r0, r1
 8004156:	4611      	mov	r1, r2
 8004158:	602b      	str	r3, [r5, #0]
 800415a:	f7fc fc7f 	bl	8000a5c <_fstat>
 800415e:	1c43      	adds	r3, r0, #1
 8004160:	d102      	bne.n	8004168 <_fstat_r+0x1c>
 8004162:	682b      	ldr	r3, [r5, #0]
 8004164:	b103      	cbz	r3, 8004168 <_fstat_r+0x1c>
 8004166:	6023      	str	r3, [r4, #0]
 8004168:	bd38      	pop	{r3, r4, r5, pc}
 800416a:	bf00      	nop
 800416c:	20000354 	.word	0x20000354

08004170 <_isatty_r>:
 8004170:	b538      	push	{r3, r4, r5, lr}
 8004172:	2300      	movs	r3, #0
 8004174:	4d05      	ldr	r5, [pc, #20]	@ (800418c <_isatty_r+0x1c>)
 8004176:	4604      	mov	r4, r0
 8004178:	4608      	mov	r0, r1
 800417a:	602b      	str	r3, [r5, #0]
 800417c:	f7fc fc7d 	bl	8000a7a <_isatty>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d102      	bne.n	800418a <_isatty_r+0x1a>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	b103      	cbz	r3, 800418a <_isatty_r+0x1a>
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	20000354 	.word	0x20000354

08004190 <_sbrk_r>:
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	2300      	movs	r3, #0
 8004194:	4d05      	ldr	r5, [pc, #20]	@ (80041ac <_sbrk_r+0x1c>)
 8004196:	4604      	mov	r4, r0
 8004198:	4608      	mov	r0, r1
 800419a:	602b      	str	r3, [r5, #0]
 800419c:	f7fc fc84 	bl	8000aa8 <_sbrk>
 80041a0:	1c43      	adds	r3, r0, #1
 80041a2:	d102      	bne.n	80041aa <_sbrk_r+0x1a>
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	b103      	cbz	r3, 80041aa <_sbrk_r+0x1a>
 80041a8:	6023      	str	r3, [r4, #0]
 80041aa:	bd38      	pop	{r3, r4, r5, pc}
 80041ac:	20000354 	.word	0x20000354

080041b0 <_init>:
 80041b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b2:	bf00      	nop
 80041b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b6:	bc08      	pop	{r3}
 80041b8:	469e      	mov	lr, r3
 80041ba:	4770      	bx	lr

080041bc <_fini>:
 80041bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041be:	bf00      	nop
 80041c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c2:	bc08      	pop	{r3}
 80041c4:	469e      	mov	lr, r3
 80041c6:	4770      	bx	lr
