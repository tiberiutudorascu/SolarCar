
BLUESOLARTEST_ITCAN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  080074d8  080074d8  000084d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078dc  080078dc  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080078dc  080078dc  000088dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078e4  080078e4  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078e4  080078e4  000088e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078e8  080078e8  000088e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080078ec  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  200001d4  08007ac0  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08007ac0  00009530  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9d0  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237a  00000000  00000000  00017bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00019f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3f  00000000  00000000  0001adc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019208  00000000  00000000  0001b8ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd88  00000000  00000000  00034b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008edca  00000000  00000000  0004488f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3659  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eb0  00000000  00000000  000d369c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d854c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080074bc 	.word	0x080074bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080074bc 	.word	0x080074bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <be16u>:

static inline int16_t be16s(const uint8_t *p) {
	return (int16_t) (((uint16_t) (p[0]) << 8) | (uint16_t) (p[1]));
}
// Functii pentru a interpreta doi octeti (big-endian) ca numar uint16_t fara semn/cu semn
static inline uint16_t be16u(const uint8_t *p) {
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	return ((uint16_t) (p[0]) << 8) | (uint16_t) (p[1]);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3301      	adds	r3, #1
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	b29b      	uxth	r3, r3
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
	...

08000e38 <BMS0x100>:
#include "main.h"
#include "stm32f1xx_hal.h"

void BMS0x100(const CANMSG_T CAN_MESSAGE) {
 8000e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e3c:	b095      	sub	sp, #84	@ 0x54
 8000e3e:	af08      	add	r7, sp, #32
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	if (CAN_MESSAGE.dlc < 7) {
 8000e46:	79bb      	ldrb	r3, [r7, #6]
 8000e48:	2b06      	cmp	r3, #6
 8000e4a:	d801      	bhi.n	8000e50 <BMS0x100+0x18>
		Error_Handler();
 8000e4c:	f000 f978 	bl	8001140 <Error_Handler>
	}

	// Citire valori brute din buffer (big-endian)
	const uint16_t v_raw = be16u(&CAN_MESSAGE.data[0]); // primii 2 octeti = Voltage
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	3303      	adds	r3, #3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ffd9 	bl	8000e0c <be16u>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	const uint16_t i_raw = be16u(&CAN_MESSAGE.data[2]); // urmatorii 2 octeti = Current
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	3305      	adds	r3, #5
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ffd2 	bl	8000e0c <be16u>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	const uint8_t soc_raw = CAN_MESSAGE.data[4];        // octetul 5 = SOC
 8000e6c:	7afb      	ldrb	r3, [r7, #11]
 8000e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	const uint8_t soh_raw = CAN_MESSAGE.data[5];        // octetul 6 = SOH
 8000e72:	7b3b      	ldrb	r3, [r7, #12]
 8000e74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	//IMPLEMENTARE CRC CHECKSUM
	float BMSpackVoltage = v_raw * VOLT_CURR_SCALE; // [V]
 8000e78:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff72 	bl	8000d64 <__aeabi_i2f>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4a34      	ldr	r2, [pc, #208]	@ (8000f54 <BMS0x100+0x11c>)
 8000e84:	4611      	mov	r1, r2
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff f96a 	bl	8000160 <__aeabi_fmul>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
	float BMSpackCurrent = i_raw * VOLT_CURR_SCALE; // [A]
 8000e90:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff66 	bl	8000d64 <__aeabi_i2f>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4a2e      	ldr	r2, [pc, #184]	@ (8000f54 <BMS0x100+0x11c>)
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff f95e 	bl	8000160 <__aeabi_fmul>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	623b      	str	r3, [r7, #32]
	float BMSsoc = soc_raw * SOC_SCALE;        // [%]
 8000ea8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff59 	bl	8000d64 <__aeabi_i2f>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff f950 	bl	8000160 <__aeabi_fmul>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	61fb      	str	r3, [r7, #28]
	float BMSsoh = soh_raw * SOH_TEMP_SCALE;   // [%]
 8000ec4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff4b 	bl	8000d64 <__aeabi_i2f>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff f942 	bl	8000160 <__aeabi_fmul>
 8000edc:	4603      	mov	r3, r0
 8000ede:	61bb      	str	r3, [r7, #24]

	static char buf[96];
	int n = snprintf(buf, sizeof(buf),
	                 "BMS id=0x%03lX V=%.2fV I=%.2fA SOC=%.1f%% SOH=%.1f%%\r\n",
	                 (unsigned long)CAN_MESSAGE.id,
 8000ee0:	88bb      	ldrh	r3, [r7, #4]
	int n = snprintf(buf, sizeof(buf),
 8000ee2:	461e      	mov	r6, r3
 8000ee4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000ee6:	f7ff fb53 	bl	8000590 <__aeabi_f2d>
 8000eea:	4604      	mov	r4, r0
 8000eec:	460d      	mov	r5, r1
 8000eee:	6a38      	ldr	r0, [r7, #32]
 8000ef0:	f7ff fb4e 	bl	8000590 <__aeabi_f2d>
 8000ef4:	4680      	mov	r8, r0
 8000ef6:	4689      	mov	r9, r1
 8000ef8:	69f8      	ldr	r0, [r7, #28]
 8000efa:	f7ff fb49 	bl	8000590 <__aeabi_f2d>
 8000efe:	4682      	mov	sl, r0
 8000f00:	468b      	mov	fp, r1
 8000f02:	69b8      	ldr	r0, [r7, #24]
 8000f04:	f7ff fb44 	bl	8000590 <__aeabi_f2d>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000f10:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8000f14:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000f18:	e9cd 4500 	strd	r4, r5, [sp]
 8000f1c:	4633      	mov	r3, r6
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f58 <BMS0x100+0x120>)
 8000f20:	2160      	movs	r1, #96	@ 0x60
 8000f22:	480e      	ldr	r0, [pc, #56]	@ (8000f5c <BMS0x100+0x124>)
 8000f24:	f004 f978 	bl	8005218 <sniprintf>
 8000f28:	6178      	str	r0, [r7, #20]
	                 BMSpackVoltage, BMSpackCurrent, BMSsoc, BMSsoh);
	if (n < 0)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db0c      	blt.n	8000f4a <BMS0x100+0x112>
		return;

	if (HAL_UART_Transmit_IT(&huart, (uint8_t*) buf, (uint16_t) n) != HAL_OK) {
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	461a      	mov	r2, r3
 8000f36:	4909      	ldr	r1, [pc, #36]	@ (8000f5c <BMS0x100+0x124>)
 8000f38:	4809      	ldr	r0, [pc, #36]	@ (8000f60 <BMS0x100+0x128>)
 8000f3a:	f002 fe84 	bl	8003c46 <HAL_UART_Transmit_IT>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <BMS0x100+0x114>

		Error_Handler();
 8000f44:	f000 f8fc 	bl	8001140 <Error_Handler>
 8000f48:	e000      	b.n	8000f4c <BMS0x100+0x114>
		return;
 8000f4a:	bf00      	nop
	}

}
 8000f4c:	3734      	adds	r7, #52	@ 0x34
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f54:	3dcccccd 	.word	0x3dcccccd
 8000f58:	080074d8 	.word	0x080074d8
 8000f5c:	200001f0 	.word	0x200001f0
 8000f60:	20000278 	.word	0x20000278

08000f64 <rb_next>:

static CANMSG_T RXQ[16];
static volatile uint16_t RX_HEAD = 0;
static volatile uint16_t RX_TAIL = 0;

static inline uint16_t rb_next(uint16_t i) {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
	return (uint16_t) ((i + 1u) & (16 - 1u));
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	3301      	adds	r3, #1
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	f003 030f 	and.w	r3, r3, #15
 8000f78:	b29b      	uxth	r3, r3
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <rb_empty>:
static inline bool rb_empty(void) {
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
	return RX_HEAD == RX_TAIL;
 8000f88:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <rb_empty+0x24>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <rb_empty+0x28>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	429a      	cmp	r2, r3
 8000f96:	bf0c      	ite	eq
 8000f98:	2301      	moveq	r3, #1
 8000f9a:	2300      	movne	r3, #0
 8000f9c:	b2db      	uxtb	r3, r3
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	200003d8 	.word	0x200003d8
 8000fac:	200003da 	.word	0x200003da

08000fb0 <rb_full>:
static inline bool rb_full(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	return rb_next(RX_HEAD) == RX_TAIL;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <rb_full+0x28>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ffd2 	bl	8000f64 <rb_next>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <rb_full+0x2c>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	bf0c      	ite	eq
 8000fce:	2301      	moveq	r3, #1
 8000fd0:	2300      	movne	r3, #0
 8000fd2:	b2db      	uxtb	r3, r3
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200003d8 	.word	0x200003d8
 8000fdc:	200003da 	.word	0x200003da

08000fe0 <rb_add>:
static inline void rb_add(const CANMSG_T *canmsg) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	if (rb_full()) {
 8000fe8:	f7ff ffe2 	bl	8000fb0 <rb_full>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d009      	beq.n	8001006 <rb_add+0x26>
		RX_TAIL = rb_next(RX_TAIL);
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <rb_add+0x60>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ffb3 	bl	8000f64 <rb_next>
 8000ffe:	4603      	mov	r3, r0
 8001000:	461a      	mov	r2, r3
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <rb_add+0x60>)
 8001004:	801a      	strh	r2, [r3, #0]
	}
	memcpy(&RXQ[RX_HEAD], canmsg, sizeof(CANMSG_T));
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <rb_add+0x64>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	b29b      	uxth	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	4613      	mov	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4413      	add	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4a0c      	ldr	r2, [pc, #48]	@ (8001048 <rb_add+0x68>)
 8001018:	4413      	add	r3, r2
 800101a:	220c      	movs	r2, #12
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	f004 fa95 	bl	800554e <memcpy>

	RX_HEAD = rb_next(RX_HEAD);
 8001024:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <rb_add+0x64>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	b29b      	uxth	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff9a 	bl	8000f64 <rb_next>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <rb_add+0x64>)
 8001036:	801a      	strh	r2, [r3, #0]
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200003da 	.word	0x200003da
 8001044:	200003d8 	.word	0x200003d8
 8001048:	20000318 	.word	0x20000318

0800104c <rb_pop>:
static inline bool rb_pop(CANMSG_T *canmsgread) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	if (rb_empty()) {
 8001054:	f7ff ff96 	bl	8000f84 <rb_empty>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <rb_pop+0x16>
		return 0;
 800105e:	2300      	movs	r3, #0
 8001060:	e019      	b.n	8001096 <rb_pop+0x4a>
	}
	memcpy(canmsgread, &RXQ[RX_TAIL], sizeof(CANMSG_T));
 8001062:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <rb_pop+0x54>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4a0c      	ldr	r2, [pc, #48]	@ (80010a4 <rb_pop+0x58>)
 8001074:	4413      	add	r3, r2
 8001076:	220c      	movs	r2, #12
 8001078:	4619      	mov	r1, r3
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f004 fa67 	bl	800554e <memcpy>
	RX_TAIL = rb_next(RX_TAIL);
 8001080:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <rb_pop+0x54>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	b29b      	uxth	r3, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff6c 	bl	8000f64 <rb_next>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <rb_pop+0x54>)
 8001092:	801a      	strh	r2, [r3, #0]
	return 1;
 8001094:	2301      	movs	r3, #1
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200003da 	.word	0x200003da
 80010a4:	20000318 	.word	0x20000318

080010a8 <main>:

int main(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	HAL_Init();
 80010ac:	f000 fc98 	bl	80019e0 <HAL_Init>
	SystemClock_Config();
 80010b0:	f000 f84a 	bl	8001148 <SystemClock_Config>
	MX_GPIO_INIT();
 80010b4:	f000 f9d6 	bl	8001464 <MX_GPIO_INIT>
	UART_INIT();
 80010b8:	f000 f98c 	bl	80013d4 <UART_INIT>
	CAN_INIT();
 80010bc:	f000 fa00 	bl	80014c0 <CAN_INIT>
	CAN_FILTER_CONFIG();
 80010c0:	f000 f8be 	bl	8001240 <CAN_FILTER_CONFIG>
	CANTIM2_INIT();
 80010c4:	f000 f958 	bl	8001378 <CANTIM2_INIT>

	if (HAL_CAN_ActivateNotification(&hcan,
 80010c8:	f240 4103 	movw	r1, #1027	@ 0x403
 80010cc:	4818      	ldr	r0, [pc, #96]	@ (8001130 <main+0x88>)
 80010ce:	f001 f905 	bl	80022dc <HAL_CAN_ActivateNotification>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <main+0x34>
	CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)
			!= HAL_OK) {
		Error_Handler();
 80010d8:	f000 f832 	bl	8001140 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 80010dc:	4814      	ldr	r0, [pc, #80]	@ (8001130 <main+0x88>)
 80010de:	f000 fec9 	bl	8001e74 <HAL_CAN_Start>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <main+0x44>
		Error_Handler();
 80010e8:	f000 f82a 	bl	8001140 <Error_Handler>
	}
	HAL_TIM_Base_Start_IT(&htim2);
 80010ec:	4811      	ldr	r0, [pc, #68]	@ (8001134 <main+0x8c>)
 80010ee:	f002 fae9 	bl	80036c4 <HAL_TIM_Base_Start_IT>

	while (1) {

		if (flag == 1) {
 80010f2:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <main+0x90>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d011      	beq.n	8001120 <main+0x78>
			CAN_TX();
 80010fc:	f000 f866 	bl	80011cc <CAN_TX>
			flag = 0;
 8001100:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <main+0x90>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]

		}
		while (rb_pop(&CAN_MESSAGE)) {
 8001106:	e00b      	b.n	8001120 <main+0x78>
			switch (CAN_MESSAGE.id) {
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <main+0x94>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001110:	d105      	bne.n	800111e <main+0x76>
			case 0x100: {
				BMS0x100(CAN_MESSAGE);
 8001112:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <main+0x94>)
 8001114:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001118:	f7ff fe8e 	bl	8000e38 <BMS0x100>
				break;
 800111c:	e000      	b.n	8001120 <main+0x78>
			}
			default:
				break;
 800111e:	bf00      	nop
		while (rb_pop(&CAN_MESSAGE)) {
 8001120:	4806      	ldr	r0, [pc, #24]	@ (800113c <main+0x94>)
 8001122:	f7ff ff93 	bl	800104c <rb_pop>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1ed      	bne.n	8001108 <main+0x60>
		if (flag == 1) {
 800112c:	e7e1      	b.n	80010f2 <main+0x4a>
 800112e:	bf00      	nop
 8001130:	20000250 	.word	0x20000250
 8001134:	200002c0 	.word	0x200002c0
 8001138:	20000308 	.word	0x20000308
 800113c:	2000030c 	.word	0x2000030c

08001140 <Error_Handler>:
		}
	}

}

void Error_Handler(void) {
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
	while (1) {
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <Error_Handler+0x4>

08001148 <SystemClock_Config>:

	}
}

void SystemClock_Config() {
 8001148:	b580      	push	{r7, lr}
 800114a:	b090      	sub	sp, #64	@ 0x40
 800114c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef osc_init = { 0 };
 800114e:	f107 0318 	add.w	r3, r7, #24
 8001152:	2228      	movs	r2, #40	@ 0x28
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f004 f96c 	bl	8005434 <memset>
	RCC_ClkInitTypeDef clk_init = { 0 };
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
	osc_init.HSEState = RCC_HSE_OFF;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
	osc_init.HSIState = RCC_HSI_ON;
 800116e:	2301      	movs	r3, #1
 8001170:	62bb      	str	r3, [r7, #40]	@ 0x28
	osc_init.HSICalibrationValue = 16;
 8001172:	2310      	movs	r3, #16
 8001174:	62fb      	str	r3, [r7, #44]	@ 0x2c
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8001176:	2302      	movs	r3, #2
 8001178:	637b      	str	r3, [r7, #52]	@ 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800117a:	2300      	movs	r3, #0
 800117c:	63bb      	str	r3, [r7, #56]	@ 0x38
	osc_init.PLL.PLLMUL = RCC_PLL_MUL10;
 800117e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001182:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&osc_init) != HAL_OK) {
 8001184:	f107 0318 	add.w	r3, r7, #24
 8001188:	4618      	mov	r0, r3
 800118a:	f001 fe3b 	bl	8002e04 <HAL_RCC_OscConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x50>
		Error_Handler();
 8001194:	f7ff ffd4 	bl	8001140 <Error_Handler>
	}

	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8001198:	230f      	movs	r3, #15
 800119a:	607b      	str	r3, [r7, #4]
	RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119c:	2302      	movs	r3, #2
 800119e:	60bb      	str	r3, [r7, #8]
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
	clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011a8:	613b      	str	r3, [r7, #16]
	clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
	if (HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_1) != HAL_OK) {
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2102      	movs	r1, #2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 f8a8 	bl	8003308 <HAL_RCC_ClockConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0x7a>
		Error_Handler();
 80011be:	f7ff ffbf 	bl	8001140 <Error_Handler>
	}
}
 80011c2:	bf00      	nop
 80011c4:	3740      	adds	r7, #64	@ 0x40
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <CAN_TX>:

void CAN_TX() {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txheader;
	uint32_t txmailbox;
	uint8_t test[6] = "test\r\n";
 80011d2:	4a17      	ldr	r2, [pc, #92]	@ (8001230 <CAN_TX+0x64>)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011da:	6018      	str	r0, [r3, #0]
 80011dc:	3304      	adds	r3, #4
 80011de:	8019      	strh	r1, [r3, #0]

	txheader.DLC = 6;
 80011e0:	2306      	movs	r3, #6
 80011e2:	623b      	str	r3, [r7, #32]
	txheader.StdId = 0x01;
 80011e4:	2301      	movs	r3, #1
 80011e6:	613b      	str	r3, [r7, #16]
	txheader.IDE = CAN_ID_STD;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
	txheader.RTR = CAN_RTR_DATA;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_AddTxMessage(&hcan, &txheader, test, &txmailbox) != HAL_OK) {
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	1d3a      	adds	r2, r7, #4
 80011f6:	f107 0110 	add.w	r1, r7, #16
 80011fa:	480e      	ldr	r0, [pc, #56]	@ (8001234 <CAN_TX+0x68>)
 80011fc:	f000 fe7e 	bl	8001efc <HAL_CAN_AddTxMessage>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00f      	beq.n	8001226 <CAN_TX+0x5a>
		Error_Handler();
 8001206:	f7ff ff9b 	bl	8001140 <Error_Handler>
		while (1) {
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800120a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800120e:	480a      	ldr	r0, [pc, #40]	@ (8001238 <CAN_TX+0x6c>)
 8001210:	f001 fdde 	bl	8002dd0 <HAL_GPIO_TogglePin>
			HAL_Delay(800);
 8001214:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001218:	f000 fc44 	bl	8001aa4 <HAL_Delay>
			printf("1\n");
 800121c:	4807      	ldr	r0, [pc, #28]	@ (800123c <CAN_TX+0x70>)
 800121e:	f003 fff3 	bl	8005208 <puts>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001222:	bf00      	nop
 8001224:	e7f1      	b.n	800120a <CAN_TX+0x3e>
		}
	}

}
 8001226:	bf00      	nop
 8001228:	3728      	adds	r7, #40	@ 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	08007514 	.word	0x08007514
 8001234:	20000250 	.word	0x20000250
 8001238:	40011000 	.word	0x40011000
 800123c:	08007510 	.word	0x08007510

08001240 <CAN_FILTER_CONFIG>:

void CAN_FILTER_CONFIG() {
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	@ 0x28
 8001244:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef canfilter = { 0 };
 8001246:	463b      	mov	r3, r7
 8001248:	2228      	movs	r2, #40	@ 0x28
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f004 f8f1 	bl	8005434 <memset>

	canfilter.FilterActivation = ENABLE;
 8001252:	2301      	movs	r3, #1
 8001254:	623b      	str	r3, [r7, #32]
	canfilter.FilterBank = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
	canfilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
	canfilter.FilterIdHigh = 0x0000;
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
	canfilter.FilterIdLow = 0x0000;
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
	canfilter.FilterMaskIdHigh = 0x0000;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
	canfilter.FilterMaskIdLow = 0x0000;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
	canfilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
	canfilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001272:	2301      	movs	r3, #1
 8001274:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(&hcan, &canfilter) != HAL_OK) {
 8001276:	463b      	mov	r3, r7
 8001278:	4619      	mov	r1, r3
 800127a:	4806      	ldr	r0, [pc, #24]	@ (8001294 <CAN_FILTER_CONFIG+0x54>)
 800127c:	f000 fd31 	bl	8001ce2 <HAL_CAN_ConfigFilter>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <CAN_FILTER_CONFIG+0x4a>
		Error_Handler();
 8001286:	f7ff ff5b 	bl	8001140 <Error_Handler>
	}

}
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	@ 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000250 	.word	0x20000250

08001298 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b08a      	sub	sp, #40	@ 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	const char msg[] = "Message sent from mailbox 1\n\r";
 80012a0:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <HAL_CAN_TxMailbox0CompleteCallback+0x40>)
 80012a2:	f107 0408 	add.w	r4, r7, #8
 80012a6:	461d      	mov	r5, r3
 80012a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012b0:	c407      	stmia	r4!, {r0, r1, r2}
 80012b2:	8023      	strh	r3, [r4, #0]

	if (HAL_UART_Transmit(&huart, (uint8_t*) msg, sizeof(msg) - 1,
 80012b4:	f107 0108 	add.w	r1, r7, #8
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295
 80012bc:	221d      	movs	r2, #29
 80012be:	4807      	ldr	r0, [pc, #28]	@ (80012dc <HAL_CAN_TxMailbox0CompleteCallback+0x44>)
 80012c0:	f002 fc36 	bl	8003b30 <HAL_UART_Transmit>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_CAN_TxMailbox0CompleteCallback+0x36>
	HAL_MAX_DELAY) != HAL_OK) {
		Error_Handler();
 80012ca:	f7ff ff39 	bl	8001140 <Error_Handler>
	}

}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	@ 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bdb0      	pop	{r4, r5, r7, pc}
 80012d6:	bf00      	nop
 80012d8:	0800751c 	.word	0x0800751c
 80012dc:	20000278 	.word	0x20000278

080012e0 <HAL_CAN_RxFifo0MsgPendingCallback>:
 if (HAL_UART_Transmit(&huart, (uint8_t*) msg, sizeof(msg) - 1,
 HAL_MAX_DELAY) != HAL_OK) {
 Error_Handler();
 }
 } */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b090      	sub	sp, #64	@ 0x40
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxheader = { 0 };
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	615a      	str	r2, [r3, #20]
 80012fa:	619a      	str	r2, [r3, #24]
	uint8_t recieved_msg[8];
	CANMSG_T recievedCAN = { 0 };
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxheader, recieved_msg)
 8001308:	f107 0318 	add.w	r3, r7, #24
 800130c:	f107 0220 	add.w	r2, r7, #32
 8001310:	2100      	movs	r1, #0
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 fec1 	bl	800209a <HAL_CAN_GetRxMessage>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			!= HAL_OK) {
		Error_Handler();
 800131e:	f7ff ff0f 	bl	8001140 <Error_Handler>
	}
	uint8_t len = (rxheader.DLC > 8) ? 8 : rxheader.DLC;
 8001322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001324:	2b08      	cmp	r3, #8
 8001326:	bf28      	it	cs
 8001328:	2308      	movcs	r3, #8
 800132a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	recievedCAN.id = rxheader.StdId;
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	b29b      	uxth	r3, r3
 8001332:	81bb      	strh	r3, [r7, #12]
	recievedCAN.dlc = len;
 8001334:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001338:	73bb      	strb	r3, [r7, #14]
	memcpy(recievedCAN.data, recieved_msg, len);
 800133a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800133e:	f107 0118 	add.w	r1, r7, #24
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	3303      	adds	r3, #3
 8001348:	4618      	mov	r0, r3
 800134a:	f004 f900 	bl	800554e <memcpy>
	recievedCAN.flags = rxheader.RTR;
 800134e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001350:	b2db      	uxtb	r3, r3
 8001352:	75fb      	strb	r3, [r7, #23]

	rb_add(&recievedCAN);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fe41 	bl	8000fe0 <rb_add>
	//HAL_UART_Transmit(&huart, (uint8_t*) recieved_msg, sizeof(recieved_msg) - 1,
	//HAL_MAX_DELAY);

}
 800135e:	bf00      	nop
 8001360:	3740      	adds	r7, #64	@ 0x40
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]

}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <CANTIM2_INIT>:
void CANTIM2_INIT() {
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	htim2.Instance = TIM2;
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <CANTIM2_INIT+0x30>)
 800137e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001382:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0x18F;
 8001384:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <CANTIM2_INIT+0x30>)
 8001386:	f240 128f 	movw	r2, #399	@ 0x18f
 800138a:	605a      	str	r2, [r3, #4]
	htim2.Init.Period = 0xC34F;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <CANTIM2_INIT+0x30>)
 800138e:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001392:	60da      	str	r2, [r3, #12]

	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001394:	4804      	ldr	r0, [pc, #16]	@ (80013a8 <CANTIM2_INIT+0x30>)
 8001396:	f002 f945 	bl	8003624 <HAL_TIM_Base_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <CANTIM2_INIT+0x2c>
		Error_Handler();
 80013a0:	f7ff fece 	bl	8001140 <Error_Handler>
	}

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200002c0 	.word	0x200002c0

080013ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013bc:	d102      	bne.n	80013c4 <HAL_TIM_PeriodElapsedCallback+0x18>
		flag = 1;
 80013be:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000308 	.word	0x20000308

080013d4 <UART_INIT>:

void UART_INIT() {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	huart.Instance = USART1;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <UART_INIT+0x44>)
 80013da:	4a10      	ldr	r2, [pc, #64]	@ (800141c <UART_INIT+0x48>)
 80013dc:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate = 115200;
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <UART_INIT+0x44>)
 80013e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013e4:	605a      	str	r2, [r3, #4]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <UART_INIT+0x44>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
	huart.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <UART_INIT+0x44>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
	huart.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <UART_INIT+0x44>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f8:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <UART_INIT+0x44>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
	huart.Init.Mode = UART_MODE_TX_RX;
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <UART_INIT+0x44>)
 8001400:	220c      	movs	r2, #12
 8001402:	615a      	str	r2, [r3, #20]
	if (HAL_UART_Init(&huart) != HAL_OK) {
 8001404:	4804      	ldr	r0, [pc, #16]	@ (8001418 <UART_INIT+0x44>)
 8001406:	f002 fb43 	bl	8003a90 <HAL_UART_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <UART_INIT+0x40>
		Error_Handler();
 8001410:	f7ff fe96 	bl	8001140 <Error_Handler>
	}
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000278 	.word	0x20000278
 800141c:	40013800 	.word	0x40013800

08001420 <HAL_MspInit>:

#include "main.h"
#include "stm32f1xx_hal.h"
void HAL_MspInit(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0


  //Here we will do low level processor specific inits.
 	//1. Set up the priority grouping of the arm cortex mx processor
 	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f001 fa5b 	bl	80028e0 <HAL_NVIC_SetPriorityGrouping>
 	//2. Enable the required system exceptions of the arm cortex processor
 	SCB->SHCSR |= 0x7 << 16; //usage fault,bus fault and memory fault system exceptions
 800142a:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <HAL_MspInit+0x40>)
 800142c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142e:	4a0c      	ldr	r2, [pc, #48]	@ (8001460 <HAL_MspInit+0x40>)
 8001430:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8001434:	6253      	str	r3, [r2, #36]	@ 0x24

 	//3. configure the priority of the system exceptions
 	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	f06f 000b 	mvn.w	r0, #11
 800143e:	f001 fa5a 	bl	80028f6 <HAL_NVIC_SetPriority>
 	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	f06f 000a 	mvn.w	r0, #10
 800144a:	f001 fa54 	bl	80028f6 <HAL_NVIC_SetPriority>
 	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	f06f 0009 	mvn.w	r0, #9
 8001456:	f001 fa4e 	bl	80028f6 <HAL_NVIC_SetPriority>



}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <MX_GPIO_INIT>:
void MX_GPIO_INIT()
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioLED = {0};
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001478:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <MX_GPIO_INIT+0x54>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a0e      	ldr	r2, [pc, #56]	@ (80014b8 <MX_GPIO_INIT+0x54>)
 800147e:	f043 0310 	orr.w	r3, r3, #16
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <MX_GPIO_INIT+0x54>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0310 	and.w	r3, r3, #16
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
	gpioLED.Pin = GPIO_PIN_13;
 8001490:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001494:	60bb      	str	r3, [r7, #8]
	gpioLED.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	60fb      	str	r3, [r7, #12]
	gpioLED.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
	gpioLED.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2302      	movs	r3, #2
 80014a0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &gpioLED);
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	4619      	mov	r1, r3
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_GPIO_INIT+0x58>)
 80014aa:	f001 fb0d 	bl	8002ac8 <HAL_GPIO_Init>


}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40011000 	.word	0x40011000

080014c0 <CAN_INIT>:
void CAN_INIT()
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
	//CAN_HandleTypeDef hcan ={0};
	__HAL_RCC_CAN1_CLK_ENABLE();
 80014c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001544 <CAN_INIT+0x84>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001544 <CAN_INIT+0x84>)
 80014cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001544 <CAN_INIT+0x84>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]


	hcan.Instance = CAN1;
 80014de:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <CAN_INIT+0x88>)
 80014e0:	4a1a      	ldr	r2, [pc, #104]	@ (800154c <CAN_INIT+0x8c>)
 80014e2:	601a      	str	r2, [r3, #0]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <CAN_INIT+0x88>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
	hcan.Init.AutoBusOff = DISABLE;
 80014ea:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <CAN_INIT+0x88>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoRetransmission = ENABLE;
 80014f0:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <CAN_INIT+0x88>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	76da      	strb	r2, [r3, #27]
	hcan.Init.AutoWakeUp = DISABLE;
 80014f6:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <CAN_INIT+0x88>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	769a      	strb	r2, [r3, #26]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <CAN_INIT+0x88>)
 80014fe:	2200      	movs	r2, #0
 8001500:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8001502:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <CAN_INIT+0x88>)
 8001504:	2200      	movs	r2, #0
 8001506:	775a      	strb	r2, [r3, #29]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001508:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <CAN_INIT+0x88>)
 800150a:	2200      	movs	r2, #0
 800150c:	761a      	strb	r2, [r3, #24]

	hcan.Init.Prescaler = 5;
 800150e:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <CAN_INIT+0x88>)
 8001510:	2205      	movs	r2, #5
 8001512:	605a      	str	r2, [r3, #4]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001514:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <CAN_INIT+0x88>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800151a:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <CAN_INIT+0x88>)
 800151c:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8001520:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <CAN_INIT+0x88>)
 8001524:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001528:	615a      	str	r2, [r3, #20]
	if(HAL_CAN_Init(&hcan) != HAL_OK)
 800152a:	4807      	ldr	r0, [pc, #28]	@ (8001548 <CAN_INIT+0x88>)
 800152c:	f000 fade 	bl	8001aec <HAL_CAN_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <CAN_INIT+0x7a>
	{
		Error_Handler();
 8001536:	f7ff fe03 	bl	8001140 <Error_Handler>
	}


}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	20000250 	.word	0x20000250
 800154c:	40006400 	.word	0x40006400

08001550 <HAL_CAN_MspInit>:
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	4b27      	ldr	r3, [pc, #156]	@ (8001604 <HAL_CAN_MspInit+0xb4>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	4a26      	ldr	r2, [pc, #152]	@ (8001604 <HAL_CAN_MspInit+0xb4>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6193      	str	r3, [r2, #24]
 8001572:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <HAL_CAN_MspInit+0xb4>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_CAN1_CLK_ENABLE();
 800157e:	4b21      	ldr	r3, [pc, #132]	@ (8001604 <HAL_CAN_MspInit+0xb4>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	4a20      	ldr	r2, [pc, #128]	@ (8001604 <HAL_CAN_MspInit+0xb4>)
 8001584:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001588:	61d3      	str	r3, [r2, #28]
 800158a:	4b1e      	ldr	r3, [pc, #120]	@ (8001604 <HAL_CAN_MspInit+0xb4>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]

	    GPIO_InitStruct.Pin  = GPIO_PIN_11;
 8001596:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800159a:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4619      	mov	r1, r3
 80015aa:	4817      	ldr	r0, [pc, #92]	@ (8001608 <HAL_CAN_MspInit+0xb8>)
 80015ac:	f001 fa8c 	bl	8002ac8 <HAL_GPIO_Init>

	    // PA12 - CAN_TX (AF push-pull)
	    GPIO_InitStruct.Pin   = GPIO_PIN_12;
 80015b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b4:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4619      	mov	r1, r3
 80015c4:	4810      	ldr	r0, [pc, #64]	@ (8001608 <HAL_CAN_MspInit+0xb8>)
 80015c6:	f001 fa7f 	bl	8002ac8 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 15, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	210f      	movs	r1, #15
 80015ce:	2013      	movs	r0, #19
 80015d0:	f001 f991 	bl	80028f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 15, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	210f      	movs	r1, #15
 80015d8:	2014      	movs	r0, #20
 80015da:	f001 f98c 	bl	80028f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	210f      	movs	r1, #15
 80015e2:	2016      	movs	r0, #22
 80015e4:	f001 f987 	bl	80028f6 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80015e8:	2013      	movs	r0, #19
 80015ea:	f001 f9a0 	bl	800292e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80015ee:	2014      	movs	r0, #20
 80015f0:	f001 f99d 	bl	800292e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80015f4:	2016      	movs	r0, #22
 80015f6:	f001 f99a 	bl	800292e <HAL_NVIC_EnableIRQ>


}
 80015fa:	bf00      	nop
 80015fc:	3720      	adds	r7, #32
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	40010800 	.word	0x40010800

0800160c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart ={0};
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]

	//1. here we will do the low level inits of the usart2 peripheral
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <HAL_UART_MspInit+0x98>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	4a1f      	ldr	r2, [pc, #124]	@ (80016a4 <HAL_UART_MspInit+0x98>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6193      	str	r3, [r2, #24]
 800162e:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <HAL_UART_MspInit+0x98>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_USART1_CLK_ENABLE();
 800163a:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <HAL_UART_MspInit+0x98>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	4a19      	ldr	r2, [pc, #100]	@ (80016a4 <HAL_UART_MspInit+0x98>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001644:	6193      	str	r3, [r2, #24]
 8001646:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <HAL_UART_MspInit+0x98>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
	//2. do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_9;
 8001652:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001656:	613b      	str	r3, [r7, #16]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	617b      	str	r3, [r7, #20]
	gpio_uart.Pull= GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
	gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	4619      	mov	r1, r3
 800166a:	480f      	ldr	r0, [pc, #60]	@ (80016a8 <HAL_UART_MspInit+0x9c>)
 800166c:	f001 fa2c 	bl	8002ac8 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_10;
 8001670:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001674:	613b      	str	r3, [r7, #16]
	gpio_uart.Mode = GPIO_MODE_INPUT;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
	gpio_uart.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	4619      	mov	r1, r3
 8001684:	4808      	ldr	r0, [pc, #32]	@ (80016a8 <HAL_UART_MspInit+0x9c>)
 8001686:	f001 fa1f 	bl	8002ac8 <HAL_GPIO_Init>

	//3. enable the irq and set up the priority (NVIC settings
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800168a:	2025      	movs	r0, #37	@ 0x25
 800168c:	f001 f94f 	bl	800292e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	210f      	movs	r1, #15
 8001694:	2025      	movs	r0, #37	@ 0x25
 8001696:	f001 f92e 	bl	80028f6 <HAL_NVIC_SetPriority>
}
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010800 	.word	0x40010800

080016ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM2_CLK_ENABLE();
 80016b4:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <HAL_TIM_Base_MspInit+0x38>)
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <HAL_TIM_Base_MspInit+0x38>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	61d3      	str	r3, [r2, #28]
 80016c0:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <HAL_TIM_Base_MspInit+0x38>)
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]

	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016cc:	201c      	movs	r0, #28
 80016ce:	f001 f92e 	bl	800292e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	210f      	movs	r1, #15
 80016d6:	201c      	movs	r0, #28
 80016d8:	f001 f90d 	bl	80028f6 <HAL_NVIC_SetPriority>
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000

080016e8 <USART1_IRQHandler>:
/**
 * @brief This function handles Non maskable interrupt.
 */


void USART1_IRQHandler(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <USART1_IRQHandler+0x10>)
 80016ee:	f002 fadf 	bl	8003cb0 <HAL_UART_IRQHandler>
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000278 	.word	0x20000278

080016fc <USB_HP_CAN1_TX_IRQHandler>:

void USB_HP_CAN1_TX_IRQHandler(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8001700:	4802      	ldr	r0, [pc, #8]	@ (800170c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001702:	f000 fe10 	bl	8002326 <HAL_CAN_IRQHandler>
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000250 	.word	0x20000250

08001710 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void) {
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001716:	f000 fe06 	bl	8002326 <HAL_CAN_IRQHandler>
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000250 	.word	0x20000250

08001724 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <CAN1_RX1_IRQHandler+0x10>)
 800172a:	f000 fdfc 	bl	8002326 <HAL_CAN_IRQHandler>
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000250 	.word	0x20000250

08001738 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <CAN1_SCE_IRQHandler+0x10>)
 800173e:	f000 fdf2 	bl	8002326 <HAL_CAN_IRQHandler>
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000250 	.word	0x20000250

0800174c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void) {
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 8001750:	4802      	ldr	r0, [pc, #8]	@ (800175c <TIM2_IRQHandler+0x10>)
 8001752:	f002 f809 	bl	8003768 <HAL_TIM_IRQHandler>
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200002c0 	.word	0x200002c0

08001760 <NMI_Handler>:
void NMI_Handler(void) {
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <NMI_Handler+0x4>

08001768 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <MemManage_Handler+0x4>

08001778 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <UsageFault_Handler+0x4>

08001788 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80017b0:	f000 f95c 	bl	8001a6c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <ITM_SendChar+0x44>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a0d      	ldr	r2, [pc, #52]	@ (80017fc <ITM_SendChar+0x44>)
 80017c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017cc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <ITM_SendChar+0x48>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001800 <ITM_SendChar+0x48>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80017da:	bf00      	nop
 80017dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f8      	beq.n	80017dc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80017ea:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	6013      	str	r3, [r2, #0]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	e000edfc 	.word	0xe000edfc
 8001800:	e0000e00 	.word	0xe0000e00

08001804 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return 1;
 8001808:	2301      	movs	r3, #1
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr

08001812 <_kill>:

int _kill(int pid, int sig)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800181c:	f003 fe5c 	bl	80054d8 <__errno>
 8001820:	4603      	mov	r3, r0
 8001822:	2216      	movs	r2, #22
 8001824:	601a      	str	r2, [r3, #0]
  return -1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <_exit>:

void _exit (int status)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800183a:	f04f 31ff 	mov.w	r1, #4294967295
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ffe7 	bl	8001812 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <_exit+0x12>

08001848 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	e00a      	b.n	8001870 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800185a:	f3af 8000 	nop.w
 800185e:	4601      	mov	r1, r0
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	60ba      	str	r2, [r7, #8]
 8001866:	b2ca      	uxtb	r2, r1
 8001868:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	dbf0      	blt.n	800185a <_read+0x12>
  }

  return len;
 8001878:	687b      	ldr	r3, [r7, #4]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	e009      	b.n	80018a8 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	60ba      	str	r2, [r7, #8]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff8b 	bl	80017b8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	3301      	adds	r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	dbf1      	blt.n	8001894 <_write+0x12>
  }
  return len;
 80018b0:	687b      	ldr	r3, [r7, #4]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_close>:

int _close(int file)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018e0:	605a      	str	r2, [r3, #4]
  return 0;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <_isatty>:

int _isatty(int file)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001902:	b480      	push	{r7}
 8001904:	b085      	sub	sp, #20
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
	...

0800191c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001924:	4a14      	ldr	r2, [pc, #80]	@ (8001978 <_sbrk+0x5c>)
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <_sbrk+0x60>)
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001930:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001938:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <_sbrk+0x64>)
 800193a:	4a12      	ldr	r2, [pc, #72]	@ (8001984 <_sbrk+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193e:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d207      	bcs.n	800195c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800194c:	f003 fdc4 	bl	80054d8 <__errno>
 8001950:	4603      	mov	r3, r0
 8001952:	220c      	movs	r2, #12
 8001954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	e009      	b.n	8001970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800195c:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001962:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a05      	ldr	r2, [pc, #20]	@ (8001980 <_sbrk+0x64>)
 800196c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20005000 	.word	0x20005000
 800197c:	00000400 	.word	0x00000400
 8001980:	200003dc 	.word	0x200003dc
 8001984:	20000530 	.word	0x20000530

08001988 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001994:	f7ff fff8 	bl	8001988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001998:	480b      	ldr	r0, [pc, #44]	@ (80019c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800199a:	490c      	ldr	r1, [pc, #48]	@ (80019cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800199c:	4a0c      	ldr	r2, [pc, #48]	@ (80019d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a0:	e002      	b.n	80019a8 <LoopCopyDataInit>

080019a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a6:	3304      	adds	r3, #4

080019a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ac:	d3f9      	bcc.n	80019a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ae:	4a09      	ldr	r2, [pc, #36]	@ (80019d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019b0:	4c09      	ldr	r4, [pc, #36]	@ (80019d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b4:	e001      	b.n	80019ba <LoopFillZerobss>

080019b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b8:	3204      	adds	r2, #4

080019ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019bc:	d3fb      	bcc.n	80019b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019be:	f003 fd91 	bl	80054e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019c2:	f7ff fb71 	bl	80010a8 <main>
  bx lr
 80019c6:	4770      	bx	lr
  ldr r0, =_sdata
 80019c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019cc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019d0:	080078ec 	.word	0x080078ec
  ldr r2, =_sbss
 80019d4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019d8:	20000530 	.word	0x20000530

080019dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC1_2_IRQHandler>
	...

080019e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e4:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <HAL_Init+0x28>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a07      	ldr	r2, [pc, #28]	@ (8001a08 <HAL_Init+0x28>)
 80019ea:	f043 0310 	orr.w	r3, r3, #16
 80019ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f0:	2003      	movs	r0, #3
 80019f2:	f000 ff75 	bl	80028e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f6:	200f      	movs	r0, #15
 80019f8:	f000 f808 	bl	8001a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019fc:	f7ff fd10 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40022000 	.word	0x40022000

08001a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_InitTick+0x54>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_InitTick+0x58>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 ff8d 	bl	800294a <HAL_SYSTICK_Config>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00e      	b.n	8001a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d80a      	bhi.n	8001a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a40:	2200      	movs	r2, #0
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f000 ff55 	bl	80028f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a4c:	4a06      	ldr	r2, [pc, #24]	@ (8001a68 <HAL_InitTick+0x5c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000008 	.word	0x20000008
 8001a68:	20000004 	.word	0x20000004

08001a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a70:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <HAL_IncTick+0x1c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <HAL_IncTick+0x20>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a03      	ldr	r2, [pc, #12]	@ (8001a8c <HAL_IncTick+0x20>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	200003e0 	.word	0x200003e0

08001a90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return uwTick;
 8001a94:	4b02      	ldr	r3, [pc, #8]	@ (8001aa0 <HAL_GetTick+0x10>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	200003e0 	.word	0x200003e0

08001aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff fff0 	bl	8001a90 <HAL_GetTick>
 8001ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d005      	beq.n	8001aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001abe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <HAL_Delay+0x44>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aca:	bf00      	nop
 8001acc:	f7ff ffe0 	bl	8001a90 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d8f7      	bhi.n	8001acc <HAL_Delay+0x28>
  {
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000008 	.word	0x20000008

08001aec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0ed      	b.n	8001cda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d102      	bne.n	8001b10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fd20 	bl	8001550 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b20:	f7ff ffb6 	bl	8001a90 <HAL_GetTick>
 8001b24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b26:	e012      	b.n	8001b4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b28:	f7ff ffb2 	bl	8001a90 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b0a      	cmp	r3, #10
 8001b34:	d90b      	bls.n	8001b4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2205      	movs	r2, #5
 8001b46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e0c5      	b.n	8001cda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0e5      	beq.n	8001b28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0202 	bic.w	r2, r2, #2
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b6c:	f7ff ff90 	bl	8001a90 <HAL_GetTick>
 8001b70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b72:	e012      	b.n	8001b9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b74:	f7ff ff8c 	bl	8001a90 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b0a      	cmp	r3, #10
 8001b80:	d90b      	bls.n	8001b9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b86:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2205      	movs	r2, #5
 8001b92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e09f      	b.n	8001cda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1e5      	bne.n	8001b74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7e1b      	ldrb	r3, [r3, #24]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d108      	bne.n	8001bc2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e007      	b.n	8001bd2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	7e5b      	ldrb	r3, [r3, #25]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d108      	bne.n	8001bec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	e007      	b.n	8001bfc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7e9b      	ldrb	r3, [r3, #26]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d108      	bne.n	8001c16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0220 	orr.w	r2, r2, #32
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e007      	b.n	8001c26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0220 	bic.w	r2, r2, #32
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7edb      	ldrb	r3, [r3, #27]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d108      	bne.n	8001c40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0210 	bic.w	r2, r2, #16
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e007      	b.n	8001c50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0210 	orr.w	r2, r2, #16
 8001c4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7f1b      	ldrb	r3, [r3, #28]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d108      	bne.n	8001c6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0208 	orr.w	r2, r2, #8
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e007      	b.n	8001c7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0208 	bic.w	r2, r2, #8
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7f5b      	ldrb	r3, [r3, #29]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d108      	bne.n	8001c94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 0204 	orr.w	r2, r2, #4
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e007      	b.n	8001ca4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0204 	bic.w	r2, r2, #4
 8001ca2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	ea42 0103 	orr.w	r1, r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	1e5a      	subs	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b087      	sub	sp, #28
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001cfa:	7cfb      	ldrb	r3, [r7, #19]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d003      	beq.n	8001d08 <HAL_CAN_ConfigFilter+0x26>
 8001d00:	7cfb      	ldrb	r3, [r7, #19]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	f040 80aa 	bne.w	8001e5c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	2201      	movs	r2, #1
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	401a      	ands	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d123      	bne.n	8001d8a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	401a      	ands	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d64:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3248      	adds	r2, #72	@ 0x48
 8001d6a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d7e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d80:	6979      	ldr	r1, [r7, #20]
 8001d82:	3348      	adds	r3, #72	@ 0x48
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	440b      	add	r3, r1
 8001d88:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d122      	bne.n	8001dd8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001db2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3248      	adds	r2, #72	@ 0x48
 8001db8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dcc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dce:	6979      	ldr	r1, [r7, #20]
 8001dd0:	3348      	adds	r3, #72	@ 0x48
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	440b      	add	r3, r1
 8001dd6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001df2:	e007      	b.n	8001e04 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d109      	bne.n	8001e20 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001e1e:	e007      	b.n	8001e30 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d107      	bne.n	8001e48 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	431a      	orrs	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e4e:	f023 0201 	bic.w	r2, r3, #1
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	e006      	b.n	8001e6a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e60:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
  }
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	371c      	adds	r7, #28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d12e      	bne.n	8001ee6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ea0:	f7ff fdf6 	bl	8001a90 <HAL_GetTick>
 8001ea4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ea6:	e012      	b.n	8001ece <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ea8:	f7ff fdf2 	bl	8001a90 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b0a      	cmp	r3, #10
 8001eb4:	d90b      	bls.n	8001ece <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2205      	movs	r2, #5
 8001ec6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e012      	b.n	8001ef4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1e5      	bne.n	8001ea8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e006      	b.n	8001ef4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eea:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
  }
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	@ 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f10:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f1a:	7ffb      	ldrb	r3, [r7, #31]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d003      	beq.n	8001f28 <HAL_CAN_AddTxMessage+0x2c>
 8001f20:	7ffb      	ldrb	r3, [r7, #31]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	f040 80ad 	bne.w	8002082 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10a      	bne.n	8001f48 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d105      	bne.n	8001f48 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8095 	beq.w	8002072 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	0e1b      	lsrs	r3, r3, #24
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f52:	2201      	movs	r2, #1
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10d      	bne.n	8001f80 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f6e:	68f9      	ldr	r1, [r7, #12]
 8001f70:	6809      	ldr	r1, [r1, #0]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	3318      	adds	r3, #24
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	440b      	add	r3, r1
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	e00f      	b.n	8001fa0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f8a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f90:	68f9      	ldr	r1, [r7, #12]
 8001f92:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f94:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3318      	adds	r3, #24
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	440b      	add	r3, r1
 8001f9e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6819      	ldr	r1, [r3, #0]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3318      	adds	r3, #24
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	440b      	add	r3, r1
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	7d1b      	ldrb	r3, [r3, #20]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d111      	bne.n	8001fe0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	3318      	adds	r3, #24
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3304      	adds	r3, #4
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	6811      	ldr	r1, [r2, #0]
 8001fd0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	3318      	adds	r3, #24
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	440b      	add	r3, r1
 8001fdc:	3304      	adds	r3, #4
 8001fde:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3307      	adds	r3, #7
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	061a      	lsls	r2, r3, #24
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3306      	adds	r3, #6
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	041b      	lsls	r3, r3, #16
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3305      	adds	r3, #5
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	3204      	adds	r2, #4
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	4610      	mov	r0, r2
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	6811      	ldr	r1, [r2, #0]
 8002008:	ea43 0200 	orr.w	r2, r3, r0
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	440b      	add	r3, r1
 8002012:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002016:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3303      	adds	r3, #3
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	061a      	lsls	r2, r3, #24
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3302      	adds	r3, #2
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	041b      	lsls	r3, r3, #16
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3301      	adds	r3, #1
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	4313      	orrs	r3, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	4610      	mov	r0, r2
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	6811      	ldr	r1, [r2, #0]
 800203e:	ea43 0200 	orr.w	r2, r3, r0
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	440b      	add	r3, r1
 8002048:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800204c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3318      	adds	r3, #24
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	4413      	add	r3, r2
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	6811      	ldr	r1, [r2, #0]
 8002060:	f043 0201 	orr.w	r2, r3, #1
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	3318      	adds	r3, #24
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	440b      	add	r3, r1
 800206c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	e00e      	b.n	8002090 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e006      	b.n	8002090 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
  }
}
 8002090:	4618      	mov	r0, r3
 8002092:	3724      	adds	r7, #36	@ 0x24
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800209a:	b480      	push	{r7}
 800209c:	b087      	sub	sp, #28
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ae:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d003      	beq.n	80020be <HAL_CAN_GetRxMessage+0x24>
 80020b6:	7dfb      	ldrb	r3, [r7, #23]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	f040 8103 	bne.w	80022c4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10e      	bne.n	80020e2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d116      	bne.n	8002100 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e0f7      	b.n	80022d2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d107      	bne.n	8002100 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0e8      	b.n	80022d2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	331b      	adds	r3, #27
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	4413      	add	r3, r2
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0204 	and.w	r2, r3, #4
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10c      	bne.n	8002138 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	331b      	adds	r3, #27
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	4413      	add	r3, r2
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	0d5b      	lsrs	r3, r3, #21
 800212e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e00b      	b.n	8002150 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	331b      	adds	r3, #27
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	4413      	add	r3, r2
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	08db      	lsrs	r3, r3, #3
 8002148:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	331b      	adds	r3, #27
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	4413      	add	r3, r2
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0202 	and.w	r2, r3, #2
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	331b      	adds	r3, #27
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	4413      	add	r3, r2
 8002172:	3304      	adds	r3, #4
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2208      	movs	r2, #8
 8002182:	611a      	str	r2, [r3, #16]
 8002184:	e00b      	b.n	800219e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	331b      	adds	r3, #27
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	4413      	add	r3, r2
 8002192:	3304      	adds	r3, #4
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 020f 	and.w	r2, r3, #15
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	331b      	adds	r3, #27
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	4413      	add	r3, r2
 80021aa:	3304      	adds	r3, #4
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	331b      	adds	r3, #27
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	4413      	add	r3, r2
 80021c2:	3304      	adds	r3, #4
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0c1b      	lsrs	r3, r3, #16
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0a1a      	lsrs	r2, r3, #8
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	4413      	add	r3, r2
 8002208:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	0c1a      	lsrs	r2, r3, #16
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	3302      	adds	r3, #2
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	4413      	add	r3, r2
 8002222:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0e1a      	lsrs	r2, r3, #24
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	3303      	adds	r3, #3
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	4413      	add	r3, r2
 800223c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	3304      	adds	r3, #4
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	4413      	add	r3, r2
 8002254:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	0a1a      	lsrs	r2, r3, #8
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	3305      	adds	r3, #5
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	4413      	add	r3, r2
 800226e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0c1a      	lsrs	r2, r3, #16
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	3306      	adds	r3, #6
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	4413      	add	r3, r2
 8002288:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	0e1a      	lsrs	r2, r3, #24
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	3307      	adds	r3, #7
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d108      	bne.n	80022b0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0220 	orr.w	r2, r2, #32
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	e007      	b.n	80022c0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0220 	orr.w	r2, r2, #32
 80022be:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	e006      	b.n	80022d2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
  }
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ec:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d002      	beq.n	80022fa <HAL_CAN_ActivateNotification+0x1e>
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d109      	bne.n	800230e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6959      	ldr	r1, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	e006      	b.n	800231c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002312:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
  }
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b08a      	sub	sp, #40	@ 0x28
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d07c      	beq.n	8002466 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d023      	beq.n	80023be <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2201      	movs	r2, #1
 800237c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7fe ff85 	bl	8001298 <HAL_CAN_TxMailbox0CompleteCallback>
 800238e:	e016      	b.n	80023be <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d004      	beq.n	80023a4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023a2:	e00c      	b.n	80023be <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d004      	beq.n	80023b8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023b6:	e002      	b.n	80023be <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f97d 	bl	80026b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d024      	beq.n	8002412 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f959 	bl	8002694 <HAL_CAN_TxMailbox1CompleteCallback>
 80023e2:	e016      	b.n	8002412 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d004      	beq.n	80023f8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023f6:	e00c      	b.n	8002412 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d004      	beq.n	800240c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
 800240a:	e002      	b.n	8002412 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f95c 	bl	80026ca <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d024      	beq.n	8002466 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002424:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f938 	bl	80026a6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002436:	e016      	b.n	8002466 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d004      	beq.n	800244c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002448:	627b      	str	r3, [r7, #36]	@ 0x24
 800244a:	e00c      	b.n	8002466 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d004      	beq.n	8002460 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
 800245e:	e002      	b.n	8002466 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f93b 	bl	80026dc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00c      	beq.n	800248a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f003 0310 	and.w	r3, r3, #16
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2210      	movs	r2, #16
 8002488:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00b      	beq.n	80024ac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d006      	beq.n	80024ac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2208      	movs	r2, #8
 80024a4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f921 	bl	80026ee <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7fe ff0b 	bl	80012e0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00c      	beq.n	80024ee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2210      	movs	r2, #16
 80024ec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00b      	beq.n	8002510 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d006      	beq.n	8002510 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2208      	movs	r2, #8
 8002508:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f901 	bl	8002712 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f8e9 	bl	8002700 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	d006      	beq.n	8002550 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2210      	movs	r2, #16
 8002548:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f8ea 	bl	8002724 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2208      	movs	r2, #8
 800256a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f8e2 	bl	8002736 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d07b      	beq.n	8002674 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d072      	beq.n	800266c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	f043 0302 	orr.w	r3, r3, #2
 80025bc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d043      	beq.n	800266c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d03e      	beq.n	800266c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025f4:	2b60      	cmp	r3, #96	@ 0x60
 80025f6:	d02b      	beq.n	8002650 <HAL_CAN_IRQHandler+0x32a>
 80025f8:	2b60      	cmp	r3, #96	@ 0x60
 80025fa:	d82e      	bhi.n	800265a <HAL_CAN_IRQHandler+0x334>
 80025fc:	2b50      	cmp	r3, #80	@ 0x50
 80025fe:	d022      	beq.n	8002646 <HAL_CAN_IRQHandler+0x320>
 8002600:	2b50      	cmp	r3, #80	@ 0x50
 8002602:	d82a      	bhi.n	800265a <HAL_CAN_IRQHandler+0x334>
 8002604:	2b40      	cmp	r3, #64	@ 0x40
 8002606:	d019      	beq.n	800263c <HAL_CAN_IRQHandler+0x316>
 8002608:	2b40      	cmp	r3, #64	@ 0x40
 800260a:	d826      	bhi.n	800265a <HAL_CAN_IRQHandler+0x334>
 800260c:	2b30      	cmp	r3, #48	@ 0x30
 800260e:	d010      	beq.n	8002632 <HAL_CAN_IRQHandler+0x30c>
 8002610:	2b30      	cmp	r3, #48	@ 0x30
 8002612:	d822      	bhi.n	800265a <HAL_CAN_IRQHandler+0x334>
 8002614:	2b10      	cmp	r3, #16
 8002616:	d002      	beq.n	800261e <HAL_CAN_IRQHandler+0x2f8>
 8002618:	2b20      	cmp	r3, #32
 800261a:	d005      	beq.n	8002628 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800261c:	e01d      	b.n	800265a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	f043 0308 	orr.w	r3, r3, #8
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002626:	e019      	b.n	800265c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262a:	f043 0310 	orr.w	r3, r3, #16
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002630:	e014      	b.n	800265c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	f043 0320 	orr.w	r3, r3, #32
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800263a:	e00f      	b.n	800265c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002644:	e00a      	b.n	800265c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800264c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800264e:	e005      	b.n	800265c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002658:	e000      	b.n	800265c <HAL_CAN_IRQHandler+0x336>
            break;
 800265a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800266a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2204      	movs	r2, #4
 8002672:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002676:	2b00      	cmp	r3, #0
 8002678:	d008      	beq.n	800268c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe fe6d 	bl	8001366 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800268c:	bf00      	nop
 800268e:	3728      	adds	r7, #40	@ 0x28
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002758:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <__NVIC_SetPriorityGrouping+0x44>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002764:	4013      	ands	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002770:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800277a:	4a04      	ldr	r2, [pc, #16]	@ (800278c <__NVIC_SetPriorityGrouping+0x44>)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	60d3      	str	r3, [r2, #12]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002794:	4b04      	ldr	r3, [pc, #16]	@ (80027a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	f003 0307 	and.w	r3, r3, #7
}
 800279e:	4618      	mov	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	db0b      	blt.n	80027d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	f003 021f 	and.w	r2, r3, #31
 80027c4:	4906      	ldr	r1, [pc, #24]	@ (80027e0 <__NVIC_EnableIRQ+0x34>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2001      	movs	r0, #1
 80027ce:	fa00 f202 	lsl.w	r2, r0, r2
 80027d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	e000e100 	.word	0xe000e100

080027e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db0a      	blt.n	800280e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	490c      	ldr	r1, [pc, #48]	@ (8002830 <__NVIC_SetPriority+0x4c>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	440b      	add	r3, r1
 8002808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800280c:	e00a      	b.n	8002824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4908      	ldr	r1, [pc, #32]	@ (8002834 <__NVIC_SetPriority+0x50>)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	3b04      	subs	r3, #4
 800281c:	0112      	lsls	r2, r2, #4
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	440b      	add	r3, r1
 8002822:	761a      	strb	r2, [r3, #24]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000e100 	.word	0xe000e100
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	@ 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f1c3 0307 	rsb	r3, r3, #7
 8002852:	2b04      	cmp	r3, #4
 8002854:	bf28      	it	cs
 8002856:	2304      	movcs	r3, #4
 8002858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3304      	adds	r3, #4
 800285e:	2b06      	cmp	r3, #6
 8002860:	d902      	bls.n	8002868 <NVIC_EncodePriority+0x30>
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3b03      	subs	r3, #3
 8002866:	e000      	b.n	800286a <NVIC_EncodePriority+0x32>
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	f04f 32ff 	mov.w	r2, #4294967295
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	401a      	ands	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002880:	f04f 31ff 	mov.w	r1, #4294967295
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	43d9      	mvns	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	4313      	orrs	r3, r2
         );
}
 8002892:	4618      	mov	r0, r3
 8002894:	3724      	adds	r7, #36	@ 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028ac:	d301      	bcc.n	80028b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00f      	b.n	80028d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b2:	4a0a      	ldr	r2, [pc, #40]	@ (80028dc <SysTick_Config+0x40>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ba:	210f      	movs	r1, #15
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	f7ff ff90 	bl	80027e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c4:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <SysTick_Config+0x40>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ca:	4b04      	ldr	r3, [pc, #16]	@ (80028dc <SysTick_Config+0x40>)
 80028cc:	2207      	movs	r2, #7
 80028ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	e000e010 	.word	0xe000e010

080028e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ff2d 	bl	8002748 <__NVIC_SetPriorityGrouping>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002908:	f7ff ff42 	bl	8002790 <__NVIC_GetPriorityGrouping>
 800290c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f7ff ff90 	bl	8002838 <NVIC_EncodePriority>
 8002918:	4602      	mov	r2, r0
 800291a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff5f 	bl	80027e4 <__NVIC_SetPriority>
}
 8002926:	bf00      	nop
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff35 	bl	80027ac <__NVIC_EnableIRQ>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ffa2 	bl	800289c <SysTick_Config>
 8002958:	4603      	mov	r3, r0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002962:	b480      	push	{r7}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d008      	beq.n	800298c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2204      	movs	r2, #4
 800297e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e020      	b.n	80029ce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 020e 	bic.w	r2, r2, #14
 800299a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b4:	2101      	movs	r1, #1
 80029b6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d005      	beq.n	80029fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2204      	movs	r2, #4
 80029f4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
 80029fa:	e051      	b.n	8002aa0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 020e 	bic.w	r2, r2, #14
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a22      	ldr	r2, [pc, #136]	@ (8002aac <HAL_DMA_Abort_IT+0xd4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d029      	beq.n	8002a7a <HAL_DMA_Abort_IT+0xa2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a21      	ldr	r2, [pc, #132]	@ (8002ab0 <HAL_DMA_Abort_IT+0xd8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d022      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x9e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab4 <HAL_DMA_Abort_IT+0xdc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01a      	beq.n	8002a70 <HAL_DMA_Abort_IT+0x98>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ab8 <HAL_DMA_Abort_IT+0xe0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d012      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x92>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1c      	ldr	r2, [pc, #112]	@ (8002abc <HAL_DMA_Abort_IT+0xe4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00a      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x8c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac0 <HAL_DMA_Abort_IT+0xe8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d102      	bne.n	8002a5e <HAL_DMA_Abort_IT+0x86>
 8002a58:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002a5c:	e00e      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a62:	e00b      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a68:	e008      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a6e:	e005      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a74:	e002      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a76:	2310      	movs	r3, #16
 8002a78:	e000      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	4a11      	ldr	r2, [pc, #68]	@ (8002ac4 <HAL_DMA_Abort_IT+0xec>)
 8002a7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
    } 
  }
  return status;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40020008 	.word	0x40020008
 8002ab0:	4002001c 	.word	0x4002001c
 8002ab4:	40020030 	.word	0x40020030
 8002ab8:	40020044 	.word	0x40020044
 8002abc:	40020058 	.word	0x40020058
 8002ac0:	4002006c 	.word	0x4002006c
 8002ac4:	40020000 	.word	0x40020000

08002ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b08b      	sub	sp, #44	@ 0x2c
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ada:	e169      	b.n	8002db0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002adc:	2201      	movs	r2, #1
 8002ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	f040 8158 	bne.w	8002daa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4a9a      	ldr	r2, [pc, #616]	@ (8002d68 <HAL_GPIO_Init+0x2a0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d05e      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
 8002b04:	4a98      	ldr	r2, [pc, #608]	@ (8002d68 <HAL_GPIO_Init+0x2a0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d875      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b0a:	4a98      	ldr	r2, [pc, #608]	@ (8002d6c <HAL_GPIO_Init+0x2a4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d058      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
 8002b10:	4a96      	ldr	r2, [pc, #600]	@ (8002d6c <HAL_GPIO_Init+0x2a4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d86f      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b16:	4a96      	ldr	r2, [pc, #600]	@ (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d052      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
 8002b1c:	4a94      	ldr	r2, [pc, #592]	@ (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d869      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b22:	4a94      	ldr	r2, [pc, #592]	@ (8002d74 <HAL_GPIO_Init+0x2ac>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d04c      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
 8002b28:	4a92      	ldr	r2, [pc, #584]	@ (8002d74 <HAL_GPIO_Init+0x2ac>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d863      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b2e:	4a92      	ldr	r2, [pc, #584]	@ (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d046      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
 8002b34:	4a90      	ldr	r2, [pc, #576]	@ (8002d78 <HAL_GPIO_Init+0x2b0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d85d      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b3a:	2b12      	cmp	r3, #18
 8002b3c:	d82a      	bhi.n	8002b94 <HAL_GPIO_Init+0xcc>
 8002b3e:	2b12      	cmp	r3, #18
 8002b40:	d859      	bhi.n	8002bf6 <HAL_GPIO_Init+0x12e>
 8002b42:	a201      	add	r2, pc, #4	@ (adr r2, 8002b48 <HAL_GPIO_Init+0x80>)
 8002b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b48:	08002bc3 	.word	0x08002bc3
 8002b4c:	08002b9d 	.word	0x08002b9d
 8002b50:	08002baf 	.word	0x08002baf
 8002b54:	08002bf1 	.word	0x08002bf1
 8002b58:	08002bf7 	.word	0x08002bf7
 8002b5c:	08002bf7 	.word	0x08002bf7
 8002b60:	08002bf7 	.word	0x08002bf7
 8002b64:	08002bf7 	.word	0x08002bf7
 8002b68:	08002bf7 	.word	0x08002bf7
 8002b6c:	08002bf7 	.word	0x08002bf7
 8002b70:	08002bf7 	.word	0x08002bf7
 8002b74:	08002bf7 	.word	0x08002bf7
 8002b78:	08002bf7 	.word	0x08002bf7
 8002b7c:	08002bf7 	.word	0x08002bf7
 8002b80:	08002bf7 	.word	0x08002bf7
 8002b84:	08002bf7 	.word	0x08002bf7
 8002b88:	08002bf7 	.word	0x08002bf7
 8002b8c:	08002ba5 	.word	0x08002ba5
 8002b90:	08002bb9 	.word	0x08002bb9
 8002b94:	4a79      	ldr	r2, [pc, #484]	@ (8002d7c <HAL_GPIO_Init+0x2b4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d013      	beq.n	8002bc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b9a:	e02c      	b.n	8002bf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	623b      	str	r3, [r7, #32]
          break;
 8002ba2:	e029      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	623b      	str	r3, [r7, #32]
          break;
 8002bac:	e024      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	623b      	str	r3, [r7, #32]
          break;
 8002bb6:	e01f      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	330c      	adds	r3, #12
 8002bbe:	623b      	str	r3, [r7, #32]
          break;
 8002bc0:	e01a      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d102      	bne.n	8002bd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bca:	2304      	movs	r3, #4
 8002bcc:	623b      	str	r3, [r7, #32]
          break;
 8002bce:	e013      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d105      	bne.n	8002be4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bd8:	2308      	movs	r3, #8
 8002bda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69fa      	ldr	r2, [r7, #28]
 8002be0:	611a      	str	r2, [r3, #16]
          break;
 8002be2:	e009      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002be4:	2308      	movs	r3, #8
 8002be6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	615a      	str	r2, [r3, #20]
          break;
 8002bee:	e003      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	623b      	str	r3, [r7, #32]
          break;
 8002bf4:	e000      	b.n	8002bf8 <HAL_GPIO_Init+0x130>
          break;
 8002bf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2bff      	cmp	r3, #255	@ 0xff
 8002bfc:	d801      	bhi.n	8002c02 <HAL_GPIO_Init+0x13a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	e001      	b.n	8002c06 <HAL_GPIO_Init+0x13e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3304      	adds	r3, #4
 8002c06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2bff      	cmp	r3, #255	@ 0xff
 8002c0c:	d802      	bhi.n	8002c14 <HAL_GPIO_Init+0x14c>
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	e002      	b.n	8002c1a <HAL_GPIO_Init+0x152>
 8002c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c16:	3b08      	subs	r3, #8
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	210f      	movs	r1, #15
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	fa01 f303 	lsl.w	r3, r1, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	6a39      	ldr	r1, [r7, #32]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	fa01 f303 	lsl.w	r3, r1, r3
 8002c34:	431a      	orrs	r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 80b1 	beq.w	8002daa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c48:	4b4d      	ldr	r3, [pc, #308]	@ (8002d80 <HAL_GPIO_Init+0x2b8>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	4a4c      	ldr	r2, [pc, #304]	@ (8002d80 <HAL_GPIO_Init+0x2b8>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6193      	str	r3, [r2, #24]
 8002c54:	4b4a      	ldr	r3, [pc, #296]	@ (8002d80 <HAL_GPIO_Init+0x2b8>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c60:	4a48      	ldr	r2, [pc, #288]	@ (8002d84 <HAL_GPIO_Init+0x2bc>)
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	3302      	adds	r3, #2
 8002c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	220f      	movs	r2, #15
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4013      	ands	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a40      	ldr	r2, [pc, #256]	@ (8002d88 <HAL_GPIO_Init+0x2c0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d013      	beq.n	8002cb4 <HAL_GPIO_Init+0x1ec>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a3f      	ldr	r2, [pc, #252]	@ (8002d8c <HAL_GPIO_Init+0x2c4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00d      	beq.n	8002cb0 <HAL_GPIO_Init+0x1e8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a3e      	ldr	r2, [pc, #248]	@ (8002d90 <HAL_GPIO_Init+0x2c8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d007      	beq.n	8002cac <HAL_GPIO_Init+0x1e4>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a3d      	ldr	r2, [pc, #244]	@ (8002d94 <HAL_GPIO_Init+0x2cc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_GPIO_Init+0x1e0>
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e006      	b.n	8002cb6 <HAL_GPIO_Init+0x1ee>
 8002ca8:	2304      	movs	r3, #4
 8002caa:	e004      	b.n	8002cb6 <HAL_GPIO_Init+0x1ee>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e002      	b.n	8002cb6 <HAL_GPIO_Init+0x1ee>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_GPIO_Init+0x1ee>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb8:	f002 0203 	and.w	r2, r2, #3
 8002cbc:	0092      	lsls	r2, r2, #2
 8002cbe:	4093      	lsls	r3, r2
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cc6:	492f      	ldr	r1, [pc, #188]	@ (8002d84 <HAL_GPIO_Init+0x2bc>)
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cca:	089b      	lsrs	r3, r3, #2
 8002ccc:	3302      	adds	r3, #2
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d006      	beq.n	8002cee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	492c      	ldr	r1, [pc, #176]	@ (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	608b      	str	r3, [r1, #8]
 8002cec:	e006      	b.n	8002cfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cee:	4b2a      	ldr	r3, [pc, #168]	@ (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	4928      	ldr	r1, [pc, #160]	@ (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d006      	beq.n	8002d16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d08:	4b23      	ldr	r3, [pc, #140]	@ (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	4922      	ldr	r1, [pc, #136]	@ (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60cb      	str	r3, [r1, #12]
 8002d14:	e006      	b.n	8002d24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d16:	4b20      	ldr	r3, [pc, #128]	@ (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	491e      	ldr	r1, [pc, #120]	@ (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d006      	beq.n	8002d3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d30:	4b19      	ldr	r3, [pc, #100]	@ (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	4918      	ldr	r1, [pc, #96]	@ (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
 8002d3c:	e006      	b.n	8002d4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d3e:	4b16      	ldr	r3, [pc, #88]	@ (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	4914      	ldr	r1, [pc, #80]	@ (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d021      	beq.n	8002d9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d58:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	490e      	ldr	r1, [pc, #56]	@ (8002d98 <HAL_GPIO_Init+0x2d0>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
 8002d64:	e021      	b.n	8002daa <HAL_GPIO_Init+0x2e2>
 8002d66:	bf00      	nop
 8002d68:	10320000 	.word	0x10320000
 8002d6c:	10310000 	.word	0x10310000
 8002d70:	10220000 	.word	0x10220000
 8002d74:	10210000 	.word	0x10210000
 8002d78:	10120000 	.word	0x10120000
 8002d7c:	10110000 	.word	0x10110000
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40010000 	.word	0x40010000
 8002d88:	40010800 	.word	0x40010800
 8002d8c:	40010c00 	.word	0x40010c00
 8002d90:	40011000 	.word	0x40011000
 8002d94:	40011400 	.word	0x40011400
 8002d98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <HAL_GPIO_Init+0x304>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	4909      	ldr	r1, [pc, #36]	@ (8002dcc <HAL_GPIO_Init+0x304>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	3301      	adds	r3, #1
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f47f ae8e 	bne.w	8002adc <HAL_GPIO_Init+0x14>
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	372c      	adds	r7, #44	@ 0x2c
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	40010400 	.word	0x40010400

08002dd0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002de2:	887a      	ldrh	r2, [r7, #2]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4013      	ands	r3, r2
 8002de8:	041a      	lsls	r2, r3, #16
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	43d9      	mvns	r1, r3
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	400b      	ands	r3, r1
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	611a      	str	r2, [r3, #16]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e272      	b.n	80032fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 8087 	beq.w	8002f32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e24:	4b92      	ldr	r3, [pc, #584]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 030c 	and.w	r3, r3, #12
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d00c      	beq.n	8002e4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e30:	4b8f      	ldr	r3, [pc, #572]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 030c 	and.w	r3, r3, #12
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d112      	bne.n	8002e62 <HAL_RCC_OscConfig+0x5e>
 8002e3c:	4b8c      	ldr	r3, [pc, #560]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e48:	d10b      	bne.n	8002e62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4a:	4b89      	ldr	r3, [pc, #548]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d06c      	beq.n	8002f30 <HAL_RCC_OscConfig+0x12c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d168      	bne.n	8002f30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e24c      	b.n	80032fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e6a:	d106      	bne.n	8002e7a <HAL_RCC_OscConfig+0x76>
 8002e6c:	4b80      	ldr	r3, [pc, #512]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a7f      	ldr	r2, [pc, #508]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	e02e      	b.n	8002ed8 <HAL_RCC_OscConfig+0xd4>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCC_OscConfig+0x98>
 8002e82:	4b7b      	ldr	r3, [pc, #492]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a7a      	ldr	r2, [pc, #488]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	4b78      	ldr	r3, [pc, #480]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a77      	ldr	r2, [pc, #476]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e01d      	b.n	8002ed8 <HAL_RCC_OscConfig+0xd4>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0xbc>
 8002ea6:	4b72      	ldr	r3, [pc, #456]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a71      	ldr	r2, [pc, #452]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b6f      	ldr	r3, [pc, #444]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a6e      	ldr	r2, [pc, #440]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e00b      	b.n	8002ed8 <HAL_RCC_OscConfig+0xd4>
 8002ec0:	4b6b      	ldr	r3, [pc, #428]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a6a      	ldr	r2, [pc, #424]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002ec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	4b68      	ldr	r3, [pc, #416]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a67      	ldr	r2, [pc, #412]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ed6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d013      	beq.n	8002f08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fdd6 	bl	8001a90 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7fe fdd2 	bl	8001a90 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	@ 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e200      	b.n	80032fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	4b5d      	ldr	r3, [pc, #372]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0xe4>
 8002f06:	e014      	b.n	8002f32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fe fdc2 	bl	8001a90 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f10:	f7fe fdbe 	bl	8001a90 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	@ 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e1ec      	b.n	80032fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f22:	4b53      	ldr	r3, [pc, #332]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x10c>
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d063      	beq.n	8003006 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f3e:	4b4c      	ldr	r3, [pc, #304]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f4a:	4b49      	ldr	r3, [pc, #292]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d11c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x18c>
 8002f56:	4b46      	ldr	r3, [pc, #280]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d116      	bne.n	8002f90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f62:	4b43      	ldr	r3, [pc, #268]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_RCC_OscConfig+0x176>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d001      	beq.n	8002f7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e1c0      	b.n	80032fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4939      	ldr	r1, [pc, #228]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8e:	e03a      	b.n	8003006 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f98:	4b36      	ldr	r3, [pc, #216]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9e:	f7fe fd77 	bl	8001a90 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa6:	f7fe fd73 	bl	8001a90 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e1a1      	b.n	80032fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb8:	4b2d      	ldr	r3, [pc, #180]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4927      	ldr	r1, [pc, #156]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]
 8002fd8:	e015      	b.n	8003006 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fda:	4b26      	ldr	r3, [pc, #152]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fd56 	bl	8001a90 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe8:	f7fe fd52 	bl	8001a90 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e180      	b.n	80032fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d03a      	beq.n	8003088 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d019      	beq.n	800304e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800301a:	4b17      	ldr	r3, [pc, #92]	@ (8003078 <HAL_RCC_OscConfig+0x274>)
 800301c:	2201      	movs	r2, #1
 800301e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003020:	f7fe fd36 	bl	8001a90 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003028:	f7fe fd32 	bl	8001a90 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e160      	b.n	80032fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303a:	4b0d      	ldr	r3, [pc, #52]	@ (8003070 <HAL_RCC_OscConfig+0x26c>)
 800303c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003046:	2001      	movs	r0, #1
 8003048:	f000 face 	bl	80035e8 <RCC_Delay>
 800304c:	e01c      	b.n	8003088 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304e:	4b0a      	ldr	r3, [pc, #40]	@ (8003078 <HAL_RCC_OscConfig+0x274>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003054:	f7fe fd1c 	bl	8001a90 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800305a:	e00f      	b.n	800307c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800305c:	f7fe fd18 	bl	8001a90 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d908      	bls.n	800307c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e146      	b.n	80032fc <HAL_RCC_OscConfig+0x4f8>
 800306e:	bf00      	nop
 8003070:	40021000 	.word	0x40021000
 8003074:	42420000 	.word	0x42420000
 8003078:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307c:	4b92      	ldr	r3, [pc, #584]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e9      	bne.n	800305c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80a6 	beq.w	80031e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003096:	2300      	movs	r3, #0
 8003098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309a:	4b8b      	ldr	r3, [pc, #556]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10d      	bne.n	80030c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a6:	4b88      	ldr	r3, [pc, #544]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4a87      	ldr	r2, [pc, #540]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b0:	61d3      	str	r3, [r2, #28]
 80030b2:	4b85      	ldr	r3, [pc, #532]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030be:	2301      	movs	r3, #1
 80030c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c2:	4b82      	ldr	r3, [pc, #520]	@ (80032cc <HAL_RCC_OscConfig+0x4c8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d118      	bne.n	8003100 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ce:	4b7f      	ldr	r3, [pc, #508]	@ (80032cc <HAL_RCC_OscConfig+0x4c8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a7e      	ldr	r2, [pc, #504]	@ (80032cc <HAL_RCC_OscConfig+0x4c8>)
 80030d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030da:	f7fe fcd9 	bl	8001a90 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e2:	f7fe fcd5 	bl	8001a90 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b64      	cmp	r3, #100	@ 0x64
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e103      	b.n	80032fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f4:	4b75      	ldr	r3, [pc, #468]	@ (80032cc <HAL_RCC_OscConfig+0x4c8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d106      	bne.n	8003116 <HAL_RCC_OscConfig+0x312>
 8003108:	4b6f      	ldr	r3, [pc, #444]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	4a6e      	ldr	r2, [pc, #440]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	6213      	str	r3, [r2, #32]
 8003114:	e02d      	b.n	8003172 <HAL_RCC_OscConfig+0x36e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0x334>
 800311e:	4b6a      	ldr	r3, [pc, #424]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	4a69      	ldr	r2, [pc, #420]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	f023 0301 	bic.w	r3, r3, #1
 8003128:	6213      	str	r3, [r2, #32]
 800312a:	4b67      	ldr	r3, [pc, #412]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4a66      	ldr	r2, [pc, #408]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 8003130:	f023 0304 	bic.w	r3, r3, #4
 8003134:	6213      	str	r3, [r2, #32]
 8003136:	e01c      	b.n	8003172 <HAL_RCC_OscConfig+0x36e>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	2b05      	cmp	r3, #5
 800313e:	d10c      	bne.n	800315a <HAL_RCC_OscConfig+0x356>
 8003140:	4b61      	ldr	r3, [pc, #388]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	4a60      	ldr	r2, [pc, #384]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 8003146:	f043 0304 	orr.w	r3, r3, #4
 800314a:	6213      	str	r3, [r2, #32]
 800314c:	4b5e      	ldr	r3, [pc, #376]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	4a5d      	ldr	r2, [pc, #372]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6213      	str	r3, [r2, #32]
 8003158:	e00b      	b.n	8003172 <HAL_RCC_OscConfig+0x36e>
 800315a:	4b5b      	ldr	r3, [pc, #364]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	4a5a      	ldr	r2, [pc, #360]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	6213      	str	r3, [r2, #32]
 8003166:	4b58      	ldr	r3, [pc, #352]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	4a57      	ldr	r2, [pc, #348]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	f023 0304 	bic.w	r3, r3, #4
 8003170:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d015      	beq.n	80031a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317a:	f7fe fc89 	bl	8001a90 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003180:	e00a      	b.n	8003198 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003182:	f7fe fc85 	bl	8001a90 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003190:	4293      	cmp	r3, r2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e0b1      	b.n	80032fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003198:	4b4b      	ldr	r3, [pc, #300]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0ee      	beq.n	8003182 <HAL_RCC_OscConfig+0x37e>
 80031a4:	e014      	b.n	80031d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a6:	f7fe fc73 	bl	8001a90 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ac:	e00a      	b.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ae:	f7fe fc6f 	bl	8001a90 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031bc:	4293      	cmp	r3, r2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e09b      	b.n	80032fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c4:	4b40      	ldr	r3, [pc, #256]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1ee      	bne.n	80031ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d105      	bne.n	80031e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d6:	4b3c      	ldr	r3, [pc, #240]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	4a3b      	ldr	r2, [pc, #236]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8087 	beq.w	80032fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ec:	4b36      	ldr	r3, [pc, #216]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d061      	beq.n	80032bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d146      	bne.n	800328e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003200:	4b33      	ldr	r3, [pc, #204]	@ (80032d0 <HAL_RCC_OscConfig+0x4cc>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003206:	f7fe fc43 	bl	8001a90 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320e:	f7fe fc3f 	bl	8001a90 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e06d      	b.n	80032fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003220:	4b29      	ldr	r3, [pc, #164]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f0      	bne.n	800320e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003234:	d108      	bne.n	8003248 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003236:	4b24      	ldr	r3, [pc, #144]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	4921      	ldr	r1, [pc, #132]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	4313      	orrs	r3, r2
 8003246:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003248:	4b1f      	ldr	r3, [pc, #124]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a19      	ldr	r1, [r3, #32]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003258:	430b      	orrs	r3, r1
 800325a:	491b      	ldr	r1, [pc, #108]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003260:	4b1b      	ldr	r3, [pc, #108]	@ (80032d0 <HAL_RCC_OscConfig+0x4cc>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7fe fc13 	bl	8001a90 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326e:	f7fe fc0f 	bl	8001a90 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e03d      	b.n	80032fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003280:	4b11      	ldr	r3, [pc, #68]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x46a>
 800328c:	e035      	b.n	80032fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328e:	4b10      	ldr	r3, [pc, #64]	@ (80032d0 <HAL_RCC_OscConfig+0x4cc>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fe fbfc 	bl	8001a90 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329c:	f7fe fbf8 	bl	8001a90 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e026      	b.n	80032fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ae:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <HAL_RCC_OscConfig+0x4c4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x498>
 80032ba:	e01e      	b.n	80032fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d107      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e019      	b.n	80032fc <HAL_RCC_OscConfig+0x4f8>
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40007000 	.word	0x40007000
 80032d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003304 <HAL_RCC_OscConfig+0x500>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d106      	bne.n	80032f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d001      	beq.n	80032fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40021000 	.word	0x40021000

08003308 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0d0      	b.n	80034be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800331c:	4b6a      	ldr	r3, [pc, #424]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d910      	bls.n	800334c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332a:	4b67      	ldr	r3, [pc, #412]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 0207 	bic.w	r2, r3, #7
 8003332:	4965      	ldr	r1, [pc, #404]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b63      	ldr	r3, [pc, #396]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0b8      	b.n	80034be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d020      	beq.n	800339a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003364:	4b59      	ldr	r3, [pc, #356]	@ (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a58      	ldr	r2, [pc, #352]	@ (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800336e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800337c:	4b53      	ldr	r3, [pc, #332]	@ (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4a52      	ldr	r2, [pc, #328]	@ (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003386:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003388:	4b50      	ldr	r3, [pc, #320]	@ (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	494d      	ldr	r1, [pc, #308]	@ (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	4313      	orrs	r3, r2
 8003398:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d040      	beq.n	8003428 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d107      	bne.n	80033be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	4b47      	ldr	r3, [pc, #284]	@ (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d115      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e07f      	b.n	80034be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d107      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c6:	4b41      	ldr	r3, [pc, #260]	@ (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d109      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e073      	b.n	80034be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d6:	4b3d      	ldr	r3, [pc, #244]	@ (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e06b      	b.n	80034be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033e6:	4b39      	ldr	r3, [pc, #228]	@ (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f023 0203 	bic.w	r2, r3, #3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	4936      	ldr	r1, [pc, #216]	@ (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033f8:	f7fe fb4a 	bl	8001a90 <HAL_GetTick>
 80033fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003400:	f7fe fb46 	bl	8001a90 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e053      	b.n	80034be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003416:	4b2d      	ldr	r3, [pc, #180]	@ (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 020c 	and.w	r2, r3, #12
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	429a      	cmp	r2, r3
 8003426:	d1eb      	bne.n	8003400 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003428:	4b27      	ldr	r3, [pc, #156]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d210      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b24      	ldr	r3, [pc, #144]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 0207 	bic.w	r2, r3, #7
 800343e:	4922      	ldr	r1, [pc, #136]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b20      	ldr	r3, [pc, #128]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e032      	b.n	80034be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003464:	4b19      	ldr	r3, [pc, #100]	@ (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4916      	ldr	r1, [pc, #88]	@ (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003482:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	490e      	ldr	r1, [pc, #56]	@ (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003496:	f000 f821 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 800349a:	4602      	mov	r2, r0
 800349c:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <HAL_RCC_ClockConfig+0x1c4>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	490a      	ldr	r1, [pc, #40]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c8>)
 80034a8:	5ccb      	ldrb	r3, [r1, r3]
 80034aa:	fa22 f303 	lsr.w	r3, r2, r3
 80034ae:	4a09      	ldr	r2, [pc, #36]	@ (80034d4 <HAL_RCC_ClockConfig+0x1cc>)
 80034b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034b2:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <HAL_RCC_ClockConfig+0x1d0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe faa8 	bl	8001a0c <HAL_InitTick>

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40022000 	.word	0x40022000
 80034cc:	40021000 	.word	0x40021000
 80034d0:	0800753c 	.word	0x0800753c
 80034d4:	20000000 	.word	0x20000000
 80034d8:	20000004 	.word	0x20000004

080034dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	2300      	movs	r3, #0
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x94>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b04      	cmp	r3, #4
 8003504:	d002      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x30>
 8003506:	2b08      	cmp	r3, #8
 8003508:	d003      	beq.n	8003512 <HAL_RCC_GetSysClockFreq+0x36>
 800350a:	e027      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800350c:	4b19      	ldr	r3, [pc, #100]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x98>)
 800350e:	613b      	str	r3, [r7, #16]
      break;
 8003510:	e027      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	0c9b      	lsrs	r3, r3, #18
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	4a17      	ldr	r2, [pc, #92]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x9c>)
 800351c:	5cd3      	ldrb	r3, [r2, r3]
 800351e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d010      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800352a:	4b11      	ldr	r3, [pc, #68]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x94>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	0c5b      	lsrs	r3, r3, #17
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	4a11      	ldr	r2, [pc, #68]	@ (800357c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003536:	5cd3      	ldrb	r3, [r2, r3]
 8003538:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a0d      	ldr	r2, [pc, #52]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x98>)
 800353e:	fb03 f202 	mul.w	r2, r3, r2
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	e004      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a0c      	ldr	r2, [pc, #48]	@ (8003580 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003550:	fb02 f303 	mul.w	r3, r2, r3
 8003554:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	613b      	str	r3, [r7, #16]
      break;
 800355a:	e002      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800355c:	4b05      	ldr	r3, [pc, #20]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x98>)
 800355e:	613b      	str	r3, [r7, #16]
      break;
 8003560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003562:	693b      	ldr	r3, [r7, #16]
}
 8003564:	4618      	mov	r0, r3
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40021000 	.word	0x40021000
 8003574:	007a1200 	.word	0x007a1200
 8003578:	08007554 	.word	0x08007554
 800357c:	08007564 	.word	0x08007564
 8003580:	003d0900 	.word	0x003d0900

08003584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003588:	4b02      	ldr	r3, [pc, #8]	@ (8003594 <HAL_RCC_GetHCLKFreq+0x10>)
 800358a:	681b      	ldr	r3, [r3, #0]
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr
 8003594:	20000000 	.word	0x20000000

08003598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800359c:	f7ff fff2 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 80035a0:	4602      	mov	r2, r0
 80035a2:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	0a1b      	lsrs	r3, r3, #8
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	4903      	ldr	r1, [pc, #12]	@ (80035bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ae:	5ccb      	ldrb	r3, [r1, r3]
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40021000 	.word	0x40021000
 80035bc:	0800754c 	.word	0x0800754c

080035c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035c4:	f7ff ffde 	bl	8003584 <HAL_RCC_GetHCLKFreq>
 80035c8:	4602      	mov	r2, r0
 80035ca:	4b05      	ldr	r3, [pc, #20]	@ (80035e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	0adb      	lsrs	r3, r3, #11
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	4903      	ldr	r1, [pc, #12]	@ (80035e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035d6:	5ccb      	ldrb	r3, [r1, r3]
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40021000 	.word	0x40021000
 80035e4:	0800754c 	.word	0x0800754c

080035e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035f0:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <RCC_Delay+0x34>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003620 <RCC_Delay+0x38>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	0a5b      	lsrs	r3, r3, #9
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003604:	bf00      	nop
  }
  while (Delay --);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1e5a      	subs	r2, r3, #1
 800360a:	60fa      	str	r2, [r7, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f9      	bne.n	8003604 <RCC_Delay+0x1c>
}
 8003610:	bf00      	nop
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	20000000 	.word	0x20000000
 8003620:	10624dd3 	.word	0x10624dd3

08003624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e041      	b.n	80036ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fe f82e 	bl	80016ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3304      	adds	r3, #4
 8003660:	4619      	mov	r1, r3
 8003662:	4610      	mov	r0, r2
 8003664:	f000 f994 	bl	8003990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d001      	beq.n	80036dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e03a      	b.n	8003752 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a18      	ldr	r2, [pc, #96]	@ (800375c <HAL_TIM_Base_Start_IT+0x98>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00e      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x58>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003706:	d009      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x58>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a14      	ldr	r2, [pc, #80]	@ (8003760 <HAL_TIM_Base_Start_IT+0x9c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d004      	beq.n	800371c <HAL_TIM_Base_Start_IT+0x58>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a13      	ldr	r2, [pc, #76]	@ (8003764 <HAL_TIM_Base_Start_IT+0xa0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d111      	bne.n	8003740 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b06      	cmp	r3, #6
 800372c:	d010      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0201 	orr.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373e:	e007      	b.n	8003750 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr
 800375c:	40012c00 	.word	0x40012c00
 8003760:	40000400 	.word	0x40000400
 8003764:	40000800 	.word	0x40000800

08003768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d020      	beq.n	80037cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01b      	beq.n	80037cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0202 	mvn.w	r2, #2
 800379c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8d1 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 80037b8:	e005      	b.n	80037c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8c4 	bl	8003948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f8d3 	bl	800396c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d020      	beq.n	8003818 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01b      	beq.n	8003818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0204 	mvn.w	r2, #4
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f8ab 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f89e 	bl	8003948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f8ad 	bl	800396c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d020      	beq.n	8003864 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01b      	beq.n	8003864 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0208 	mvn.w	r2, #8
 8003834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2204      	movs	r2, #4
 800383a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f885 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 8003850:	e005      	b.n	800385e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f878 	bl	8003948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f887 	bl	800396c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	d020      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01b      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0210 	mvn.w	r2, #16
 8003880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2208      	movs	r2, #8
 8003886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f85f 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f852 	bl	8003948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f861 	bl	800396c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00c      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d007      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0201 	mvn.w	r2, #1
 80038cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fd fd6c 	bl	80013ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00c      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f8c3 	bl	8003a7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00c      	beq.n	800391c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f831 	bl	800397e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00c      	beq.n	8003940 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0220 	mvn.w	r2, #32
 8003938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f896 	bl	8003a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003a60 <TIM_Base_SetConfig+0xd0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00b      	beq.n	80039c0 <TIM_Base_SetConfig+0x30>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ae:	d007      	beq.n	80039c0 <TIM_Base_SetConfig+0x30>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003a64 <TIM_Base_SetConfig+0xd4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d003      	beq.n	80039c0 <TIM_Base_SetConfig+0x30>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003a68 <TIM_Base_SetConfig+0xd8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d108      	bne.n	80039d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a22      	ldr	r2, [pc, #136]	@ (8003a60 <TIM_Base_SetConfig+0xd0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00b      	beq.n	80039f2 <TIM_Base_SetConfig+0x62>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039e0:	d007      	beq.n	80039f2 <TIM_Base_SetConfig+0x62>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003a64 <TIM_Base_SetConfig+0xd4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d003      	beq.n	80039f2 <TIM_Base_SetConfig+0x62>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003a68 <TIM_Base_SetConfig+0xd8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d108      	bne.n	8003a04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a0d      	ldr	r2, [pc, #52]	@ (8003a60 <TIM_Base_SetConfig+0xd0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d103      	bne.n	8003a38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f023 0201 	bic.w	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	611a      	str	r2, [r3, #16]
  }
}
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr
 8003a60:	40012c00 	.word	0x40012c00
 8003a64:	40000400 	.word	0x40000400
 8003a68:	40000800 	.word	0x40000800

08003a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr

08003a7e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr

08003a90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e042      	b.n	8003b28 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd fda8 	bl	800160c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2224      	movs	r2, #36	@ 0x24
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ad2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fd97 	bl	8004608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ae8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695a      	ldr	r2, [r3, #20]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003af8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	@ 0x28
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d175      	bne.n	8003c3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <HAL_UART_Transmit+0x2c>
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e06e      	b.n	8003c3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2221      	movs	r2, #33	@ 0x21
 8003b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b6e:	f7fd ff8f 	bl	8001a90 <HAL_GetTick>
 8003b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	88fa      	ldrh	r2, [r7, #6]
 8003b78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	88fa      	ldrh	r2, [r7, #6]
 8003b7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b88:	d108      	bne.n	8003b9c <HAL_UART_Transmit+0x6c>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d104      	bne.n	8003b9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	e003      	b.n	8003ba4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ba4:	e02e      	b.n	8003c04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2200      	movs	r2, #0
 8003bae:	2180      	movs	r1, #128	@ 0x80
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fb35 	bl	8004220 <UART_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e03a      	b.n	8003c3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10b      	bne.n	8003be6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	3302      	adds	r3, #2
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	e007      	b.n	8003bf6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	781a      	ldrb	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1cb      	bne.n	8003ba6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2140      	movs	r1, #64	@ 0x40
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fb01 	bl	8004220 <UART_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e006      	b.n	8003c3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e000      	b.n	8003c3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b085      	sub	sp, #20
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	4613      	mov	r3, r2
 8003c52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d121      	bne.n	8003ca4 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_UART_Transmit_IT+0x26>
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e01a      	b.n	8003ca6 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	88fa      	ldrh	r2, [r7, #6]
 8003c7a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	88fa      	ldrh	r2, [r7, #6]
 8003c80:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2221      	movs	r2, #33	@ 0x21
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c9e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e000      	b.n	8003ca6 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
  }
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b0ba      	sub	sp, #232	@ 0xe8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10f      	bne.n	8003d16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_UART_IRQHandler+0x66>
 8003d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fbbc 	bl	800448c <UART_Receive_IT>
      return;
 8003d14:	e25b      	b.n	80041ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80de 	beq.w	8003edc <HAL_UART_IRQHandler+0x22c>
 8003d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d106      	bne.n	8003d3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80d1 	beq.w	8003edc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00b      	beq.n	8003d5e <HAL_UART_IRQHandler+0xae>
 8003d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00b      	beq.n	8003d82 <HAL_UART_IRQHandler+0xd2>
 8003d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7a:	f043 0202 	orr.w	r2, r3, #2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00b      	beq.n	8003da6 <HAL_UART_IRQHandler+0xf6>
 8003d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9e:	f043 0204 	orr.w	r2, r3, #4
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d011      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x126>
 8003db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d105      	bne.n	8003dca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dce:	f043 0208 	orr.w	r2, r3, #8
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 81f2 	beq.w	80041c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_UART_IRQHandler+0x14e>
 8003dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fb47 	bl	800448c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bf14      	ite	ne
 8003e0c:	2301      	movne	r3, #1
 8003e0e:	2300      	moveq	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d103      	bne.n	8003e2a <HAL_UART_IRQHandler+0x17a>
 8003e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d04f      	beq.n	8003eca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fa51 	bl	80042d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d041      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3314      	adds	r3, #20
 8003e44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3314      	adds	r3, #20
 8003e66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1d9      	bne.n	8003e3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d013      	beq.n	8003eba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e96:	4a7e      	ldr	r2, [pc, #504]	@ (8004090 <HAL_UART_IRQHandler+0x3e0>)
 8003e98:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fe fd9a 	bl	80029d8 <HAL_DMA_Abort_IT>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d016      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb8:	e00e      	b.n	8003ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f99c 	bl	80041f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec0:	e00a      	b.n	8003ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f998 	bl	80041f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	e006      	b.n	8003ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f994 	bl	80041f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003ed6:	e175      	b.n	80041c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	bf00      	nop
    return;
 8003eda:	e173      	b.n	80041c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	f040 814f 	bne.w	8004184 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eea:	f003 0310 	and.w	r3, r3, #16
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 8148 	beq.w	8004184 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 8141 	beq.w	8004184 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 80b6 	beq.w	8004094 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8145 	beq.w	80041c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f46:	429a      	cmp	r2, r3
 8003f48:	f080 813e 	bcs.w	80041c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	f000 8088 	beq.w	8004070 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	330c      	adds	r3, #12
 8003f66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	330c      	adds	r3, #12
 8003f88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f8c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f94:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f98:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1d9      	bne.n	8003f60 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3314      	adds	r3, #20
 8003fb2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003fbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3314      	adds	r3, #20
 8003fcc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fd0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003fd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003fd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003fe2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e1      	bne.n	8003fac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3314      	adds	r3, #20
 8003fee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ff8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ffa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3314      	adds	r3, #20
 8004008:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800400c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800400e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004012:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800401a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e3      	bne.n	8003fe8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	330c      	adds	r3, #12
 8004034:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800403e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004040:	f023 0310 	bic.w	r3, r3, #16
 8004044:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004052:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004054:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004058:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004060:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1e3      	bne.n	800402e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe fc79 	bl	8002962 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800407e:	b29b      	uxth	r3, r3
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	b29b      	uxth	r3, r3
 8004084:	4619      	mov	r1, r3
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f8bf 	bl	800420a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800408c:	e09c      	b.n	80041c8 <HAL_UART_IRQHandler+0x518>
 800408e:	bf00      	nop
 8004090:	08004397 	.word	0x08004397
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800409c:	b29b      	uxth	r3, r3
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 808e 	beq.w	80041cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8089 	beq.w	80041cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	330c      	adds	r3, #12
 80040c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	330c      	adds	r3, #12
 80040da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80040de:	647a      	str	r2, [r7, #68]	@ 0x44
 80040e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e3      	bne.n	80040ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3314      	adds	r3, #20
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	623b      	str	r3, [r7, #32]
   return(result);
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	f023 0301 	bic.w	r3, r3, #1
 8004108:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3314      	adds	r3, #20
 8004112:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004116:	633a      	str	r2, [r7, #48]	@ 0x30
 8004118:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800411c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e3      	bne.n	80040f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	60fb      	str	r3, [r7, #12]
   return(result);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0310 	bic.w	r3, r3, #16
 800414e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800415c:	61fa      	str	r2, [r7, #28]
 800415e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	69b9      	ldr	r1, [r7, #24]
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	617b      	str	r3, [r7, #20]
   return(result);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e3      	bne.n	8004138 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004176:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800417a:	4619      	mov	r1, r3
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f844 	bl	800420a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004182:	e023      	b.n	80041cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800418c:	2b00      	cmp	r3, #0
 800418e:	d009      	beq.n	80041a4 <HAL_UART_IRQHandler+0x4f4>
 8004190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f90e 	bl	80043be <UART_Transmit_IT>
    return;
 80041a2:	e014      	b.n	80041ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00e      	beq.n	80041ce <HAL_UART_IRQHandler+0x51e>
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f94d 	bl	800445c <UART_EndTransmit_IT>
    return;
 80041c2:	e004      	b.n	80041ce <HAL_UART_IRQHandler+0x51e>
    return;
 80041c4:	bf00      	nop
 80041c6:	e002      	b.n	80041ce <HAL_UART_IRQHandler+0x51e>
      return;
 80041c8:	bf00      	nop
 80041ca:	e000      	b.n	80041ce <HAL_UART_IRQHandler+0x51e>
      return;
 80041cc:	bf00      	nop
  }
}
 80041ce:	37e8      	adds	r7, #232	@ 0xe8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr

0800420a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	460b      	mov	r3, r1
 8004214:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004230:	e03b      	b.n	80042aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d037      	beq.n	80042aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423a:	f7fd fc29 	bl	8001a90 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	6a3a      	ldr	r2, [r7, #32]
 8004246:	429a      	cmp	r2, r3
 8004248:	d302      	bcc.n	8004250 <UART_WaitOnFlagUntilTimeout+0x30>
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e03a      	b.n	80042ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d023      	beq.n	80042aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b80      	cmp	r3, #128	@ 0x80
 8004266:	d020      	beq.n	80042aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b40      	cmp	r3, #64	@ 0x40
 800426c:	d01d      	beq.n	80042aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b08      	cmp	r3, #8
 800427a:	d116      	bne.n	80042aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f81d 	bl	80042d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2208      	movs	r2, #8
 800429c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e00f      	b.n	80042ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4013      	ands	r3, r2
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	bf0c      	ite	eq
 80042ba:	2301      	moveq	r3, #1
 80042bc:	2300      	movne	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d0b4      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b095      	sub	sp, #84	@ 0x54
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	330c      	adds	r3, #12
 80042e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80042fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004300:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e5      	bne.n	80042da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3314      	adds	r3, #20
 8004314:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	61fb      	str	r3, [r7, #28]
   return(result);
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f023 0301 	bic.w	r3, r3, #1
 8004324:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3314      	adds	r3, #20
 800432c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800432e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004330:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004334:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800433c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e5      	bne.n	800430e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004346:	2b01      	cmp	r3, #1
 8004348:	d119      	bne.n	800437e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	330c      	adds	r3, #12
 8004350:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	60bb      	str	r3, [r7, #8]
   return(result);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f023 0310 	bic.w	r3, r3, #16
 8004360:	647b      	str	r3, [r7, #68]	@ 0x44
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	330c      	adds	r3, #12
 8004368:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800436a:	61ba      	str	r2, [r7, #24]
 800436c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	6979      	ldr	r1, [r7, #20]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	613b      	str	r3, [r7, #16]
   return(result);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e5      	bne.n	800434a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800438c:	bf00      	nop
 800438e:	3754      	adds	r7, #84	@ 0x54
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f7ff ff21 	bl	80041f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b21      	cmp	r3, #33	@ 0x21
 80043d0:	d13e      	bne.n	8004450 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043da:	d114      	bne.n	8004406 <UART_Transmit_IT+0x48>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d110      	bne.n	8004406 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	1c9a      	adds	r2, r3, #2
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	621a      	str	r2, [r3, #32]
 8004404:	e008      	b.n	8004418 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	1c59      	adds	r1, r3, #1
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6211      	str	r1, [r2, #32]
 8004410:	781a      	ldrb	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29b      	uxth	r3, r3
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	4619      	mov	r1, r3
 8004426:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10f      	bne.n	800444c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800443a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800444a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	e000      	b.n	8004452 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004450:	2302      	movs	r3, #2
  }
}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004472:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff fea9 	bl	80041d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08c      	sub	sp, #48	@ 0x30
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b22      	cmp	r3, #34	@ 0x22
 800449e:	f040 80ae 	bne.w	80045fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044aa:	d117      	bne.n	80044dc <UART_Receive_IT+0x50>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d113      	bne.n	80044dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d4:	1c9a      	adds	r2, r3, #2
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80044da:	e026      	b.n	800452a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ee:	d007      	beq.n	8004500 <UART_Receive_IT+0x74>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <UART_Receive_IT+0x82>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d106      	bne.n	800450e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	e008      	b.n	8004520 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800451a:	b2da      	uxtb	r2, r3
 800451c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800451e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29b      	uxth	r3, r3
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	4619      	mov	r1, r3
 8004538:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800453a:	2b00      	cmp	r3, #0
 800453c:	d15d      	bne.n	80045fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0220 	bic.w	r2, r2, #32
 800454c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800455c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0201 	bic.w	r2, r2, #1
 800456c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004580:	2b01      	cmp	r3, #1
 8004582:	d135      	bne.n	80045f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	330c      	adds	r3, #12
 8004590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	613b      	str	r3, [r7, #16]
   return(result);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f023 0310 	bic.w	r3, r3, #16
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	330c      	adds	r3, #12
 80045a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045aa:	623a      	str	r2, [r7, #32]
 80045ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	69f9      	ldr	r1, [r7, #28]
 80045b0:	6a3a      	ldr	r2, [r7, #32]
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e5      	bne.n	800458a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b10      	cmp	r3, #16
 80045ca:	d10a      	bne.n	80045e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045e6:	4619      	mov	r1, r3
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff fe0e 	bl	800420a <HAL_UARTEx_RxEventCallback>
 80045ee:	e002      	b.n	80045f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff fdf8 	bl	80041e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e002      	b.n	8004600 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e000      	b.n	8004600 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045fe:	2302      	movs	r3, #2
  }
}
 8004600:	4618      	mov	r0, r3
 8004602:	3730      	adds	r7, #48	@ 0x30
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004642:	f023 030c 	bic.w	r3, r3, #12
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	430b      	orrs	r3, r1
 800464e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a2c      	ldr	r2, [pc, #176]	@ (800471c <UART_SetConfig+0x114>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d103      	bne.n	8004678 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004670:	f7fe ffa6 	bl	80035c0 <HAL_RCC_GetPCLK2Freq>
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	e002      	b.n	800467e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004678:	f7fe ff8e 	bl	8003598 <HAL_RCC_GetPCLK1Freq>
 800467c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	009a      	lsls	r2, r3, #2
 8004688:	441a      	add	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	4a22      	ldr	r2, [pc, #136]	@ (8004720 <UART_SetConfig+0x118>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	0119      	lsls	r1, r3, #4
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	009a      	lsls	r2, r3, #2
 80046a8:	441a      	add	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004720 <UART_SetConfig+0x118>)
 80046b6:	fba3 0302 	umull	r0, r3, r3, r2
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	2064      	movs	r0, #100	@ 0x64
 80046be:	fb00 f303 	mul.w	r3, r0, r3
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	3332      	adds	r3, #50	@ 0x32
 80046c8:	4a15      	ldr	r2, [pc, #84]	@ (8004720 <UART_SetConfig+0x118>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046d4:	4419      	add	r1, r3
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	009a      	lsls	r2, r3, #2
 80046e0:	441a      	add	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <UART_SetConfig+0x118>)
 80046ee:	fba3 0302 	umull	r0, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	2064      	movs	r0, #100	@ 0x64
 80046f6:	fb00 f303 	mul.w	r3, r0, r3
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	3332      	adds	r3, #50	@ 0x32
 8004700:	4a07      	ldr	r2, [pc, #28]	@ (8004720 <UART_SetConfig+0x118>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	f003 020f 	and.w	r2, r3, #15
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	440a      	add	r2, r1
 8004712:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40013800 	.word	0x40013800
 8004720:	51eb851f 	.word	0x51eb851f

08004724 <__cvt>:
 8004724:	2b00      	cmp	r3, #0
 8004726:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800472a:	461d      	mov	r5, r3
 800472c:	bfbb      	ittet	lt
 800472e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004732:	461d      	movlt	r5, r3
 8004734:	2300      	movge	r3, #0
 8004736:	232d      	movlt	r3, #45	@ 0x2d
 8004738:	b088      	sub	sp, #32
 800473a:	4614      	mov	r4, r2
 800473c:	bfb8      	it	lt
 800473e:	4614      	movlt	r4, r2
 8004740:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004742:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004744:	7013      	strb	r3, [r2, #0]
 8004746:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004748:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800474c:	f023 0820 	bic.w	r8, r3, #32
 8004750:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004754:	d005      	beq.n	8004762 <__cvt+0x3e>
 8004756:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800475a:	d100      	bne.n	800475e <__cvt+0x3a>
 800475c:	3601      	adds	r6, #1
 800475e:	2302      	movs	r3, #2
 8004760:	e000      	b.n	8004764 <__cvt+0x40>
 8004762:	2303      	movs	r3, #3
 8004764:	aa07      	add	r2, sp, #28
 8004766:	9204      	str	r2, [sp, #16]
 8004768:	aa06      	add	r2, sp, #24
 800476a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800476e:	e9cd 3600 	strd	r3, r6, [sp]
 8004772:	4622      	mov	r2, r4
 8004774:	462b      	mov	r3, r5
 8004776:	f000 ff83 	bl	8005680 <_dtoa_r>
 800477a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800477e:	4607      	mov	r7, r0
 8004780:	d119      	bne.n	80047b6 <__cvt+0x92>
 8004782:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004784:	07db      	lsls	r3, r3, #31
 8004786:	d50e      	bpl.n	80047a6 <__cvt+0x82>
 8004788:	eb00 0906 	add.w	r9, r0, r6
 800478c:	2200      	movs	r2, #0
 800478e:	2300      	movs	r3, #0
 8004790:	4620      	mov	r0, r4
 8004792:	4629      	mov	r1, r5
 8004794:	f7fc f9bc 	bl	8000b10 <__aeabi_dcmpeq>
 8004798:	b108      	cbz	r0, 800479e <__cvt+0x7a>
 800479a:	f8cd 901c 	str.w	r9, [sp, #28]
 800479e:	2230      	movs	r2, #48	@ 0x30
 80047a0:	9b07      	ldr	r3, [sp, #28]
 80047a2:	454b      	cmp	r3, r9
 80047a4:	d31e      	bcc.n	80047e4 <__cvt+0xc0>
 80047a6:	4638      	mov	r0, r7
 80047a8:	9b07      	ldr	r3, [sp, #28]
 80047aa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80047ac:	1bdb      	subs	r3, r3, r7
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	b008      	add	sp, #32
 80047b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047ba:	eb00 0906 	add.w	r9, r0, r6
 80047be:	d1e5      	bne.n	800478c <__cvt+0x68>
 80047c0:	7803      	ldrb	r3, [r0, #0]
 80047c2:	2b30      	cmp	r3, #48	@ 0x30
 80047c4:	d10a      	bne.n	80047dc <__cvt+0xb8>
 80047c6:	2200      	movs	r2, #0
 80047c8:	2300      	movs	r3, #0
 80047ca:	4620      	mov	r0, r4
 80047cc:	4629      	mov	r1, r5
 80047ce:	f7fc f99f 	bl	8000b10 <__aeabi_dcmpeq>
 80047d2:	b918      	cbnz	r0, 80047dc <__cvt+0xb8>
 80047d4:	f1c6 0601 	rsb	r6, r6, #1
 80047d8:	f8ca 6000 	str.w	r6, [sl]
 80047dc:	f8da 3000 	ldr.w	r3, [sl]
 80047e0:	4499      	add	r9, r3
 80047e2:	e7d3      	b.n	800478c <__cvt+0x68>
 80047e4:	1c59      	adds	r1, r3, #1
 80047e6:	9107      	str	r1, [sp, #28]
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	e7d9      	b.n	80047a0 <__cvt+0x7c>

080047ec <__exponent>:
 80047ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047ee:	2900      	cmp	r1, #0
 80047f0:	bfb6      	itet	lt
 80047f2:	232d      	movlt	r3, #45	@ 0x2d
 80047f4:	232b      	movge	r3, #43	@ 0x2b
 80047f6:	4249      	neglt	r1, r1
 80047f8:	2909      	cmp	r1, #9
 80047fa:	7002      	strb	r2, [r0, #0]
 80047fc:	7043      	strb	r3, [r0, #1]
 80047fe:	dd29      	ble.n	8004854 <__exponent+0x68>
 8004800:	f10d 0307 	add.w	r3, sp, #7
 8004804:	461d      	mov	r5, r3
 8004806:	270a      	movs	r7, #10
 8004808:	fbb1 f6f7 	udiv	r6, r1, r7
 800480c:	461a      	mov	r2, r3
 800480e:	fb07 1416 	mls	r4, r7, r6, r1
 8004812:	3430      	adds	r4, #48	@ 0x30
 8004814:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004818:	460c      	mov	r4, r1
 800481a:	2c63      	cmp	r4, #99	@ 0x63
 800481c:	4631      	mov	r1, r6
 800481e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004822:	dcf1      	bgt.n	8004808 <__exponent+0x1c>
 8004824:	3130      	adds	r1, #48	@ 0x30
 8004826:	1e94      	subs	r4, r2, #2
 8004828:	f803 1c01 	strb.w	r1, [r3, #-1]
 800482c:	4623      	mov	r3, r4
 800482e:	1c41      	adds	r1, r0, #1
 8004830:	42ab      	cmp	r3, r5
 8004832:	d30a      	bcc.n	800484a <__exponent+0x5e>
 8004834:	f10d 0309 	add.w	r3, sp, #9
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	42ac      	cmp	r4, r5
 800483c:	bf88      	it	hi
 800483e:	2300      	movhi	r3, #0
 8004840:	3302      	adds	r3, #2
 8004842:	4403      	add	r3, r0
 8004844:	1a18      	subs	r0, r3, r0
 8004846:	b003      	add	sp, #12
 8004848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800484a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800484e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004852:	e7ed      	b.n	8004830 <__exponent+0x44>
 8004854:	2330      	movs	r3, #48	@ 0x30
 8004856:	3130      	adds	r1, #48	@ 0x30
 8004858:	7083      	strb	r3, [r0, #2]
 800485a:	70c1      	strb	r1, [r0, #3]
 800485c:	1d03      	adds	r3, r0, #4
 800485e:	e7f1      	b.n	8004844 <__exponent+0x58>

08004860 <_printf_float>:
 8004860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004864:	b091      	sub	sp, #68	@ 0x44
 8004866:	460c      	mov	r4, r1
 8004868:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800486c:	4616      	mov	r6, r2
 800486e:	461f      	mov	r7, r3
 8004870:	4605      	mov	r5, r0
 8004872:	f000 fde7 	bl	8005444 <_localeconv_r>
 8004876:	6803      	ldr	r3, [r0, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	9308      	str	r3, [sp, #32]
 800487c:	f7fb fc68 	bl	8000150 <strlen>
 8004880:	2300      	movs	r3, #0
 8004882:	930e      	str	r3, [sp, #56]	@ 0x38
 8004884:	f8d8 3000 	ldr.w	r3, [r8]
 8004888:	9009      	str	r0, [sp, #36]	@ 0x24
 800488a:	3307      	adds	r3, #7
 800488c:	f023 0307 	bic.w	r3, r3, #7
 8004890:	f103 0208 	add.w	r2, r3, #8
 8004894:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004898:	f8d4 b000 	ldr.w	fp, [r4]
 800489c:	f8c8 2000 	str.w	r2, [r8]
 80048a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80048a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048aa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80048ae:	f04f 32ff 	mov.w	r2, #4294967295
 80048b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80048b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80048ba:	4b9c      	ldr	r3, [pc, #624]	@ (8004b2c <_printf_float+0x2cc>)
 80048bc:	f7fc f95a 	bl	8000b74 <__aeabi_dcmpun>
 80048c0:	bb70      	cbnz	r0, 8004920 <_printf_float+0xc0>
 80048c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80048c6:	f04f 32ff 	mov.w	r2, #4294967295
 80048ca:	4b98      	ldr	r3, [pc, #608]	@ (8004b2c <_printf_float+0x2cc>)
 80048cc:	f7fc f934 	bl	8000b38 <__aeabi_dcmple>
 80048d0:	bb30      	cbnz	r0, 8004920 <_printf_float+0xc0>
 80048d2:	2200      	movs	r2, #0
 80048d4:	2300      	movs	r3, #0
 80048d6:	4640      	mov	r0, r8
 80048d8:	4649      	mov	r1, r9
 80048da:	f7fc f923 	bl	8000b24 <__aeabi_dcmplt>
 80048de:	b110      	cbz	r0, 80048e6 <_printf_float+0x86>
 80048e0:	232d      	movs	r3, #45	@ 0x2d
 80048e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048e6:	4a92      	ldr	r2, [pc, #584]	@ (8004b30 <_printf_float+0x2d0>)
 80048e8:	4b92      	ldr	r3, [pc, #584]	@ (8004b34 <_printf_float+0x2d4>)
 80048ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80048ee:	bf8c      	ite	hi
 80048f0:	4690      	movhi	r8, r2
 80048f2:	4698      	movls	r8, r3
 80048f4:	2303      	movs	r3, #3
 80048f6:	f04f 0900 	mov.w	r9, #0
 80048fa:	6123      	str	r3, [r4, #16]
 80048fc:	f02b 0304 	bic.w	r3, fp, #4
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	4633      	mov	r3, r6
 8004904:	4621      	mov	r1, r4
 8004906:	4628      	mov	r0, r5
 8004908:	9700      	str	r7, [sp, #0]
 800490a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800490c:	f000 f9d4 	bl	8004cb8 <_printf_common>
 8004910:	3001      	adds	r0, #1
 8004912:	f040 8090 	bne.w	8004a36 <_printf_float+0x1d6>
 8004916:	f04f 30ff 	mov.w	r0, #4294967295
 800491a:	b011      	add	sp, #68	@ 0x44
 800491c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004920:	4642      	mov	r2, r8
 8004922:	464b      	mov	r3, r9
 8004924:	4640      	mov	r0, r8
 8004926:	4649      	mov	r1, r9
 8004928:	f7fc f924 	bl	8000b74 <__aeabi_dcmpun>
 800492c:	b148      	cbz	r0, 8004942 <_printf_float+0xe2>
 800492e:	464b      	mov	r3, r9
 8004930:	2b00      	cmp	r3, #0
 8004932:	bfb8      	it	lt
 8004934:	232d      	movlt	r3, #45	@ 0x2d
 8004936:	4a80      	ldr	r2, [pc, #512]	@ (8004b38 <_printf_float+0x2d8>)
 8004938:	bfb8      	it	lt
 800493a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800493e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b3c <_printf_float+0x2dc>)
 8004940:	e7d3      	b.n	80048ea <_printf_float+0x8a>
 8004942:	6863      	ldr	r3, [r4, #4]
 8004944:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	d13f      	bne.n	80049cc <_printf_float+0x16c>
 800494c:	2306      	movs	r3, #6
 800494e:	6063      	str	r3, [r4, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004956:	6023      	str	r3, [r4, #0]
 8004958:	9206      	str	r2, [sp, #24]
 800495a:	aa0e      	add	r2, sp, #56	@ 0x38
 800495c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004960:	aa0d      	add	r2, sp, #52	@ 0x34
 8004962:	9203      	str	r2, [sp, #12]
 8004964:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004968:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800496c:	6863      	ldr	r3, [r4, #4]
 800496e:	4642      	mov	r2, r8
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	4628      	mov	r0, r5
 8004974:	464b      	mov	r3, r9
 8004976:	910a      	str	r1, [sp, #40]	@ 0x28
 8004978:	f7ff fed4 	bl	8004724 <__cvt>
 800497c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800497e:	4680      	mov	r8, r0
 8004980:	2947      	cmp	r1, #71	@ 0x47
 8004982:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004984:	d128      	bne.n	80049d8 <_printf_float+0x178>
 8004986:	1cc8      	adds	r0, r1, #3
 8004988:	db02      	blt.n	8004990 <_printf_float+0x130>
 800498a:	6863      	ldr	r3, [r4, #4]
 800498c:	4299      	cmp	r1, r3
 800498e:	dd40      	ble.n	8004a12 <_printf_float+0x1b2>
 8004990:	f1aa 0a02 	sub.w	sl, sl, #2
 8004994:	fa5f fa8a 	uxtb.w	sl, sl
 8004998:	4652      	mov	r2, sl
 800499a:	3901      	subs	r1, #1
 800499c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80049a0:	910d      	str	r1, [sp, #52]	@ 0x34
 80049a2:	f7ff ff23 	bl	80047ec <__exponent>
 80049a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80049a8:	4681      	mov	r9, r0
 80049aa:	1813      	adds	r3, r2, r0
 80049ac:	2a01      	cmp	r2, #1
 80049ae:	6123      	str	r3, [r4, #16]
 80049b0:	dc02      	bgt.n	80049b8 <_printf_float+0x158>
 80049b2:	6822      	ldr	r2, [r4, #0]
 80049b4:	07d2      	lsls	r2, r2, #31
 80049b6:	d501      	bpl.n	80049bc <_printf_float+0x15c>
 80049b8:	3301      	adds	r3, #1
 80049ba:	6123      	str	r3, [r4, #16]
 80049bc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d09e      	beq.n	8004902 <_printf_float+0xa2>
 80049c4:	232d      	movs	r3, #45	@ 0x2d
 80049c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049ca:	e79a      	b.n	8004902 <_printf_float+0xa2>
 80049cc:	2947      	cmp	r1, #71	@ 0x47
 80049ce:	d1bf      	bne.n	8004950 <_printf_float+0xf0>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1bd      	bne.n	8004950 <_printf_float+0xf0>
 80049d4:	2301      	movs	r3, #1
 80049d6:	e7ba      	b.n	800494e <_printf_float+0xee>
 80049d8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80049dc:	d9dc      	bls.n	8004998 <_printf_float+0x138>
 80049de:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80049e2:	d118      	bne.n	8004a16 <_printf_float+0x1b6>
 80049e4:	2900      	cmp	r1, #0
 80049e6:	6863      	ldr	r3, [r4, #4]
 80049e8:	dd0b      	ble.n	8004a02 <_printf_float+0x1a2>
 80049ea:	6121      	str	r1, [r4, #16]
 80049ec:	b913      	cbnz	r3, 80049f4 <_printf_float+0x194>
 80049ee:	6822      	ldr	r2, [r4, #0]
 80049f0:	07d0      	lsls	r0, r2, #31
 80049f2:	d502      	bpl.n	80049fa <_printf_float+0x19a>
 80049f4:	3301      	adds	r3, #1
 80049f6:	440b      	add	r3, r1
 80049f8:	6123      	str	r3, [r4, #16]
 80049fa:	f04f 0900 	mov.w	r9, #0
 80049fe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a00:	e7dc      	b.n	80049bc <_printf_float+0x15c>
 8004a02:	b913      	cbnz	r3, 8004a0a <_printf_float+0x1aa>
 8004a04:	6822      	ldr	r2, [r4, #0]
 8004a06:	07d2      	lsls	r2, r2, #31
 8004a08:	d501      	bpl.n	8004a0e <_printf_float+0x1ae>
 8004a0a:	3302      	adds	r3, #2
 8004a0c:	e7f4      	b.n	80049f8 <_printf_float+0x198>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e7f2      	b.n	80049f8 <_printf_float+0x198>
 8004a12:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004a16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a18:	4299      	cmp	r1, r3
 8004a1a:	db05      	blt.n	8004a28 <_printf_float+0x1c8>
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	6121      	str	r1, [r4, #16]
 8004a20:	07d8      	lsls	r0, r3, #31
 8004a22:	d5ea      	bpl.n	80049fa <_printf_float+0x19a>
 8004a24:	1c4b      	adds	r3, r1, #1
 8004a26:	e7e7      	b.n	80049f8 <_printf_float+0x198>
 8004a28:	2900      	cmp	r1, #0
 8004a2a:	bfcc      	ite	gt
 8004a2c:	2201      	movgt	r2, #1
 8004a2e:	f1c1 0202 	rsble	r2, r1, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	e7e0      	b.n	80049f8 <_printf_float+0x198>
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	055a      	lsls	r2, r3, #21
 8004a3a:	d407      	bmi.n	8004a4c <_printf_float+0x1ec>
 8004a3c:	6923      	ldr	r3, [r4, #16]
 8004a3e:	4642      	mov	r2, r8
 8004a40:	4631      	mov	r1, r6
 8004a42:	4628      	mov	r0, r5
 8004a44:	47b8      	blx	r7
 8004a46:	3001      	adds	r0, #1
 8004a48:	d12b      	bne.n	8004aa2 <_printf_float+0x242>
 8004a4a:	e764      	b.n	8004916 <_printf_float+0xb6>
 8004a4c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a50:	f240 80dc 	bls.w	8004c0c <_printf_float+0x3ac>
 8004a54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f7fc f858 	bl	8000b10 <__aeabi_dcmpeq>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	d033      	beq.n	8004acc <_printf_float+0x26c>
 8004a64:	2301      	movs	r3, #1
 8004a66:	4631      	mov	r1, r6
 8004a68:	4628      	mov	r0, r5
 8004a6a:	4a35      	ldr	r2, [pc, #212]	@ (8004b40 <_printf_float+0x2e0>)
 8004a6c:	47b8      	blx	r7
 8004a6e:	3001      	adds	r0, #1
 8004a70:	f43f af51 	beq.w	8004916 <_printf_float+0xb6>
 8004a74:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004a78:	4543      	cmp	r3, r8
 8004a7a:	db02      	blt.n	8004a82 <_printf_float+0x222>
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	07d8      	lsls	r0, r3, #31
 8004a80:	d50f      	bpl.n	8004aa2 <_printf_float+0x242>
 8004a82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a86:	4631      	mov	r1, r6
 8004a88:	4628      	mov	r0, r5
 8004a8a:	47b8      	blx	r7
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	f43f af42 	beq.w	8004916 <_printf_float+0xb6>
 8004a92:	f04f 0900 	mov.w	r9, #0
 8004a96:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a9a:	f104 0a1a 	add.w	sl, r4, #26
 8004a9e:	45c8      	cmp	r8, r9
 8004aa0:	dc09      	bgt.n	8004ab6 <_printf_float+0x256>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	079b      	lsls	r3, r3, #30
 8004aa6:	f100 8102 	bmi.w	8004cae <_printf_float+0x44e>
 8004aaa:	68e0      	ldr	r0, [r4, #12]
 8004aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004aae:	4298      	cmp	r0, r3
 8004ab0:	bfb8      	it	lt
 8004ab2:	4618      	movlt	r0, r3
 8004ab4:	e731      	b.n	800491a <_printf_float+0xba>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	4652      	mov	r2, sl
 8004aba:	4631      	mov	r1, r6
 8004abc:	4628      	mov	r0, r5
 8004abe:	47b8      	blx	r7
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	f43f af28 	beq.w	8004916 <_printf_float+0xb6>
 8004ac6:	f109 0901 	add.w	r9, r9, #1
 8004aca:	e7e8      	b.n	8004a9e <_printf_float+0x23e>
 8004acc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	dc38      	bgt.n	8004b44 <_printf_float+0x2e4>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	4631      	mov	r1, r6
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	4a19      	ldr	r2, [pc, #100]	@ (8004b40 <_printf_float+0x2e0>)
 8004ada:	47b8      	blx	r7
 8004adc:	3001      	adds	r0, #1
 8004ade:	f43f af1a 	beq.w	8004916 <_printf_float+0xb6>
 8004ae2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004ae6:	ea59 0303 	orrs.w	r3, r9, r3
 8004aea:	d102      	bne.n	8004af2 <_printf_float+0x292>
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	07d9      	lsls	r1, r3, #31
 8004af0:	d5d7      	bpl.n	8004aa2 <_printf_float+0x242>
 8004af2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004af6:	4631      	mov	r1, r6
 8004af8:	4628      	mov	r0, r5
 8004afa:	47b8      	blx	r7
 8004afc:	3001      	adds	r0, #1
 8004afe:	f43f af0a 	beq.w	8004916 <_printf_float+0xb6>
 8004b02:	f04f 0a00 	mov.w	sl, #0
 8004b06:	f104 0b1a 	add.w	fp, r4, #26
 8004b0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b0c:	425b      	negs	r3, r3
 8004b0e:	4553      	cmp	r3, sl
 8004b10:	dc01      	bgt.n	8004b16 <_printf_float+0x2b6>
 8004b12:	464b      	mov	r3, r9
 8004b14:	e793      	b.n	8004a3e <_printf_float+0x1de>
 8004b16:	2301      	movs	r3, #1
 8004b18:	465a      	mov	r2, fp
 8004b1a:	4631      	mov	r1, r6
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	47b8      	blx	r7
 8004b20:	3001      	adds	r0, #1
 8004b22:	f43f aef8 	beq.w	8004916 <_printf_float+0xb6>
 8004b26:	f10a 0a01 	add.w	sl, sl, #1
 8004b2a:	e7ee      	b.n	8004b0a <_printf_float+0x2aa>
 8004b2c:	7fefffff 	.word	0x7fefffff
 8004b30:	0800756a 	.word	0x0800756a
 8004b34:	08007566 	.word	0x08007566
 8004b38:	08007572 	.word	0x08007572
 8004b3c:	0800756e 	.word	0x0800756e
 8004b40:	08007576 	.word	0x08007576
 8004b44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b46:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004b4a:	4553      	cmp	r3, sl
 8004b4c:	bfa8      	it	ge
 8004b4e:	4653      	movge	r3, sl
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	4699      	mov	r9, r3
 8004b54:	dc36      	bgt.n	8004bc4 <_printf_float+0x364>
 8004b56:	f04f 0b00 	mov.w	fp, #0
 8004b5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b5e:	f104 021a 	add.w	r2, r4, #26
 8004b62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b64:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b66:	eba3 0309 	sub.w	r3, r3, r9
 8004b6a:	455b      	cmp	r3, fp
 8004b6c:	dc31      	bgt.n	8004bd2 <_printf_float+0x372>
 8004b6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b70:	459a      	cmp	sl, r3
 8004b72:	dc3a      	bgt.n	8004bea <_printf_float+0x38a>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	07da      	lsls	r2, r3, #31
 8004b78:	d437      	bmi.n	8004bea <_printf_float+0x38a>
 8004b7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b7c:	ebaa 0903 	sub.w	r9, sl, r3
 8004b80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b82:	ebaa 0303 	sub.w	r3, sl, r3
 8004b86:	4599      	cmp	r9, r3
 8004b88:	bfa8      	it	ge
 8004b8a:	4699      	movge	r9, r3
 8004b8c:	f1b9 0f00 	cmp.w	r9, #0
 8004b90:	dc33      	bgt.n	8004bfa <_printf_float+0x39a>
 8004b92:	f04f 0800 	mov.w	r8, #0
 8004b96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b9a:	f104 0b1a 	add.w	fp, r4, #26
 8004b9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ba0:	ebaa 0303 	sub.w	r3, sl, r3
 8004ba4:	eba3 0309 	sub.w	r3, r3, r9
 8004ba8:	4543      	cmp	r3, r8
 8004baa:	f77f af7a 	ble.w	8004aa2 <_printf_float+0x242>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	465a      	mov	r2, fp
 8004bb2:	4631      	mov	r1, r6
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	47b8      	blx	r7
 8004bb8:	3001      	adds	r0, #1
 8004bba:	f43f aeac 	beq.w	8004916 <_printf_float+0xb6>
 8004bbe:	f108 0801 	add.w	r8, r8, #1
 8004bc2:	e7ec      	b.n	8004b9e <_printf_float+0x33e>
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	4628      	mov	r0, r5
 8004bca:	47b8      	blx	r7
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d1c2      	bne.n	8004b56 <_printf_float+0x2f6>
 8004bd0:	e6a1      	b.n	8004916 <_printf_float+0xb6>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	4631      	mov	r1, r6
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	920a      	str	r2, [sp, #40]	@ 0x28
 8004bda:	47b8      	blx	r7
 8004bdc:	3001      	adds	r0, #1
 8004bde:	f43f ae9a 	beq.w	8004916 <_printf_float+0xb6>
 8004be2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004be4:	f10b 0b01 	add.w	fp, fp, #1
 8004be8:	e7bb      	b.n	8004b62 <_printf_float+0x302>
 8004bea:	4631      	mov	r1, r6
 8004bec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	47b8      	blx	r7
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d1c0      	bne.n	8004b7a <_printf_float+0x31a>
 8004bf8:	e68d      	b.n	8004916 <_printf_float+0xb6>
 8004bfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004bfc:	464b      	mov	r3, r9
 8004bfe:	4631      	mov	r1, r6
 8004c00:	4628      	mov	r0, r5
 8004c02:	4442      	add	r2, r8
 8004c04:	47b8      	blx	r7
 8004c06:	3001      	adds	r0, #1
 8004c08:	d1c3      	bne.n	8004b92 <_printf_float+0x332>
 8004c0a:	e684      	b.n	8004916 <_printf_float+0xb6>
 8004c0c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004c10:	f1ba 0f01 	cmp.w	sl, #1
 8004c14:	dc01      	bgt.n	8004c1a <_printf_float+0x3ba>
 8004c16:	07db      	lsls	r3, r3, #31
 8004c18:	d536      	bpl.n	8004c88 <_printf_float+0x428>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	4631      	mov	r1, r6
 8004c20:	4628      	mov	r0, r5
 8004c22:	47b8      	blx	r7
 8004c24:	3001      	adds	r0, #1
 8004c26:	f43f ae76 	beq.w	8004916 <_printf_float+0xb6>
 8004c2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c2e:	4631      	mov	r1, r6
 8004c30:	4628      	mov	r0, r5
 8004c32:	47b8      	blx	r7
 8004c34:	3001      	adds	r0, #1
 8004c36:	f43f ae6e 	beq.w	8004916 <_printf_float+0xb6>
 8004c3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2300      	movs	r3, #0
 8004c42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c46:	f7fb ff63 	bl	8000b10 <__aeabi_dcmpeq>
 8004c4a:	b9c0      	cbnz	r0, 8004c7e <_printf_float+0x41e>
 8004c4c:	4653      	mov	r3, sl
 8004c4e:	f108 0201 	add.w	r2, r8, #1
 8004c52:	4631      	mov	r1, r6
 8004c54:	4628      	mov	r0, r5
 8004c56:	47b8      	blx	r7
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d10c      	bne.n	8004c76 <_printf_float+0x416>
 8004c5c:	e65b      	b.n	8004916 <_printf_float+0xb6>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	465a      	mov	r2, fp
 8004c62:	4631      	mov	r1, r6
 8004c64:	4628      	mov	r0, r5
 8004c66:	47b8      	blx	r7
 8004c68:	3001      	adds	r0, #1
 8004c6a:	f43f ae54 	beq.w	8004916 <_printf_float+0xb6>
 8004c6e:	f108 0801 	add.w	r8, r8, #1
 8004c72:	45d0      	cmp	r8, sl
 8004c74:	dbf3      	blt.n	8004c5e <_printf_float+0x3fe>
 8004c76:	464b      	mov	r3, r9
 8004c78:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004c7c:	e6e0      	b.n	8004a40 <_printf_float+0x1e0>
 8004c7e:	f04f 0800 	mov.w	r8, #0
 8004c82:	f104 0b1a 	add.w	fp, r4, #26
 8004c86:	e7f4      	b.n	8004c72 <_printf_float+0x412>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	4642      	mov	r2, r8
 8004c8c:	e7e1      	b.n	8004c52 <_printf_float+0x3f2>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	464a      	mov	r2, r9
 8004c92:	4631      	mov	r1, r6
 8004c94:	4628      	mov	r0, r5
 8004c96:	47b8      	blx	r7
 8004c98:	3001      	adds	r0, #1
 8004c9a:	f43f ae3c 	beq.w	8004916 <_printf_float+0xb6>
 8004c9e:	f108 0801 	add.w	r8, r8, #1
 8004ca2:	68e3      	ldr	r3, [r4, #12]
 8004ca4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004ca6:	1a5b      	subs	r3, r3, r1
 8004ca8:	4543      	cmp	r3, r8
 8004caa:	dcf0      	bgt.n	8004c8e <_printf_float+0x42e>
 8004cac:	e6fd      	b.n	8004aaa <_printf_float+0x24a>
 8004cae:	f04f 0800 	mov.w	r8, #0
 8004cb2:	f104 0919 	add.w	r9, r4, #25
 8004cb6:	e7f4      	b.n	8004ca2 <_printf_float+0x442>

08004cb8 <_printf_common>:
 8004cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cbc:	4616      	mov	r6, r2
 8004cbe:	4698      	mov	r8, r3
 8004cc0:	688a      	ldr	r2, [r1, #8]
 8004cc2:	690b      	ldr	r3, [r1, #16]
 8004cc4:	4607      	mov	r7, r0
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	bfb8      	it	lt
 8004cca:	4613      	movlt	r3, r2
 8004ccc:	6033      	str	r3, [r6, #0]
 8004cce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cd8:	b10a      	cbz	r2, 8004cde <_printf_common+0x26>
 8004cda:	3301      	adds	r3, #1
 8004cdc:	6033      	str	r3, [r6, #0]
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	0699      	lsls	r1, r3, #26
 8004ce2:	bf42      	ittt	mi
 8004ce4:	6833      	ldrmi	r3, [r6, #0]
 8004ce6:	3302      	addmi	r3, #2
 8004ce8:	6033      	strmi	r3, [r6, #0]
 8004cea:	6825      	ldr	r5, [r4, #0]
 8004cec:	f015 0506 	ands.w	r5, r5, #6
 8004cf0:	d106      	bne.n	8004d00 <_printf_common+0x48>
 8004cf2:	f104 0a19 	add.w	sl, r4, #25
 8004cf6:	68e3      	ldr	r3, [r4, #12]
 8004cf8:	6832      	ldr	r2, [r6, #0]
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	42ab      	cmp	r3, r5
 8004cfe:	dc2b      	bgt.n	8004d58 <_printf_common+0xa0>
 8004d00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d04:	6822      	ldr	r2, [r4, #0]
 8004d06:	3b00      	subs	r3, #0
 8004d08:	bf18      	it	ne
 8004d0a:	2301      	movne	r3, #1
 8004d0c:	0692      	lsls	r2, r2, #26
 8004d0e:	d430      	bmi.n	8004d72 <_printf_common+0xba>
 8004d10:	4641      	mov	r1, r8
 8004d12:	4638      	mov	r0, r7
 8004d14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d18:	47c8      	blx	r9
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	d023      	beq.n	8004d66 <_printf_common+0xae>
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	6922      	ldr	r2, [r4, #16]
 8004d22:	f003 0306 	and.w	r3, r3, #6
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	bf14      	ite	ne
 8004d2a:	2500      	movne	r5, #0
 8004d2c:	6833      	ldreq	r3, [r6, #0]
 8004d2e:	f04f 0600 	mov.w	r6, #0
 8004d32:	bf08      	it	eq
 8004d34:	68e5      	ldreq	r5, [r4, #12]
 8004d36:	f104 041a 	add.w	r4, r4, #26
 8004d3a:	bf08      	it	eq
 8004d3c:	1aed      	subeq	r5, r5, r3
 8004d3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004d42:	bf08      	it	eq
 8004d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	bfc4      	itt	gt
 8004d4c:	1a9b      	subgt	r3, r3, r2
 8004d4e:	18ed      	addgt	r5, r5, r3
 8004d50:	42b5      	cmp	r5, r6
 8004d52:	d11a      	bne.n	8004d8a <_printf_common+0xd2>
 8004d54:	2000      	movs	r0, #0
 8004d56:	e008      	b.n	8004d6a <_printf_common+0xb2>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	4652      	mov	r2, sl
 8004d5c:	4641      	mov	r1, r8
 8004d5e:	4638      	mov	r0, r7
 8004d60:	47c8      	blx	r9
 8004d62:	3001      	adds	r0, #1
 8004d64:	d103      	bne.n	8004d6e <_printf_common+0xb6>
 8004d66:	f04f 30ff 	mov.w	r0, #4294967295
 8004d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6e:	3501      	adds	r5, #1
 8004d70:	e7c1      	b.n	8004cf6 <_printf_common+0x3e>
 8004d72:	2030      	movs	r0, #48	@ 0x30
 8004d74:	18e1      	adds	r1, r4, r3
 8004d76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d80:	4422      	add	r2, r4
 8004d82:	3302      	adds	r3, #2
 8004d84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d88:	e7c2      	b.n	8004d10 <_printf_common+0x58>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	4641      	mov	r1, r8
 8004d90:	4638      	mov	r0, r7
 8004d92:	47c8      	blx	r9
 8004d94:	3001      	adds	r0, #1
 8004d96:	d0e6      	beq.n	8004d66 <_printf_common+0xae>
 8004d98:	3601      	adds	r6, #1
 8004d9a:	e7d9      	b.n	8004d50 <_printf_common+0x98>

08004d9c <_printf_i>:
 8004d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004da0:	7e0f      	ldrb	r7, [r1, #24]
 8004da2:	4691      	mov	r9, r2
 8004da4:	2f78      	cmp	r7, #120	@ 0x78
 8004da6:	4680      	mov	r8, r0
 8004da8:	460c      	mov	r4, r1
 8004daa:	469a      	mov	sl, r3
 8004dac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004dae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004db2:	d807      	bhi.n	8004dc4 <_printf_i+0x28>
 8004db4:	2f62      	cmp	r7, #98	@ 0x62
 8004db6:	d80a      	bhi.n	8004dce <_printf_i+0x32>
 8004db8:	2f00      	cmp	r7, #0
 8004dba:	f000 80d1 	beq.w	8004f60 <_printf_i+0x1c4>
 8004dbe:	2f58      	cmp	r7, #88	@ 0x58
 8004dc0:	f000 80b8 	beq.w	8004f34 <_printf_i+0x198>
 8004dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004dcc:	e03a      	b.n	8004e44 <_printf_i+0xa8>
 8004dce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004dd2:	2b15      	cmp	r3, #21
 8004dd4:	d8f6      	bhi.n	8004dc4 <_printf_i+0x28>
 8004dd6:	a101      	add	r1, pc, #4	@ (adr r1, 8004ddc <_printf_i+0x40>)
 8004dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ddc:	08004e35 	.word	0x08004e35
 8004de0:	08004e49 	.word	0x08004e49
 8004de4:	08004dc5 	.word	0x08004dc5
 8004de8:	08004dc5 	.word	0x08004dc5
 8004dec:	08004dc5 	.word	0x08004dc5
 8004df0:	08004dc5 	.word	0x08004dc5
 8004df4:	08004e49 	.word	0x08004e49
 8004df8:	08004dc5 	.word	0x08004dc5
 8004dfc:	08004dc5 	.word	0x08004dc5
 8004e00:	08004dc5 	.word	0x08004dc5
 8004e04:	08004dc5 	.word	0x08004dc5
 8004e08:	08004f47 	.word	0x08004f47
 8004e0c:	08004e73 	.word	0x08004e73
 8004e10:	08004f01 	.word	0x08004f01
 8004e14:	08004dc5 	.word	0x08004dc5
 8004e18:	08004dc5 	.word	0x08004dc5
 8004e1c:	08004f69 	.word	0x08004f69
 8004e20:	08004dc5 	.word	0x08004dc5
 8004e24:	08004e73 	.word	0x08004e73
 8004e28:	08004dc5 	.word	0x08004dc5
 8004e2c:	08004dc5 	.word	0x08004dc5
 8004e30:	08004f09 	.word	0x08004f09
 8004e34:	6833      	ldr	r3, [r6, #0]
 8004e36:	1d1a      	adds	r2, r3, #4
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6032      	str	r2, [r6, #0]
 8004e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e44:	2301      	movs	r3, #1
 8004e46:	e09c      	b.n	8004f82 <_printf_i+0x1e6>
 8004e48:	6833      	ldr	r3, [r6, #0]
 8004e4a:	6820      	ldr	r0, [r4, #0]
 8004e4c:	1d19      	adds	r1, r3, #4
 8004e4e:	6031      	str	r1, [r6, #0]
 8004e50:	0606      	lsls	r6, r0, #24
 8004e52:	d501      	bpl.n	8004e58 <_printf_i+0xbc>
 8004e54:	681d      	ldr	r5, [r3, #0]
 8004e56:	e003      	b.n	8004e60 <_printf_i+0xc4>
 8004e58:	0645      	lsls	r5, r0, #25
 8004e5a:	d5fb      	bpl.n	8004e54 <_printf_i+0xb8>
 8004e5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e60:	2d00      	cmp	r5, #0
 8004e62:	da03      	bge.n	8004e6c <_printf_i+0xd0>
 8004e64:	232d      	movs	r3, #45	@ 0x2d
 8004e66:	426d      	negs	r5, r5
 8004e68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e6c:	230a      	movs	r3, #10
 8004e6e:	4858      	ldr	r0, [pc, #352]	@ (8004fd0 <_printf_i+0x234>)
 8004e70:	e011      	b.n	8004e96 <_printf_i+0xfa>
 8004e72:	6821      	ldr	r1, [r4, #0]
 8004e74:	6833      	ldr	r3, [r6, #0]
 8004e76:	0608      	lsls	r0, r1, #24
 8004e78:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e7c:	d402      	bmi.n	8004e84 <_printf_i+0xe8>
 8004e7e:	0649      	lsls	r1, r1, #25
 8004e80:	bf48      	it	mi
 8004e82:	b2ad      	uxthmi	r5, r5
 8004e84:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e86:	6033      	str	r3, [r6, #0]
 8004e88:	bf14      	ite	ne
 8004e8a:	230a      	movne	r3, #10
 8004e8c:	2308      	moveq	r3, #8
 8004e8e:	4850      	ldr	r0, [pc, #320]	@ (8004fd0 <_printf_i+0x234>)
 8004e90:	2100      	movs	r1, #0
 8004e92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e96:	6866      	ldr	r6, [r4, #4]
 8004e98:	2e00      	cmp	r6, #0
 8004e9a:	60a6      	str	r6, [r4, #8]
 8004e9c:	db05      	blt.n	8004eaa <_printf_i+0x10e>
 8004e9e:	6821      	ldr	r1, [r4, #0]
 8004ea0:	432e      	orrs	r6, r5
 8004ea2:	f021 0104 	bic.w	r1, r1, #4
 8004ea6:	6021      	str	r1, [r4, #0]
 8004ea8:	d04b      	beq.n	8004f42 <_printf_i+0x1a6>
 8004eaa:	4616      	mov	r6, r2
 8004eac:	fbb5 f1f3 	udiv	r1, r5, r3
 8004eb0:	fb03 5711 	mls	r7, r3, r1, r5
 8004eb4:	5dc7      	ldrb	r7, [r0, r7]
 8004eb6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004eba:	462f      	mov	r7, r5
 8004ebc:	42bb      	cmp	r3, r7
 8004ebe:	460d      	mov	r5, r1
 8004ec0:	d9f4      	bls.n	8004eac <_printf_i+0x110>
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d10b      	bne.n	8004ede <_printf_i+0x142>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	07df      	lsls	r7, r3, #31
 8004eca:	d508      	bpl.n	8004ede <_printf_i+0x142>
 8004ecc:	6923      	ldr	r3, [r4, #16]
 8004ece:	6861      	ldr	r1, [r4, #4]
 8004ed0:	4299      	cmp	r1, r3
 8004ed2:	bfde      	ittt	le
 8004ed4:	2330      	movle	r3, #48	@ 0x30
 8004ed6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004eda:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ede:	1b92      	subs	r2, r2, r6
 8004ee0:	6122      	str	r2, [r4, #16]
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	f8cd a000 	str.w	sl, [sp]
 8004eec:	aa03      	add	r2, sp, #12
 8004eee:	f7ff fee3 	bl	8004cb8 <_printf_common>
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d14a      	bne.n	8004f8c <_printf_i+0x1f0>
 8004ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8004efa:	b004      	add	sp, #16
 8004efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	f043 0320 	orr.w	r3, r3, #32
 8004f06:	6023      	str	r3, [r4, #0]
 8004f08:	2778      	movs	r7, #120	@ 0x78
 8004f0a:	4832      	ldr	r0, [pc, #200]	@ (8004fd4 <_printf_i+0x238>)
 8004f0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	6831      	ldr	r1, [r6, #0]
 8004f14:	061f      	lsls	r7, r3, #24
 8004f16:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f1a:	d402      	bmi.n	8004f22 <_printf_i+0x186>
 8004f1c:	065f      	lsls	r7, r3, #25
 8004f1e:	bf48      	it	mi
 8004f20:	b2ad      	uxthmi	r5, r5
 8004f22:	6031      	str	r1, [r6, #0]
 8004f24:	07d9      	lsls	r1, r3, #31
 8004f26:	bf44      	itt	mi
 8004f28:	f043 0320 	orrmi.w	r3, r3, #32
 8004f2c:	6023      	strmi	r3, [r4, #0]
 8004f2e:	b11d      	cbz	r5, 8004f38 <_printf_i+0x19c>
 8004f30:	2310      	movs	r3, #16
 8004f32:	e7ad      	b.n	8004e90 <_printf_i+0xf4>
 8004f34:	4826      	ldr	r0, [pc, #152]	@ (8004fd0 <_printf_i+0x234>)
 8004f36:	e7e9      	b.n	8004f0c <_printf_i+0x170>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	f023 0320 	bic.w	r3, r3, #32
 8004f3e:	6023      	str	r3, [r4, #0]
 8004f40:	e7f6      	b.n	8004f30 <_printf_i+0x194>
 8004f42:	4616      	mov	r6, r2
 8004f44:	e7bd      	b.n	8004ec2 <_printf_i+0x126>
 8004f46:	6833      	ldr	r3, [r6, #0]
 8004f48:	6825      	ldr	r5, [r4, #0]
 8004f4a:	1d18      	adds	r0, r3, #4
 8004f4c:	6961      	ldr	r1, [r4, #20]
 8004f4e:	6030      	str	r0, [r6, #0]
 8004f50:	062e      	lsls	r6, r5, #24
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	d501      	bpl.n	8004f5a <_printf_i+0x1be>
 8004f56:	6019      	str	r1, [r3, #0]
 8004f58:	e002      	b.n	8004f60 <_printf_i+0x1c4>
 8004f5a:	0668      	lsls	r0, r5, #25
 8004f5c:	d5fb      	bpl.n	8004f56 <_printf_i+0x1ba>
 8004f5e:	8019      	strh	r1, [r3, #0]
 8004f60:	2300      	movs	r3, #0
 8004f62:	4616      	mov	r6, r2
 8004f64:	6123      	str	r3, [r4, #16]
 8004f66:	e7bc      	b.n	8004ee2 <_printf_i+0x146>
 8004f68:	6833      	ldr	r3, [r6, #0]
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	1d1a      	adds	r2, r3, #4
 8004f6e:	6032      	str	r2, [r6, #0]
 8004f70:	681e      	ldr	r6, [r3, #0]
 8004f72:	6862      	ldr	r2, [r4, #4]
 8004f74:	4630      	mov	r0, r6
 8004f76:	f000 fadc 	bl	8005532 <memchr>
 8004f7a:	b108      	cbz	r0, 8004f80 <_printf_i+0x1e4>
 8004f7c:	1b80      	subs	r0, r0, r6
 8004f7e:	6060      	str	r0, [r4, #4]
 8004f80:	6863      	ldr	r3, [r4, #4]
 8004f82:	6123      	str	r3, [r4, #16]
 8004f84:	2300      	movs	r3, #0
 8004f86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f8a:	e7aa      	b.n	8004ee2 <_printf_i+0x146>
 8004f8c:	4632      	mov	r2, r6
 8004f8e:	4649      	mov	r1, r9
 8004f90:	4640      	mov	r0, r8
 8004f92:	6923      	ldr	r3, [r4, #16]
 8004f94:	47d0      	blx	sl
 8004f96:	3001      	adds	r0, #1
 8004f98:	d0ad      	beq.n	8004ef6 <_printf_i+0x15a>
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	079b      	lsls	r3, r3, #30
 8004f9e:	d413      	bmi.n	8004fc8 <_printf_i+0x22c>
 8004fa0:	68e0      	ldr	r0, [r4, #12]
 8004fa2:	9b03      	ldr	r3, [sp, #12]
 8004fa4:	4298      	cmp	r0, r3
 8004fa6:	bfb8      	it	lt
 8004fa8:	4618      	movlt	r0, r3
 8004faa:	e7a6      	b.n	8004efa <_printf_i+0x15e>
 8004fac:	2301      	movs	r3, #1
 8004fae:	4632      	mov	r2, r6
 8004fb0:	4649      	mov	r1, r9
 8004fb2:	4640      	mov	r0, r8
 8004fb4:	47d0      	blx	sl
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d09d      	beq.n	8004ef6 <_printf_i+0x15a>
 8004fba:	3501      	adds	r5, #1
 8004fbc:	68e3      	ldr	r3, [r4, #12]
 8004fbe:	9903      	ldr	r1, [sp, #12]
 8004fc0:	1a5b      	subs	r3, r3, r1
 8004fc2:	42ab      	cmp	r3, r5
 8004fc4:	dcf2      	bgt.n	8004fac <_printf_i+0x210>
 8004fc6:	e7eb      	b.n	8004fa0 <_printf_i+0x204>
 8004fc8:	2500      	movs	r5, #0
 8004fca:	f104 0619 	add.w	r6, r4, #25
 8004fce:	e7f5      	b.n	8004fbc <_printf_i+0x220>
 8004fd0:	08007578 	.word	0x08007578
 8004fd4:	08007589 	.word	0x08007589

08004fd8 <std>:
 8004fd8:	2300      	movs	r3, #0
 8004fda:	b510      	push	{r4, lr}
 8004fdc:	4604      	mov	r4, r0
 8004fde:	e9c0 3300 	strd	r3, r3, [r0]
 8004fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fe6:	6083      	str	r3, [r0, #8]
 8004fe8:	8181      	strh	r1, [r0, #12]
 8004fea:	6643      	str	r3, [r0, #100]	@ 0x64
 8004fec:	81c2      	strh	r2, [r0, #14]
 8004fee:	6183      	str	r3, [r0, #24]
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	2208      	movs	r2, #8
 8004ff4:	305c      	adds	r0, #92	@ 0x5c
 8004ff6:	f000 fa1d 	bl	8005434 <memset>
 8004ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8005030 <std+0x58>)
 8004ffc:	6224      	str	r4, [r4, #32]
 8004ffe:	6263      	str	r3, [r4, #36]	@ 0x24
 8005000:	4b0c      	ldr	r3, [pc, #48]	@ (8005034 <std+0x5c>)
 8005002:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005004:	4b0c      	ldr	r3, [pc, #48]	@ (8005038 <std+0x60>)
 8005006:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005008:	4b0c      	ldr	r3, [pc, #48]	@ (800503c <std+0x64>)
 800500a:	6323      	str	r3, [r4, #48]	@ 0x30
 800500c:	4b0c      	ldr	r3, [pc, #48]	@ (8005040 <std+0x68>)
 800500e:	429c      	cmp	r4, r3
 8005010:	d006      	beq.n	8005020 <std+0x48>
 8005012:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005016:	4294      	cmp	r4, r2
 8005018:	d002      	beq.n	8005020 <std+0x48>
 800501a:	33d0      	adds	r3, #208	@ 0xd0
 800501c:	429c      	cmp	r4, r3
 800501e:	d105      	bne.n	800502c <std+0x54>
 8005020:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005028:	f000 ba80 	b.w	800552c <__retarget_lock_init_recursive>
 800502c:	bd10      	pop	{r4, pc}
 800502e:	bf00      	nop
 8005030:	08005285 	.word	0x08005285
 8005034:	080052a7 	.word	0x080052a7
 8005038:	080052df 	.word	0x080052df
 800503c:	08005303 	.word	0x08005303
 8005040:	200003e4 	.word	0x200003e4

08005044 <stdio_exit_handler>:
 8005044:	4a02      	ldr	r2, [pc, #8]	@ (8005050 <stdio_exit_handler+0xc>)
 8005046:	4903      	ldr	r1, [pc, #12]	@ (8005054 <stdio_exit_handler+0x10>)
 8005048:	4803      	ldr	r0, [pc, #12]	@ (8005058 <stdio_exit_handler+0x14>)
 800504a:	f000 b869 	b.w	8005120 <_fwalk_sglue>
 800504e:	bf00      	nop
 8005050:	2000000c 	.word	0x2000000c
 8005054:	08006ec9 	.word	0x08006ec9
 8005058:	2000001c 	.word	0x2000001c

0800505c <cleanup_stdio>:
 800505c:	6841      	ldr	r1, [r0, #4]
 800505e:	4b0c      	ldr	r3, [pc, #48]	@ (8005090 <cleanup_stdio+0x34>)
 8005060:	b510      	push	{r4, lr}
 8005062:	4299      	cmp	r1, r3
 8005064:	4604      	mov	r4, r0
 8005066:	d001      	beq.n	800506c <cleanup_stdio+0x10>
 8005068:	f001 ff2e 	bl	8006ec8 <_fflush_r>
 800506c:	68a1      	ldr	r1, [r4, #8]
 800506e:	4b09      	ldr	r3, [pc, #36]	@ (8005094 <cleanup_stdio+0x38>)
 8005070:	4299      	cmp	r1, r3
 8005072:	d002      	beq.n	800507a <cleanup_stdio+0x1e>
 8005074:	4620      	mov	r0, r4
 8005076:	f001 ff27 	bl	8006ec8 <_fflush_r>
 800507a:	68e1      	ldr	r1, [r4, #12]
 800507c:	4b06      	ldr	r3, [pc, #24]	@ (8005098 <cleanup_stdio+0x3c>)
 800507e:	4299      	cmp	r1, r3
 8005080:	d004      	beq.n	800508c <cleanup_stdio+0x30>
 8005082:	4620      	mov	r0, r4
 8005084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005088:	f001 bf1e 	b.w	8006ec8 <_fflush_r>
 800508c:	bd10      	pop	{r4, pc}
 800508e:	bf00      	nop
 8005090:	200003e4 	.word	0x200003e4
 8005094:	2000044c 	.word	0x2000044c
 8005098:	200004b4 	.word	0x200004b4

0800509c <global_stdio_init.part.0>:
 800509c:	b510      	push	{r4, lr}
 800509e:	4b0b      	ldr	r3, [pc, #44]	@ (80050cc <global_stdio_init.part.0+0x30>)
 80050a0:	4c0b      	ldr	r4, [pc, #44]	@ (80050d0 <global_stdio_init.part.0+0x34>)
 80050a2:	4a0c      	ldr	r2, [pc, #48]	@ (80050d4 <global_stdio_init.part.0+0x38>)
 80050a4:	4620      	mov	r0, r4
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	2104      	movs	r1, #4
 80050aa:	2200      	movs	r2, #0
 80050ac:	f7ff ff94 	bl	8004fd8 <std>
 80050b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80050b4:	2201      	movs	r2, #1
 80050b6:	2109      	movs	r1, #9
 80050b8:	f7ff ff8e 	bl	8004fd8 <std>
 80050bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80050c0:	2202      	movs	r2, #2
 80050c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050c6:	2112      	movs	r1, #18
 80050c8:	f7ff bf86 	b.w	8004fd8 <std>
 80050cc:	2000051c 	.word	0x2000051c
 80050d0:	200003e4 	.word	0x200003e4
 80050d4:	08005045 	.word	0x08005045

080050d8 <__sfp_lock_acquire>:
 80050d8:	4801      	ldr	r0, [pc, #4]	@ (80050e0 <__sfp_lock_acquire+0x8>)
 80050da:	f000 ba28 	b.w	800552e <__retarget_lock_acquire_recursive>
 80050de:	bf00      	nop
 80050e0:	20000525 	.word	0x20000525

080050e4 <__sfp_lock_release>:
 80050e4:	4801      	ldr	r0, [pc, #4]	@ (80050ec <__sfp_lock_release+0x8>)
 80050e6:	f000 ba23 	b.w	8005530 <__retarget_lock_release_recursive>
 80050ea:	bf00      	nop
 80050ec:	20000525 	.word	0x20000525

080050f0 <__sinit>:
 80050f0:	b510      	push	{r4, lr}
 80050f2:	4604      	mov	r4, r0
 80050f4:	f7ff fff0 	bl	80050d8 <__sfp_lock_acquire>
 80050f8:	6a23      	ldr	r3, [r4, #32]
 80050fa:	b11b      	cbz	r3, 8005104 <__sinit+0x14>
 80050fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005100:	f7ff bff0 	b.w	80050e4 <__sfp_lock_release>
 8005104:	4b04      	ldr	r3, [pc, #16]	@ (8005118 <__sinit+0x28>)
 8005106:	6223      	str	r3, [r4, #32]
 8005108:	4b04      	ldr	r3, [pc, #16]	@ (800511c <__sinit+0x2c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1f5      	bne.n	80050fc <__sinit+0xc>
 8005110:	f7ff ffc4 	bl	800509c <global_stdio_init.part.0>
 8005114:	e7f2      	b.n	80050fc <__sinit+0xc>
 8005116:	bf00      	nop
 8005118:	0800505d 	.word	0x0800505d
 800511c:	2000051c 	.word	0x2000051c

08005120 <_fwalk_sglue>:
 8005120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005124:	4607      	mov	r7, r0
 8005126:	4688      	mov	r8, r1
 8005128:	4614      	mov	r4, r2
 800512a:	2600      	movs	r6, #0
 800512c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005130:	f1b9 0901 	subs.w	r9, r9, #1
 8005134:	d505      	bpl.n	8005142 <_fwalk_sglue+0x22>
 8005136:	6824      	ldr	r4, [r4, #0]
 8005138:	2c00      	cmp	r4, #0
 800513a:	d1f7      	bne.n	800512c <_fwalk_sglue+0xc>
 800513c:	4630      	mov	r0, r6
 800513e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005142:	89ab      	ldrh	r3, [r5, #12]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d907      	bls.n	8005158 <_fwalk_sglue+0x38>
 8005148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800514c:	3301      	adds	r3, #1
 800514e:	d003      	beq.n	8005158 <_fwalk_sglue+0x38>
 8005150:	4629      	mov	r1, r5
 8005152:	4638      	mov	r0, r7
 8005154:	47c0      	blx	r8
 8005156:	4306      	orrs	r6, r0
 8005158:	3568      	adds	r5, #104	@ 0x68
 800515a:	e7e9      	b.n	8005130 <_fwalk_sglue+0x10>

0800515c <_puts_r>:
 800515c:	6a03      	ldr	r3, [r0, #32]
 800515e:	b570      	push	{r4, r5, r6, lr}
 8005160:	4605      	mov	r5, r0
 8005162:	460e      	mov	r6, r1
 8005164:	6884      	ldr	r4, [r0, #8]
 8005166:	b90b      	cbnz	r3, 800516c <_puts_r+0x10>
 8005168:	f7ff ffc2 	bl	80050f0 <__sinit>
 800516c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800516e:	07db      	lsls	r3, r3, #31
 8005170:	d405      	bmi.n	800517e <_puts_r+0x22>
 8005172:	89a3      	ldrh	r3, [r4, #12]
 8005174:	0598      	lsls	r0, r3, #22
 8005176:	d402      	bmi.n	800517e <_puts_r+0x22>
 8005178:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800517a:	f000 f9d8 	bl	800552e <__retarget_lock_acquire_recursive>
 800517e:	89a3      	ldrh	r3, [r4, #12]
 8005180:	0719      	lsls	r1, r3, #28
 8005182:	d502      	bpl.n	800518a <_puts_r+0x2e>
 8005184:	6923      	ldr	r3, [r4, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d135      	bne.n	80051f6 <_puts_r+0x9a>
 800518a:	4621      	mov	r1, r4
 800518c:	4628      	mov	r0, r5
 800518e:	f000 f8fb 	bl	8005388 <__swsetup_r>
 8005192:	b380      	cbz	r0, 80051f6 <_puts_r+0x9a>
 8005194:	f04f 35ff 	mov.w	r5, #4294967295
 8005198:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800519a:	07da      	lsls	r2, r3, #31
 800519c:	d405      	bmi.n	80051aa <_puts_r+0x4e>
 800519e:	89a3      	ldrh	r3, [r4, #12]
 80051a0:	059b      	lsls	r3, r3, #22
 80051a2:	d402      	bmi.n	80051aa <_puts_r+0x4e>
 80051a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051a6:	f000 f9c3 	bl	8005530 <__retarget_lock_release_recursive>
 80051aa:	4628      	mov	r0, r5
 80051ac:	bd70      	pop	{r4, r5, r6, pc}
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	da04      	bge.n	80051bc <_puts_r+0x60>
 80051b2:	69a2      	ldr	r2, [r4, #24]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	dc17      	bgt.n	80051e8 <_puts_r+0x8c>
 80051b8:	290a      	cmp	r1, #10
 80051ba:	d015      	beq.n	80051e8 <_puts_r+0x8c>
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	6022      	str	r2, [r4, #0]
 80051c2:	7019      	strb	r1, [r3, #0]
 80051c4:	68a3      	ldr	r3, [r4, #8]
 80051c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80051ca:	3b01      	subs	r3, #1
 80051cc:	60a3      	str	r3, [r4, #8]
 80051ce:	2900      	cmp	r1, #0
 80051d0:	d1ed      	bne.n	80051ae <_puts_r+0x52>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	da11      	bge.n	80051fa <_puts_r+0x9e>
 80051d6:	4622      	mov	r2, r4
 80051d8:	210a      	movs	r1, #10
 80051da:	4628      	mov	r0, r5
 80051dc:	f000 f895 	bl	800530a <__swbuf_r>
 80051e0:	3001      	adds	r0, #1
 80051e2:	d0d7      	beq.n	8005194 <_puts_r+0x38>
 80051e4:	250a      	movs	r5, #10
 80051e6:	e7d7      	b.n	8005198 <_puts_r+0x3c>
 80051e8:	4622      	mov	r2, r4
 80051ea:	4628      	mov	r0, r5
 80051ec:	f000 f88d 	bl	800530a <__swbuf_r>
 80051f0:	3001      	adds	r0, #1
 80051f2:	d1e7      	bne.n	80051c4 <_puts_r+0x68>
 80051f4:	e7ce      	b.n	8005194 <_puts_r+0x38>
 80051f6:	3e01      	subs	r6, #1
 80051f8:	e7e4      	b.n	80051c4 <_puts_r+0x68>
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	6022      	str	r2, [r4, #0]
 8005200:	220a      	movs	r2, #10
 8005202:	701a      	strb	r2, [r3, #0]
 8005204:	e7ee      	b.n	80051e4 <_puts_r+0x88>
	...

08005208 <puts>:
 8005208:	4b02      	ldr	r3, [pc, #8]	@ (8005214 <puts+0xc>)
 800520a:	4601      	mov	r1, r0
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	f7ff bfa5 	b.w	800515c <_puts_r>
 8005212:	bf00      	nop
 8005214:	20000018 	.word	0x20000018

08005218 <sniprintf>:
 8005218:	b40c      	push	{r2, r3}
 800521a:	b530      	push	{r4, r5, lr}
 800521c:	4b18      	ldr	r3, [pc, #96]	@ (8005280 <sniprintf+0x68>)
 800521e:	1e0c      	subs	r4, r1, #0
 8005220:	681d      	ldr	r5, [r3, #0]
 8005222:	b09d      	sub	sp, #116	@ 0x74
 8005224:	da08      	bge.n	8005238 <sniprintf+0x20>
 8005226:	238b      	movs	r3, #139	@ 0x8b
 8005228:	f04f 30ff 	mov.w	r0, #4294967295
 800522c:	602b      	str	r3, [r5, #0]
 800522e:	b01d      	add	sp, #116	@ 0x74
 8005230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005234:	b002      	add	sp, #8
 8005236:	4770      	bx	lr
 8005238:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800523c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005246:	bf0c      	ite	eq
 8005248:	4623      	moveq	r3, r4
 800524a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800524e:	9304      	str	r3, [sp, #16]
 8005250:	9307      	str	r3, [sp, #28]
 8005252:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005256:	9002      	str	r0, [sp, #8]
 8005258:	9006      	str	r0, [sp, #24]
 800525a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800525e:	4628      	mov	r0, r5
 8005260:	ab21      	add	r3, sp, #132	@ 0x84
 8005262:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005264:	a902      	add	r1, sp, #8
 8005266:	9301      	str	r3, [sp, #4]
 8005268:	f001 fcb2 	bl	8006bd0 <_svfiprintf_r>
 800526c:	1c43      	adds	r3, r0, #1
 800526e:	bfbc      	itt	lt
 8005270:	238b      	movlt	r3, #139	@ 0x8b
 8005272:	602b      	strlt	r3, [r5, #0]
 8005274:	2c00      	cmp	r4, #0
 8005276:	d0da      	beq.n	800522e <sniprintf+0x16>
 8005278:	2200      	movs	r2, #0
 800527a:	9b02      	ldr	r3, [sp, #8]
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	e7d6      	b.n	800522e <sniprintf+0x16>
 8005280:	20000018 	.word	0x20000018

08005284 <__sread>:
 8005284:	b510      	push	{r4, lr}
 8005286:	460c      	mov	r4, r1
 8005288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528c:	f000 f900 	bl	8005490 <_read_r>
 8005290:	2800      	cmp	r0, #0
 8005292:	bfab      	itete	ge
 8005294:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005296:	89a3      	ldrhlt	r3, [r4, #12]
 8005298:	181b      	addge	r3, r3, r0
 800529a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800529e:	bfac      	ite	ge
 80052a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80052a2:	81a3      	strhlt	r3, [r4, #12]
 80052a4:	bd10      	pop	{r4, pc}

080052a6 <__swrite>:
 80052a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052aa:	461f      	mov	r7, r3
 80052ac:	898b      	ldrh	r3, [r1, #12]
 80052ae:	4605      	mov	r5, r0
 80052b0:	05db      	lsls	r3, r3, #23
 80052b2:	460c      	mov	r4, r1
 80052b4:	4616      	mov	r6, r2
 80052b6:	d505      	bpl.n	80052c4 <__swrite+0x1e>
 80052b8:	2302      	movs	r3, #2
 80052ba:	2200      	movs	r2, #0
 80052bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c0:	f000 f8d4 	bl	800546c <_lseek_r>
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	4632      	mov	r2, r6
 80052c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052cc:	81a3      	strh	r3, [r4, #12]
 80052ce:	4628      	mov	r0, r5
 80052d0:	463b      	mov	r3, r7
 80052d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052da:	f000 b8eb 	b.w	80054b4 <_write_r>

080052de <__sseek>:
 80052de:	b510      	push	{r4, lr}
 80052e0:	460c      	mov	r4, r1
 80052e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e6:	f000 f8c1 	bl	800546c <_lseek_r>
 80052ea:	1c43      	adds	r3, r0, #1
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	bf15      	itete	ne
 80052f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80052f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052fa:	81a3      	strheq	r3, [r4, #12]
 80052fc:	bf18      	it	ne
 80052fe:	81a3      	strhne	r3, [r4, #12]
 8005300:	bd10      	pop	{r4, pc}

08005302 <__sclose>:
 8005302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005306:	f000 b8a1 	b.w	800544c <_close_r>

0800530a <__swbuf_r>:
 800530a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530c:	460e      	mov	r6, r1
 800530e:	4614      	mov	r4, r2
 8005310:	4605      	mov	r5, r0
 8005312:	b118      	cbz	r0, 800531c <__swbuf_r+0x12>
 8005314:	6a03      	ldr	r3, [r0, #32]
 8005316:	b90b      	cbnz	r3, 800531c <__swbuf_r+0x12>
 8005318:	f7ff feea 	bl	80050f0 <__sinit>
 800531c:	69a3      	ldr	r3, [r4, #24]
 800531e:	60a3      	str	r3, [r4, #8]
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	071a      	lsls	r2, r3, #28
 8005324:	d501      	bpl.n	800532a <__swbuf_r+0x20>
 8005326:	6923      	ldr	r3, [r4, #16]
 8005328:	b943      	cbnz	r3, 800533c <__swbuf_r+0x32>
 800532a:	4621      	mov	r1, r4
 800532c:	4628      	mov	r0, r5
 800532e:	f000 f82b 	bl	8005388 <__swsetup_r>
 8005332:	b118      	cbz	r0, 800533c <__swbuf_r+0x32>
 8005334:	f04f 37ff 	mov.w	r7, #4294967295
 8005338:	4638      	mov	r0, r7
 800533a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	6922      	ldr	r2, [r4, #16]
 8005340:	b2f6      	uxtb	r6, r6
 8005342:	1a98      	subs	r0, r3, r2
 8005344:	6963      	ldr	r3, [r4, #20]
 8005346:	4637      	mov	r7, r6
 8005348:	4283      	cmp	r3, r0
 800534a:	dc05      	bgt.n	8005358 <__swbuf_r+0x4e>
 800534c:	4621      	mov	r1, r4
 800534e:	4628      	mov	r0, r5
 8005350:	f001 fdba 	bl	8006ec8 <_fflush_r>
 8005354:	2800      	cmp	r0, #0
 8005356:	d1ed      	bne.n	8005334 <__swbuf_r+0x2a>
 8005358:	68a3      	ldr	r3, [r4, #8]
 800535a:	3b01      	subs	r3, #1
 800535c:	60a3      	str	r3, [r4, #8]
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	6022      	str	r2, [r4, #0]
 8005364:	701e      	strb	r6, [r3, #0]
 8005366:	6962      	ldr	r2, [r4, #20]
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	429a      	cmp	r2, r3
 800536c:	d004      	beq.n	8005378 <__swbuf_r+0x6e>
 800536e:	89a3      	ldrh	r3, [r4, #12]
 8005370:	07db      	lsls	r3, r3, #31
 8005372:	d5e1      	bpl.n	8005338 <__swbuf_r+0x2e>
 8005374:	2e0a      	cmp	r6, #10
 8005376:	d1df      	bne.n	8005338 <__swbuf_r+0x2e>
 8005378:	4621      	mov	r1, r4
 800537a:	4628      	mov	r0, r5
 800537c:	f001 fda4 	bl	8006ec8 <_fflush_r>
 8005380:	2800      	cmp	r0, #0
 8005382:	d0d9      	beq.n	8005338 <__swbuf_r+0x2e>
 8005384:	e7d6      	b.n	8005334 <__swbuf_r+0x2a>
	...

08005388 <__swsetup_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	4b29      	ldr	r3, [pc, #164]	@ (8005430 <__swsetup_r+0xa8>)
 800538c:	4605      	mov	r5, r0
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	460c      	mov	r4, r1
 8005392:	b118      	cbz	r0, 800539c <__swsetup_r+0x14>
 8005394:	6a03      	ldr	r3, [r0, #32]
 8005396:	b90b      	cbnz	r3, 800539c <__swsetup_r+0x14>
 8005398:	f7ff feaa 	bl	80050f0 <__sinit>
 800539c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053a0:	0719      	lsls	r1, r3, #28
 80053a2:	d422      	bmi.n	80053ea <__swsetup_r+0x62>
 80053a4:	06da      	lsls	r2, r3, #27
 80053a6:	d407      	bmi.n	80053b8 <__swsetup_r+0x30>
 80053a8:	2209      	movs	r2, #9
 80053aa:	602a      	str	r2, [r5, #0]
 80053ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295
 80053b4:	81a3      	strh	r3, [r4, #12]
 80053b6:	e033      	b.n	8005420 <__swsetup_r+0x98>
 80053b8:	0758      	lsls	r0, r3, #29
 80053ba:	d512      	bpl.n	80053e2 <__swsetup_r+0x5a>
 80053bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053be:	b141      	cbz	r1, 80053d2 <__swsetup_r+0x4a>
 80053c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053c4:	4299      	cmp	r1, r3
 80053c6:	d002      	beq.n	80053ce <__swsetup_r+0x46>
 80053c8:	4628      	mov	r0, r5
 80053ca:	f000 ff2d 	bl	8006228 <_free_r>
 80053ce:	2300      	movs	r3, #0
 80053d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80053d8:	81a3      	strh	r3, [r4, #12]
 80053da:	2300      	movs	r3, #0
 80053dc:	6063      	str	r3, [r4, #4]
 80053de:	6923      	ldr	r3, [r4, #16]
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	f043 0308 	orr.w	r3, r3, #8
 80053e8:	81a3      	strh	r3, [r4, #12]
 80053ea:	6923      	ldr	r3, [r4, #16]
 80053ec:	b94b      	cbnz	r3, 8005402 <__swsetup_r+0x7a>
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80053f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053f8:	d003      	beq.n	8005402 <__swsetup_r+0x7a>
 80053fa:	4621      	mov	r1, r4
 80053fc:	4628      	mov	r0, r5
 80053fe:	f001 fdb0 	bl	8006f62 <__smakebuf_r>
 8005402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005406:	f013 0201 	ands.w	r2, r3, #1
 800540a:	d00a      	beq.n	8005422 <__swsetup_r+0x9a>
 800540c:	2200      	movs	r2, #0
 800540e:	60a2      	str	r2, [r4, #8]
 8005410:	6962      	ldr	r2, [r4, #20]
 8005412:	4252      	negs	r2, r2
 8005414:	61a2      	str	r2, [r4, #24]
 8005416:	6922      	ldr	r2, [r4, #16]
 8005418:	b942      	cbnz	r2, 800542c <__swsetup_r+0xa4>
 800541a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800541e:	d1c5      	bne.n	80053ac <__swsetup_r+0x24>
 8005420:	bd38      	pop	{r3, r4, r5, pc}
 8005422:	0799      	lsls	r1, r3, #30
 8005424:	bf58      	it	pl
 8005426:	6962      	ldrpl	r2, [r4, #20]
 8005428:	60a2      	str	r2, [r4, #8]
 800542a:	e7f4      	b.n	8005416 <__swsetup_r+0x8e>
 800542c:	2000      	movs	r0, #0
 800542e:	e7f7      	b.n	8005420 <__swsetup_r+0x98>
 8005430:	20000018 	.word	0x20000018

08005434 <memset>:
 8005434:	4603      	mov	r3, r0
 8005436:	4402      	add	r2, r0
 8005438:	4293      	cmp	r3, r2
 800543a:	d100      	bne.n	800543e <memset+0xa>
 800543c:	4770      	bx	lr
 800543e:	f803 1b01 	strb.w	r1, [r3], #1
 8005442:	e7f9      	b.n	8005438 <memset+0x4>

08005444 <_localeconv_r>:
 8005444:	4800      	ldr	r0, [pc, #0]	@ (8005448 <_localeconv_r+0x4>)
 8005446:	4770      	bx	lr
 8005448:	20000158 	.word	0x20000158

0800544c <_close_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	2300      	movs	r3, #0
 8005450:	4d05      	ldr	r5, [pc, #20]	@ (8005468 <_close_r+0x1c>)
 8005452:	4604      	mov	r4, r0
 8005454:	4608      	mov	r0, r1
 8005456:	602b      	str	r3, [r5, #0]
 8005458:	f7fc fa2f 	bl	80018ba <_close>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d102      	bne.n	8005466 <_close_r+0x1a>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	b103      	cbz	r3, 8005466 <_close_r+0x1a>
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	bd38      	pop	{r3, r4, r5, pc}
 8005468:	20000520 	.word	0x20000520

0800546c <_lseek_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4604      	mov	r4, r0
 8005470:	4608      	mov	r0, r1
 8005472:	4611      	mov	r1, r2
 8005474:	2200      	movs	r2, #0
 8005476:	4d05      	ldr	r5, [pc, #20]	@ (800548c <_lseek_r+0x20>)
 8005478:	602a      	str	r2, [r5, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	f7fc fa41 	bl	8001902 <_lseek>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d102      	bne.n	800548a <_lseek_r+0x1e>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	b103      	cbz	r3, 800548a <_lseek_r+0x1e>
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	bd38      	pop	{r3, r4, r5, pc}
 800548c:	20000520 	.word	0x20000520

08005490 <_read_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	4604      	mov	r4, r0
 8005494:	4608      	mov	r0, r1
 8005496:	4611      	mov	r1, r2
 8005498:	2200      	movs	r2, #0
 800549a:	4d05      	ldr	r5, [pc, #20]	@ (80054b0 <_read_r+0x20>)
 800549c:	602a      	str	r2, [r5, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	f7fc f9d2 	bl	8001848 <_read>
 80054a4:	1c43      	adds	r3, r0, #1
 80054a6:	d102      	bne.n	80054ae <_read_r+0x1e>
 80054a8:	682b      	ldr	r3, [r5, #0]
 80054aa:	b103      	cbz	r3, 80054ae <_read_r+0x1e>
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	bd38      	pop	{r3, r4, r5, pc}
 80054b0:	20000520 	.word	0x20000520

080054b4 <_write_r>:
 80054b4:	b538      	push	{r3, r4, r5, lr}
 80054b6:	4604      	mov	r4, r0
 80054b8:	4608      	mov	r0, r1
 80054ba:	4611      	mov	r1, r2
 80054bc:	2200      	movs	r2, #0
 80054be:	4d05      	ldr	r5, [pc, #20]	@ (80054d4 <_write_r+0x20>)
 80054c0:	602a      	str	r2, [r5, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f7fc f9dd 	bl	8001882 <_write>
 80054c8:	1c43      	adds	r3, r0, #1
 80054ca:	d102      	bne.n	80054d2 <_write_r+0x1e>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	b103      	cbz	r3, 80054d2 <_write_r+0x1e>
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	bd38      	pop	{r3, r4, r5, pc}
 80054d4:	20000520 	.word	0x20000520

080054d8 <__errno>:
 80054d8:	4b01      	ldr	r3, [pc, #4]	@ (80054e0 <__errno+0x8>)
 80054da:	6818      	ldr	r0, [r3, #0]
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20000018 	.word	0x20000018

080054e4 <__libc_init_array>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	2600      	movs	r6, #0
 80054e8:	4d0c      	ldr	r5, [pc, #48]	@ (800551c <__libc_init_array+0x38>)
 80054ea:	4c0d      	ldr	r4, [pc, #52]	@ (8005520 <__libc_init_array+0x3c>)
 80054ec:	1b64      	subs	r4, r4, r5
 80054ee:	10a4      	asrs	r4, r4, #2
 80054f0:	42a6      	cmp	r6, r4
 80054f2:	d109      	bne.n	8005508 <__libc_init_array+0x24>
 80054f4:	f001 ffe2 	bl	80074bc <_init>
 80054f8:	2600      	movs	r6, #0
 80054fa:	4d0a      	ldr	r5, [pc, #40]	@ (8005524 <__libc_init_array+0x40>)
 80054fc:	4c0a      	ldr	r4, [pc, #40]	@ (8005528 <__libc_init_array+0x44>)
 80054fe:	1b64      	subs	r4, r4, r5
 8005500:	10a4      	asrs	r4, r4, #2
 8005502:	42a6      	cmp	r6, r4
 8005504:	d105      	bne.n	8005512 <__libc_init_array+0x2e>
 8005506:	bd70      	pop	{r4, r5, r6, pc}
 8005508:	f855 3b04 	ldr.w	r3, [r5], #4
 800550c:	4798      	blx	r3
 800550e:	3601      	adds	r6, #1
 8005510:	e7ee      	b.n	80054f0 <__libc_init_array+0xc>
 8005512:	f855 3b04 	ldr.w	r3, [r5], #4
 8005516:	4798      	blx	r3
 8005518:	3601      	adds	r6, #1
 800551a:	e7f2      	b.n	8005502 <__libc_init_array+0x1e>
 800551c:	080078e4 	.word	0x080078e4
 8005520:	080078e4 	.word	0x080078e4
 8005524:	080078e4 	.word	0x080078e4
 8005528:	080078e8 	.word	0x080078e8

0800552c <__retarget_lock_init_recursive>:
 800552c:	4770      	bx	lr

0800552e <__retarget_lock_acquire_recursive>:
 800552e:	4770      	bx	lr

08005530 <__retarget_lock_release_recursive>:
 8005530:	4770      	bx	lr

08005532 <memchr>:
 8005532:	4603      	mov	r3, r0
 8005534:	b510      	push	{r4, lr}
 8005536:	b2c9      	uxtb	r1, r1
 8005538:	4402      	add	r2, r0
 800553a:	4293      	cmp	r3, r2
 800553c:	4618      	mov	r0, r3
 800553e:	d101      	bne.n	8005544 <memchr+0x12>
 8005540:	2000      	movs	r0, #0
 8005542:	e003      	b.n	800554c <memchr+0x1a>
 8005544:	7804      	ldrb	r4, [r0, #0]
 8005546:	3301      	adds	r3, #1
 8005548:	428c      	cmp	r4, r1
 800554a:	d1f6      	bne.n	800553a <memchr+0x8>
 800554c:	bd10      	pop	{r4, pc}

0800554e <memcpy>:
 800554e:	440a      	add	r2, r1
 8005550:	4291      	cmp	r1, r2
 8005552:	f100 33ff 	add.w	r3, r0, #4294967295
 8005556:	d100      	bne.n	800555a <memcpy+0xc>
 8005558:	4770      	bx	lr
 800555a:	b510      	push	{r4, lr}
 800555c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005560:	4291      	cmp	r1, r2
 8005562:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005566:	d1f9      	bne.n	800555c <memcpy+0xe>
 8005568:	bd10      	pop	{r4, pc}

0800556a <quorem>:
 800556a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556e:	6903      	ldr	r3, [r0, #16]
 8005570:	690c      	ldr	r4, [r1, #16]
 8005572:	4607      	mov	r7, r0
 8005574:	42a3      	cmp	r3, r4
 8005576:	db7e      	blt.n	8005676 <quorem+0x10c>
 8005578:	3c01      	subs	r4, #1
 800557a:	00a3      	lsls	r3, r4, #2
 800557c:	f100 0514 	add.w	r5, r0, #20
 8005580:	f101 0814 	add.w	r8, r1, #20
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800558a:	9301      	str	r3, [sp, #4]
 800558c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005590:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005594:	3301      	adds	r3, #1
 8005596:	429a      	cmp	r2, r3
 8005598:	fbb2 f6f3 	udiv	r6, r2, r3
 800559c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055a0:	d32e      	bcc.n	8005600 <quorem+0x96>
 80055a2:	f04f 0a00 	mov.w	sl, #0
 80055a6:	46c4      	mov	ip, r8
 80055a8:	46ae      	mov	lr, r5
 80055aa:	46d3      	mov	fp, sl
 80055ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055b0:	b298      	uxth	r0, r3
 80055b2:	fb06 a000 	mla	r0, r6, r0, sl
 80055b6:	0c1b      	lsrs	r3, r3, #16
 80055b8:	0c02      	lsrs	r2, r0, #16
 80055ba:	fb06 2303 	mla	r3, r6, r3, r2
 80055be:	f8de 2000 	ldr.w	r2, [lr]
 80055c2:	b280      	uxth	r0, r0
 80055c4:	b292      	uxth	r2, r2
 80055c6:	1a12      	subs	r2, r2, r0
 80055c8:	445a      	add	r2, fp
 80055ca:	f8de 0000 	ldr.w	r0, [lr]
 80055ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80055d8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80055dc:	b292      	uxth	r2, r2
 80055de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80055e2:	45e1      	cmp	r9, ip
 80055e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80055e8:	f84e 2b04 	str.w	r2, [lr], #4
 80055ec:	d2de      	bcs.n	80055ac <quorem+0x42>
 80055ee:	9b00      	ldr	r3, [sp, #0]
 80055f0:	58eb      	ldr	r3, [r5, r3]
 80055f2:	b92b      	cbnz	r3, 8005600 <quorem+0x96>
 80055f4:	9b01      	ldr	r3, [sp, #4]
 80055f6:	3b04      	subs	r3, #4
 80055f8:	429d      	cmp	r5, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	d32f      	bcc.n	800565e <quorem+0xf4>
 80055fe:	613c      	str	r4, [r7, #16]
 8005600:	4638      	mov	r0, r7
 8005602:	f001 f981 	bl	8006908 <__mcmp>
 8005606:	2800      	cmp	r0, #0
 8005608:	db25      	blt.n	8005656 <quorem+0xec>
 800560a:	4629      	mov	r1, r5
 800560c:	2000      	movs	r0, #0
 800560e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005612:	f8d1 c000 	ldr.w	ip, [r1]
 8005616:	fa1f fe82 	uxth.w	lr, r2
 800561a:	fa1f f38c 	uxth.w	r3, ip
 800561e:	eba3 030e 	sub.w	r3, r3, lr
 8005622:	4403      	add	r3, r0
 8005624:	0c12      	lsrs	r2, r2, #16
 8005626:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800562a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800562e:	b29b      	uxth	r3, r3
 8005630:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005634:	45c1      	cmp	r9, r8
 8005636:	ea4f 4022 	mov.w	r0, r2, asr #16
 800563a:	f841 3b04 	str.w	r3, [r1], #4
 800563e:	d2e6      	bcs.n	800560e <quorem+0xa4>
 8005640:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005644:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005648:	b922      	cbnz	r2, 8005654 <quorem+0xea>
 800564a:	3b04      	subs	r3, #4
 800564c:	429d      	cmp	r5, r3
 800564e:	461a      	mov	r2, r3
 8005650:	d30b      	bcc.n	800566a <quorem+0x100>
 8005652:	613c      	str	r4, [r7, #16]
 8005654:	3601      	adds	r6, #1
 8005656:	4630      	mov	r0, r6
 8005658:	b003      	add	sp, #12
 800565a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800565e:	6812      	ldr	r2, [r2, #0]
 8005660:	3b04      	subs	r3, #4
 8005662:	2a00      	cmp	r2, #0
 8005664:	d1cb      	bne.n	80055fe <quorem+0x94>
 8005666:	3c01      	subs	r4, #1
 8005668:	e7c6      	b.n	80055f8 <quorem+0x8e>
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	3b04      	subs	r3, #4
 800566e:	2a00      	cmp	r2, #0
 8005670:	d1ef      	bne.n	8005652 <quorem+0xe8>
 8005672:	3c01      	subs	r4, #1
 8005674:	e7ea      	b.n	800564c <quorem+0xe2>
 8005676:	2000      	movs	r0, #0
 8005678:	e7ee      	b.n	8005658 <quorem+0xee>
 800567a:	0000      	movs	r0, r0
 800567c:	0000      	movs	r0, r0
	...

08005680 <_dtoa_r>:
 8005680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005684:	4614      	mov	r4, r2
 8005686:	461d      	mov	r5, r3
 8005688:	69c7      	ldr	r7, [r0, #28]
 800568a:	b097      	sub	sp, #92	@ 0x5c
 800568c:	4681      	mov	r9, r0
 800568e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005692:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005694:	b97f      	cbnz	r7, 80056b6 <_dtoa_r+0x36>
 8005696:	2010      	movs	r0, #16
 8005698:	f000 fe0e 	bl	80062b8 <malloc>
 800569c:	4602      	mov	r2, r0
 800569e:	f8c9 001c 	str.w	r0, [r9, #28]
 80056a2:	b920      	cbnz	r0, 80056ae <_dtoa_r+0x2e>
 80056a4:	21ef      	movs	r1, #239	@ 0xef
 80056a6:	4bac      	ldr	r3, [pc, #688]	@ (8005958 <_dtoa_r+0x2d8>)
 80056a8:	48ac      	ldr	r0, [pc, #688]	@ (800595c <_dtoa_r+0x2dc>)
 80056aa:	f001 fce3 	bl	8007074 <__assert_func>
 80056ae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80056b2:	6007      	str	r7, [r0, #0]
 80056b4:	60c7      	str	r7, [r0, #12]
 80056b6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80056ba:	6819      	ldr	r1, [r3, #0]
 80056bc:	b159      	cbz	r1, 80056d6 <_dtoa_r+0x56>
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	2301      	movs	r3, #1
 80056c2:	4093      	lsls	r3, r2
 80056c4:	604a      	str	r2, [r1, #4]
 80056c6:	608b      	str	r3, [r1, #8]
 80056c8:	4648      	mov	r0, r9
 80056ca:	f000 feeb 	bl	80064a4 <_Bfree>
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	1e2b      	subs	r3, r5, #0
 80056d8:	bfaf      	iteee	ge
 80056da:	2300      	movge	r3, #0
 80056dc:	2201      	movlt	r2, #1
 80056de:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80056e2:	9307      	strlt	r3, [sp, #28]
 80056e4:	bfa8      	it	ge
 80056e6:	6033      	strge	r3, [r6, #0]
 80056e8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80056ec:	4b9c      	ldr	r3, [pc, #624]	@ (8005960 <_dtoa_r+0x2e0>)
 80056ee:	bfb8      	it	lt
 80056f0:	6032      	strlt	r2, [r6, #0]
 80056f2:	ea33 0308 	bics.w	r3, r3, r8
 80056f6:	d112      	bne.n	800571e <_dtoa_r+0x9e>
 80056f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80056fc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005704:	4323      	orrs	r3, r4
 8005706:	f000 855e 	beq.w	80061c6 <_dtoa_r+0xb46>
 800570a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800570c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005964 <_dtoa_r+0x2e4>
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 8560 	beq.w	80061d6 <_dtoa_r+0xb56>
 8005716:	f10a 0303 	add.w	r3, sl, #3
 800571a:	f000 bd5a 	b.w	80061d2 <_dtoa_r+0xb52>
 800571e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005722:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800572a:	2200      	movs	r2, #0
 800572c:	2300      	movs	r3, #0
 800572e:	f7fb f9ef 	bl	8000b10 <__aeabi_dcmpeq>
 8005732:	4607      	mov	r7, r0
 8005734:	b158      	cbz	r0, 800574e <_dtoa_r+0xce>
 8005736:	2301      	movs	r3, #1
 8005738:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800573a:	6013      	str	r3, [r2, #0]
 800573c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800573e:	b113      	cbz	r3, 8005746 <_dtoa_r+0xc6>
 8005740:	4b89      	ldr	r3, [pc, #548]	@ (8005968 <_dtoa_r+0x2e8>)
 8005742:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800596c <_dtoa_r+0x2ec>
 800574a:	f000 bd44 	b.w	80061d6 <_dtoa_r+0xb56>
 800574e:	ab14      	add	r3, sp, #80	@ 0x50
 8005750:	9301      	str	r3, [sp, #4]
 8005752:	ab15      	add	r3, sp, #84	@ 0x54
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	4648      	mov	r0, r9
 8005758:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800575c:	f001 f984 	bl	8006a68 <__d2b>
 8005760:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005764:	9003      	str	r0, [sp, #12]
 8005766:	2e00      	cmp	r6, #0
 8005768:	d078      	beq.n	800585c <_dtoa_r+0x1dc>
 800576a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800576e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005770:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005778:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800577c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005780:	9712      	str	r7, [sp, #72]	@ 0x48
 8005782:	4619      	mov	r1, r3
 8005784:	2200      	movs	r2, #0
 8005786:	4b7a      	ldr	r3, [pc, #488]	@ (8005970 <_dtoa_r+0x2f0>)
 8005788:	f7fa fda2 	bl	80002d0 <__aeabi_dsub>
 800578c:	a36c      	add	r3, pc, #432	@ (adr r3, 8005940 <_dtoa_r+0x2c0>)
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f7fa ff55 	bl	8000640 <__aeabi_dmul>
 8005796:	a36c      	add	r3, pc, #432	@ (adr r3, 8005948 <_dtoa_r+0x2c8>)
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f7fa fd9a 	bl	80002d4 <__adddf3>
 80057a0:	4604      	mov	r4, r0
 80057a2:	4630      	mov	r0, r6
 80057a4:	460d      	mov	r5, r1
 80057a6:	f7fa fee1 	bl	800056c <__aeabi_i2d>
 80057aa:	a369      	add	r3, pc, #420	@ (adr r3, 8005950 <_dtoa_r+0x2d0>)
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	f7fa ff46 	bl	8000640 <__aeabi_dmul>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4620      	mov	r0, r4
 80057ba:	4629      	mov	r1, r5
 80057bc:	f7fa fd8a 	bl	80002d4 <__adddf3>
 80057c0:	4604      	mov	r4, r0
 80057c2:	460d      	mov	r5, r1
 80057c4:	f7fb f9ec 	bl	8000ba0 <__aeabi_d2iz>
 80057c8:	2200      	movs	r2, #0
 80057ca:	4607      	mov	r7, r0
 80057cc:	2300      	movs	r3, #0
 80057ce:	4620      	mov	r0, r4
 80057d0:	4629      	mov	r1, r5
 80057d2:	f7fb f9a7 	bl	8000b24 <__aeabi_dcmplt>
 80057d6:	b140      	cbz	r0, 80057ea <_dtoa_r+0x16a>
 80057d8:	4638      	mov	r0, r7
 80057da:	f7fa fec7 	bl	800056c <__aeabi_i2d>
 80057de:	4622      	mov	r2, r4
 80057e0:	462b      	mov	r3, r5
 80057e2:	f7fb f995 	bl	8000b10 <__aeabi_dcmpeq>
 80057e6:	b900      	cbnz	r0, 80057ea <_dtoa_r+0x16a>
 80057e8:	3f01      	subs	r7, #1
 80057ea:	2f16      	cmp	r7, #22
 80057ec:	d854      	bhi.n	8005898 <_dtoa_r+0x218>
 80057ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057f2:	4b60      	ldr	r3, [pc, #384]	@ (8005974 <_dtoa_r+0x2f4>)
 80057f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fc:	f7fb f992 	bl	8000b24 <__aeabi_dcmplt>
 8005800:	2800      	cmp	r0, #0
 8005802:	d04b      	beq.n	800589c <_dtoa_r+0x21c>
 8005804:	2300      	movs	r3, #0
 8005806:	3f01      	subs	r7, #1
 8005808:	930f      	str	r3, [sp, #60]	@ 0x3c
 800580a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800580c:	1b9b      	subs	r3, r3, r6
 800580e:	1e5a      	subs	r2, r3, #1
 8005810:	bf49      	itett	mi
 8005812:	f1c3 0301 	rsbmi	r3, r3, #1
 8005816:	2300      	movpl	r3, #0
 8005818:	9304      	strmi	r3, [sp, #16]
 800581a:	2300      	movmi	r3, #0
 800581c:	9209      	str	r2, [sp, #36]	@ 0x24
 800581e:	bf54      	ite	pl
 8005820:	9304      	strpl	r3, [sp, #16]
 8005822:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005824:	2f00      	cmp	r7, #0
 8005826:	db3b      	blt.n	80058a0 <_dtoa_r+0x220>
 8005828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800582a:	970e      	str	r7, [sp, #56]	@ 0x38
 800582c:	443b      	add	r3, r7
 800582e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005830:	2300      	movs	r3, #0
 8005832:	930a      	str	r3, [sp, #40]	@ 0x28
 8005834:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005836:	2b09      	cmp	r3, #9
 8005838:	d865      	bhi.n	8005906 <_dtoa_r+0x286>
 800583a:	2b05      	cmp	r3, #5
 800583c:	bfc4      	itt	gt
 800583e:	3b04      	subgt	r3, #4
 8005840:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005842:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005844:	bfc8      	it	gt
 8005846:	2400      	movgt	r4, #0
 8005848:	f1a3 0302 	sub.w	r3, r3, #2
 800584c:	bfd8      	it	le
 800584e:	2401      	movle	r4, #1
 8005850:	2b03      	cmp	r3, #3
 8005852:	d864      	bhi.n	800591e <_dtoa_r+0x29e>
 8005854:	e8df f003 	tbb	[pc, r3]
 8005858:	2c385553 	.word	0x2c385553
 800585c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005860:	441e      	add	r6, r3
 8005862:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005866:	2b20      	cmp	r3, #32
 8005868:	bfc1      	itttt	gt
 800586a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800586e:	fa08 f803 	lslgt.w	r8, r8, r3
 8005872:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005876:	fa24 f303 	lsrgt.w	r3, r4, r3
 800587a:	bfd6      	itet	le
 800587c:	f1c3 0320 	rsble	r3, r3, #32
 8005880:	ea48 0003 	orrgt.w	r0, r8, r3
 8005884:	fa04 f003 	lslle.w	r0, r4, r3
 8005888:	f7fa fe60 	bl	800054c <__aeabi_ui2d>
 800588c:	2201      	movs	r2, #1
 800588e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005892:	3e01      	subs	r6, #1
 8005894:	9212      	str	r2, [sp, #72]	@ 0x48
 8005896:	e774      	b.n	8005782 <_dtoa_r+0x102>
 8005898:	2301      	movs	r3, #1
 800589a:	e7b5      	b.n	8005808 <_dtoa_r+0x188>
 800589c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800589e:	e7b4      	b.n	800580a <_dtoa_r+0x18a>
 80058a0:	9b04      	ldr	r3, [sp, #16]
 80058a2:	1bdb      	subs	r3, r3, r7
 80058a4:	9304      	str	r3, [sp, #16]
 80058a6:	427b      	negs	r3, r7
 80058a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80058aa:	2300      	movs	r3, #0
 80058ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80058ae:	e7c1      	b.n	8005834 <_dtoa_r+0x1b4>
 80058b0:	2301      	movs	r3, #1
 80058b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80058b6:	eb07 0b03 	add.w	fp, r7, r3
 80058ba:	f10b 0301 	add.w	r3, fp, #1
 80058be:	2b01      	cmp	r3, #1
 80058c0:	9308      	str	r3, [sp, #32]
 80058c2:	bfb8      	it	lt
 80058c4:	2301      	movlt	r3, #1
 80058c6:	e006      	b.n	80058d6 <_dtoa_r+0x256>
 80058c8:	2301      	movs	r3, #1
 80058ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	dd28      	ble.n	8005924 <_dtoa_r+0x2a4>
 80058d2:	469b      	mov	fp, r3
 80058d4:	9308      	str	r3, [sp, #32]
 80058d6:	2100      	movs	r1, #0
 80058d8:	2204      	movs	r2, #4
 80058da:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80058de:	f102 0514 	add.w	r5, r2, #20
 80058e2:	429d      	cmp	r5, r3
 80058e4:	d926      	bls.n	8005934 <_dtoa_r+0x2b4>
 80058e6:	6041      	str	r1, [r0, #4]
 80058e8:	4648      	mov	r0, r9
 80058ea:	f000 fd9b 	bl	8006424 <_Balloc>
 80058ee:	4682      	mov	sl, r0
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d143      	bne.n	800597c <_dtoa_r+0x2fc>
 80058f4:	4602      	mov	r2, r0
 80058f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80058fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005978 <_dtoa_r+0x2f8>)
 80058fc:	e6d4      	b.n	80056a8 <_dtoa_r+0x28>
 80058fe:	2300      	movs	r3, #0
 8005900:	e7e3      	b.n	80058ca <_dtoa_r+0x24a>
 8005902:	2300      	movs	r3, #0
 8005904:	e7d5      	b.n	80058b2 <_dtoa_r+0x232>
 8005906:	2401      	movs	r4, #1
 8005908:	2300      	movs	r3, #0
 800590a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800590c:	9320      	str	r3, [sp, #128]	@ 0x80
 800590e:	f04f 3bff 	mov.w	fp, #4294967295
 8005912:	2200      	movs	r2, #0
 8005914:	2312      	movs	r3, #18
 8005916:	f8cd b020 	str.w	fp, [sp, #32]
 800591a:	9221      	str	r2, [sp, #132]	@ 0x84
 800591c:	e7db      	b.n	80058d6 <_dtoa_r+0x256>
 800591e:	2301      	movs	r3, #1
 8005920:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005922:	e7f4      	b.n	800590e <_dtoa_r+0x28e>
 8005924:	f04f 0b01 	mov.w	fp, #1
 8005928:	465b      	mov	r3, fp
 800592a:	f8cd b020 	str.w	fp, [sp, #32]
 800592e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005932:	e7d0      	b.n	80058d6 <_dtoa_r+0x256>
 8005934:	3101      	adds	r1, #1
 8005936:	0052      	lsls	r2, r2, #1
 8005938:	e7d1      	b.n	80058de <_dtoa_r+0x25e>
 800593a:	bf00      	nop
 800593c:	f3af 8000 	nop.w
 8005940:	636f4361 	.word	0x636f4361
 8005944:	3fd287a7 	.word	0x3fd287a7
 8005948:	8b60c8b3 	.word	0x8b60c8b3
 800594c:	3fc68a28 	.word	0x3fc68a28
 8005950:	509f79fb 	.word	0x509f79fb
 8005954:	3fd34413 	.word	0x3fd34413
 8005958:	080075a7 	.word	0x080075a7
 800595c:	080075be 	.word	0x080075be
 8005960:	7ff00000 	.word	0x7ff00000
 8005964:	080075a3 	.word	0x080075a3
 8005968:	08007577 	.word	0x08007577
 800596c:	08007576 	.word	0x08007576
 8005970:	3ff80000 	.word	0x3ff80000
 8005974:	08007710 	.word	0x08007710
 8005978:	08007616 	.word	0x08007616
 800597c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005980:	6018      	str	r0, [r3, #0]
 8005982:	9b08      	ldr	r3, [sp, #32]
 8005984:	2b0e      	cmp	r3, #14
 8005986:	f200 80a1 	bhi.w	8005acc <_dtoa_r+0x44c>
 800598a:	2c00      	cmp	r4, #0
 800598c:	f000 809e 	beq.w	8005acc <_dtoa_r+0x44c>
 8005990:	2f00      	cmp	r7, #0
 8005992:	dd33      	ble.n	80059fc <_dtoa_r+0x37c>
 8005994:	4b9c      	ldr	r3, [pc, #624]	@ (8005c08 <_dtoa_r+0x588>)
 8005996:	f007 020f 	and.w	r2, r7, #15
 800599a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800599e:	05f8      	lsls	r0, r7, #23
 80059a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80059a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80059ac:	d516      	bpl.n	80059dc <_dtoa_r+0x35c>
 80059ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059b2:	4b96      	ldr	r3, [pc, #600]	@ (8005c0c <_dtoa_r+0x58c>)
 80059b4:	2603      	movs	r6, #3
 80059b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059ba:	f7fa ff6b 	bl	8000894 <__aeabi_ddiv>
 80059be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059c2:	f004 040f 	and.w	r4, r4, #15
 80059c6:	4d91      	ldr	r5, [pc, #580]	@ (8005c0c <_dtoa_r+0x58c>)
 80059c8:	b954      	cbnz	r4, 80059e0 <_dtoa_r+0x360>
 80059ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80059ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059d2:	f7fa ff5f 	bl	8000894 <__aeabi_ddiv>
 80059d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059da:	e028      	b.n	8005a2e <_dtoa_r+0x3ae>
 80059dc:	2602      	movs	r6, #2
 80059de:	e7f2      	b.n	80059c6 <_dtoa_r+0x346>
 80059e0:	07e1      	lsls	r1, r4, #31
 80059e2:	d508      	bpl.n	80059f6 <_dtoa_r+0x376>
 80059e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80059e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059ec:	f7fa fe28 	bl	8000640 <__aeabi_dmul>
 80059f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80059f4:	3601      	adds	r6, #1
 80059f6:	1064      	asrs	r4, r4, #1
 80059f8:	3508      	adds	r5, #8
 80059fa:	e7e5      	b.n	80059c8 <_dtoa_r+0x348>
 80059fc:	f000 80af 	beq.w	8005b5e <_dtoa_r+0x4de>
 8005a00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a04:	427c      	negs	r4, r7
 8005a06:	4b80      	ldr	r3, [pc, #512]	@ (8005c08 <_dtoa_r+0x588>)
 8005a08:	f004 020f 	and.w	r2, r4, #15
 8005a0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	f7fa fe14 	bl	8000640 <__aeabi_dmul>
 8005a18:	2602      	movs	r6, #2
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a20:	4d7a      	ldr	r5, [pc, #488]	@ (8005c0c <_dtoa_r+0x58c>)
 8005a22:	1124      	asrs	r4, r4, #4
 8005a24:	2c00      	cmp	r4, #0
 8005a26:	f040 808f 	bne.w	8005b48 <_dtoa_r+0x4c8>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1d3      	bne.n	80059d6 <_dtoa_r+0x356>
 8005a2e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005a32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8094 	beq.w	8005b62 <_dtoa_r+0x4e2>
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	4629      	mov	r1, r5
 8005a40:	4b73      	ldr	r3, [pc, #460]	@ (8005c10 <_dtoa_r+0x590>)
 8005a42:	f7fb f86f 	bl	8000b24 <__aeabi_dcmplt>
 8005a46:	2800      	cmp	r0, #0
 8005a48:	f000 808b 	beq.w	8005b62 <_dtoa_r+0x4e2>
 8005a4c:	9b08      	ldr	r3, [sp, #32]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 8087 	beq.w	8005b62 <_dtoa_r+0x4e2>
 8005a54:	f1bb 0f00 	cmp.w	fp, #0
 8005a58:	dd34      	ble.n	8005ac4 <_dtoa_r+0x444>
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	4629      	mov	r1, r5
 8005a60:	4b6c      	ldr	r3, [pc, #432]	@ (8005c14 <_dtoa_r+0x594>)
 8005a62:	f7fa fded 	bl	8000640 <__aeabi_dmul>
 8005a66:	465c      	mov	r4, fp
 8005a68:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a6c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005a70:	3601      	adds	r6, #1
 8005a72:	4630      	mov	r0, r6
 8005a74:	f7fa fd7a 	bl	800056c <__aeabi_i2d>
 8005a78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a7c:	f7fa fde0 	bl	8000640 <__aeabi_dmul>
 8005a80:	2200      	movs	r2, #0
 8005a82:	4b65      	ldr	r3, [pc, #404]	@ (8005c18 <_dtoa_r+0x598>)
 8005a84:	f7fa fc26 	bl	80002d4 <__adddf3>
 8005a88:	4605      	mov	r5, r0
 8005a8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a8e:	2c00      	cmp	r4, #0
 8005a90:	d16a      	bne.n	8005b68 <_dtoa_r+0x4e8>
 8005a92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a96:	2200      	movs	r2, #0
 8005a98:	4b60      	ldr	r3, [pc, #384]	@ (8005c1c <_dtoa_r+0x59c>)
 8005a9a:	f7fa fc19 	bl	80002d0 <__aeabi_dsub>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005aa6:	462a      	mov	r2, r5
 8005aa8:	4633      	mov	r3, r6
 8005aaa:	f7fb f859 	bl	8000b60 <__aeabi_dcmpgt>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	f040 8298 	bne.w	8005fe4 <_dtoa_r+0x964>
 8005ab4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ab8:	462a      	mov	r2, r5
 8005aba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005abe:	f7fb f831 	bl	8000b24 <__aeabi_dcmplt>
 8005ac2:	bb38      	cbnz	r0, 8005b14 <_dtoa_r+0x494>
 8005ac4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005ac8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005acc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f2c0 8157 	blt.w	8005d82 <_dtoa_r+0x702>
 8005ad4:	2f0e      	cmp	r7, #14
 8005ad6:	f300 8154 	bgt.w	8005d82 <_dtoa_r+0x702>
 8005ada:	4b4b      	ldr	r3, [pc, #300]	@ (8005c08 <_dtoa_r+0x588>)
 8005adc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ae0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ae4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ae8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f280 80e5 	bge.w	8005cba <_dtoa_r+0x63a>
 8005af0:	9b08      	ldr	r3, [sp, #32]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f300 80e1 	bgt.w	8005cba <_dtoa_r+0x63a>
 8005af8:	d10c      	bne.n	8005b14 <_dtoa_r+0x494>
 8005afa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005afe:	2200      	movs	r2, #0
 8005b00:	4b46      	ldr	r3, [pc, #280]	@ (8005c1c <_dtoa_r+0x59c>)
 8005b02:	f7fa fd9d 	bl	8000640 <__aeabi_dmul>
 8005b06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b0a:	f7fb f81f 	bl	8000b4c <__aeabi_dcmpge>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	f000 8266 	beq.w	8005fe0 <_dtoa_r+0x960>
 8005b14:	2400      	movs	r4, #0
 8005b16:	4625      	mov	r5, r4
 8005b18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b1a:	4656      	mov	r6, sl
 8005b1c:	ea6f 0803 	mvn.w	r8, r3
 8005b20:	2700      	movs	r7, #0
 8005b22:	4621      	mov	r1, r4
 8005b24:	4648      	mov	r0, r9
 8005b26:	f000 fcbd 	bl	80064a4 <_Bfree>
 8005b2a:	2d00      	cmp	r5, #0
 8005b2c:	f000 80bd 	beq.w	8005caa <_dtoa_r+0x62a>
 8005b30:	b12f      	cbz	r7, 8005b3e <_dtoa_r+0x4be>
 8005b32:	42af      	cmp	r7, r5
 8005b34:	d003      	beq.n	8005b3e <_dtoa_r+0x4be>
 8005b36:	4639      	mov	r1, r7
 8005b38:	4648      	mov	r0, r9
 8005b3a:	f000 fcb3 	bl	80064a4 <_Bfree>
 8005b3e:	4629      	mov	r1, r5
 8005b40:	4648      	mov	r0, r9
 8005b42:	f000 fcaf 	bl	80064a4 <_Bfree>
 8005b46:	e0b0      	b.n	8005caa <_dtoa_r+0x62a>
 8005b48:	07e2      	lsls	r2, r4, #31
 8005b4a:	d505      	bpl.n	8005b58 <_dtoa_r+0x4d8>
 8005b4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b50:	f7fa fd76 	bl	8000640 <__aeabi_dmul>
 8005b54:	2301      	movs	r3, #1
 8005b56:	3601      	adds	r6, #1
 8005b58:	1064      	asrs	r4, r4, #1
 8005b5a:	3508      	adds	r5, #8
 8005b5c:	e762      	b.n	8005a24 <_dtoa_r+0x3a4>
 8005b5e:	2602      	movs	r6, #2
 8005b60:	e765      	b.n	8005a2e <_dtoa_r+0x3ae>
 8005b62:	46b8      	mov	r8, r7
 8005b64:	9c08      	ldr	r4, [sp, #32]
 8005b66:	e784      	b.n	8005a72 <_dtoa_r+0x3f2>
 8005b68:	4b27      	ldr	r3, [pc, #156]	@ (8005c08 <_dtoa_r+0x588>)
 8005b6a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b74:	4454      	add	r4, sl
 8005b76:	2900      	cmp	r1, #0
 8005b78:	d054      	beq.n	8005c24 <_dtoa_r+0x5a4>
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	4928      	ldr	r1, [pc, #160]	@ (8005c20 <_dtoa_r+0x5a0>)
 8005b7e:	f7fa fe89 	bl	8000894 <__aeabi_ddiv>
 8005b82:	4633      	mov	r3, r6
 8005b84:	462a      	mov	r2, r5
 8005b86:	f7fa fba3 	bl	80002d0 <__aeabi_dsub>
 8005b8a:	4656      	mov	r6, sl
 8005b8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b94:	f7fb f804 	bl	8000ba0 <__aeabi_d2iz>
 8005b98:	4605      	mov	r5, r0
 8005b9a:	f7fa fce7 	bl	800056c <__aeabi_i2d>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ba6:	f7fa fb93 	bl	80002d0 <__aeabi_dsub>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	3530      	adds	r5, #48	@ 0x30
 8005bb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005bb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bb8:	f806 5b01 	strb.w	r5, [r6], #1
 8005bbc:	f7fa ffb2 	bl	8000b24 <__aeabi_dcmplt>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d172      	bne.n	8005caa <_dtoa_r+0x62a>
 8005bc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bc8:	2000      	movs	r0, #0
 8005bca:	4911      	ldr	r1, [pc, #68]	@ (8005c10 <_dtoa_r+0x590>)
 8005bcc:	f7fa fb80 	bl	80002d0 <__aeabi_dsub>
 8005bd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bd4:	f7fa ffa6 	bl	8000b24 <__aeabi_dcmplt>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	f040 80b4 	bne.w	8005d46 <_dtoa_r+0x6c6>
 8005bde:	42a6      	cmp	r6, r4
 8005be0:	f43f af70 	beq.w	8005ac4 <_dtoa_r+0x444>
 8005be4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005be8:	2200      	movs	r2, #0
 8005bea:	4b0a      	ldr	r3, [pc, #40]	@ (8005c14 <_dtoa_r+0x594>)
 8005bec:	f7fa fd28 	bl	8000640 <__aeabi_dmul>
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bfa:	4b06      	ldr	r3, [pc, #24]	@ (8005c14 <_dtoa_r+0x594>)
 8005bfc:	f7fa fd20 	bl	8000640 <__aeabi_dmul>
 8005c00:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c04:	e7c4      	b.n	8005b90 <_dtoa_r+0x510>
 8005c06:	bf00      	nop
 8005c08:	08007710 	.word	0x08007710
 8005c0c:	080076e8 	.word	0x080076e8
 8005c10:	3ff00000 	.word	0x3ff00000
 8005c14:	40240000 	.word	0x40240000
 8005c18:	401c0000 	.word	0x401c0000
 8005c1c:	40140000 	.word	0x40140000
 8005c20:	3fe00000 	.word	0x3fe00000
 8005c24:	4631      	mov	r1, r6
 8005c26:	4628      	mov	r0, r5
 8005c28:	f7fa fd0a 	bl	8000640 <__aeabi_dmul>
 8005c2c:	4656      	mov	r6, sl
 8005c2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c32:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005c34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c38:	f7fa ffb2 	bl	8000ba0 <__aeabi_d2iz>
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	f7fa fc95 	bl	800056c <__aeabi_i2d>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c4a:	f7fa fb41 	bl	80002d0 <__aeabi_dsub>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	3530      	adds	r5, #48	@ 0x30
 8005c54:	f806 5b01 	strb.w	r5, [r6], #1
 8005c58:	42a6      	cmp	r6, r4
 8005c5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005c5e:	f04f 0200 	mov.w	r2, #0
 8005c62:	d124      	bne.n	8005cae <_dtoa_r+0x62e>
 8005c64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c68:	4bae      	ldr	r3, [pc, #696]	@ (8005f24 <_dtoa_r+0x8a4>)
 8005c6a:	f7fa fb33 	bl	80002d4 <__adddf3>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c76:	f7fa ff73 	bl	8000b60 <__aeabi_dcmpgt>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d163      	bne.n	8005d46 <_dtoa_r+0x6c6>
 8005c7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c82:	2000      	movs	r0, #0
 8005c84:	49a7      	ldr	r1, [pc, #668]	@ (8005f24 <_dtoa_r+0x8a4>)
 8005c86:	f7fa fb23 	bl	80002d0 <__aeabi_dsub>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c92:	f7fa ff47 	bl	8000b24 <__aeabi_dcmplt>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	f43f af14 	beq.w	8005ac4 <_dtoa_r+0x444>
 8005c9c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005c9e:	1e73      	subs	r3, r6, #1
 8005ca0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ca2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ca6:	2b30      	cmp	r3, #48	@ 0x30
 8005ca8:	d0f8      	beq.n	8005c9c <_dtoa_r+0x61c>
 8005caa:	4647      	mov	r7, r8
 8005cac:	e03b      	b.n	8005d26 <_dtoa_r+0x6a6>
 8005cae:	4b9e      	ldr	r3, [pc, #632]	@ (8005f28 <_dtoa_r+0x8a8>)
 8005cb0:	f7fa fcc6 	bl	8000640 <__aeabi_dmul>
 8005cb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005cb8:	e7bc      	b.n	8005c34 <_dtoa_r+0x5b4>
 8005cba:	4656      	mov	r6, sl
 8005cbc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005cc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	f7fa fde4 	bl	8000894 <__aeabi_ddiv>
 8005ccc:	f7fa ff68 	bl	8000ba0 <__aeabi_d2iz>
 8005cd0:	4680      	mov	r8, r0
 8005cd2:	f7fa fc4b 	bl	800056c <__aeabi_i2d>
 8005cd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cda:	f7fa fcb1 	bl	8000640 <__aeabi_dmul>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	f7fa faf3 	bl	80002d0 <__aeabi_dsub>
 8005cea:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005cee:	9d08      	ldr	r5, [sp, #32]
 8005cf0:	f806 4b01 	strb.w	r4, [r6], #1
 8005cf4:	eba6 040a 	sub.w	r4, r6, sl
 8005cf8:	42a5      	cmp	r5, r4
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	d133      	bne.n	8005d68 <_dtoa_r+0x6e8>
 8005d00:	f7fa fae8 	bl	80002d4 <__adddf3>
 8005d04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d08:	4604      	mov	r4, r0
 8005d0a:	460d      	mov	r5, r1
 8005d0c:	f7fa ff28 	bl	8000b60 <__aeabi_dcmpgt>
 8005d10:	b9c0      	cbnz	r0, 8005d44 <_dtoa_r+0x6c4>
 8005d12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d16:	4620      	mov	r0, r4
 8005d18:	4629      	mov	r1, r5
 8005d1a:	f7fa fef9 	bl	8000b10 <__aeabi_dcmpeq>
 8005d1e:	b110      	cbz	r0, 8005d26 <_dtoa_r+0x6a6>
 8005d20:	f018 0f01 	tst.w	r8, #1
 8005d24:	d10e      	bne.n	8005d44 <_dtoa_r+0x6c4>
 8005d26:	4648      	mov	r0, r9
 8005d28:	9903      	ldr	r1, [sp, #12]
 8005d2a:	f000 fbbb 	bl	80064a4 <_Bfree>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	7033      	strb	r3, [r6, #0]
 8005d32:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005d34:	3701      	adds	r7, #1
 8005d36:	601f      	str	r7, [r3, #0]
 8005d38:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 824b 	beq.w	80061d6 <_dtoa_r+0xb56>
 8005d40:	601e      	str	r6, [r3, #0]
 8005d42:	e248      	b.n	80061d6 <_dtoa_r+0xb56>
 8005d44:	46b8      	mov	r8, r7
 8005d46:	4633      	mov	r3, r6
 8005d48:	461e      	mov	r6, r3
 8005d4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d4e:	2a39      	cmp	r2, #57	@ 0x39
 8005d50:	d106      	bne.n	8005d60 <_dtoa_r+0x6e0>
 8005d52:	459a      	cmp	sl, r3
 8005d54:	d1f8      	bne.n	8005d48 <_dtoa_r+0x6c8>
 8005d56:	2230      	movs	r2, #48	@ 0x30
 8005d58:	f108 0801 	add.w	r8, r8, #1
 8005d5c:	f88a 2000 	strb.w	r2, [sl]
 8005d60:	781a      	ldrb	r2, [r3, #0]
 8005d62:	3201      	adds	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	e7a0      	b.n	8005caa <_dtoa_r+0x62a>
 8005d68:	2200      	movs	r2, #0
 8005d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8005f28 <_dtoa_r+0x8a8>)
 8005d6c:	f7fa fc68 	bl	8000640 <__aeabi_dmul>
 8005d70:	2200      	movs	r2, #0
 8005d72:	2300      	movs	r3, #0
 8005d74:	4604      	mov	r4, r0
 8005d76:	460d      	mov	r5, r1
 8005d78:	f7fa feca 	bl	8000b10 <__aeabi_dcmpeq>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d09f      	beq.n	8005cc0 <_dtoa_r+0x640>
 8005d80:	e7d1      	b.n	8005d26 <_dtoa_r+0x6a6>
 8005d82:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d84:	2a00      	cmp	r2, #0
 8005d86:	f000 80ea 	beq.w	8005f5e <_dtoa_r+0x8de>
 8005d8a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d8c:	2a01      	cmp	r2, #1
 8005d8e:	f300 80cd 	bgt.w	8005f2c <_dtoa_r+0x8ac>
 8005d92:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d94:	2a00      	cmp	r2, #0
 8005d96:	f000 80c1 	beq.w	8005f1c <_dtoa_r+0x89c>
 8005d9a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d9e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005da0:	9e04      	ldr	r6, [sp, #16]
 8005da2:	9a04      	ldr	r2, [sp, #16]
 8005da4:	2101      	movs	r1, #1
 8005da6:	441a      	add	r2, r3
 8005da8:	9204      	str	r2, [sp, #16]
 8005daa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dac:	4648      	mov	r0, r9
 8005dae:	441a      	add	r2, r3
 8005db0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005db2:	f000 fc2b 	bl	800660c <__i2b>
 8005db6:	4605      	mov	r5, r0
 8005db8:	b166      	cbz	r6, 8005dd4 <_dtoa_r+0x754>
 8005dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dd09      	ble.n	8005dd4 <_dtoa_r+0x754>
 8005dc0:	42b3      	cmp	r3, r6
 8005dc2:	bfa8      	it	ge
 8005dc4:	4633      	movge	r3, r6
 8005dc6:	9a04      	ldr	r2, [sp, #16]
 8005dc8:	1af6      	subs	r6, r6, r3
 8005dca:	1ad2      	subs	r2, r2, r3
 8005dcc:	9204      	str	r2, [sp, #16]
 8005dce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dd6:	b30b      	cbz	r3, 8005e1c <_dtoa_r+0x79c>
 8005dd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 80c6 	beq.w	8005f6c <_dtoa_r+0x8ec>
 8005de0:	2c00      	cmp	r4, #0
 8005de2:	f000 80c0 	beq.w	8005f66 <_dtoa_r+0x8e6>
 8005de6:	4629      	mov	r1, r5
 8005de8:	4622      	mov	r2, r4
 8005dea:	4648      	mov	r0, r9
 8005dec:	f000 fcc6 	bl	800677c <__pow5mult>
 8005df0:	9a03      	ldr	r2, [sp, #12]
 8005df2:	4601      	mov	r1, r0
 8005df4:	4605      	mov	r5, r0
 8005df6:	4648      	mov	r0, r9
 8005df8:	f000 fc1e 	bl	8006638 <__multiply>
 8005dfc:	9903      	ldr	r1, [sp, #12]
 8005dfe:	4680      	mov	r8, r0
 8005e00:	4648      	mov	r0, r9
 8005e02:	f000 fb4f 	bl	80064a4 <_Bfree>
 8005e06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e08:	1b1b      	subs	r3, r3, r4
 8005e0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e0c:	f000 80b1 	beq.w	8005f72 <_dtoa_r+0x8f2>
 8005e10:	4641      	mov	r1, r8
 8005e12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e14:	4648      	mov	r0, r9
 8005e16:	f000 fcb1 	bl	800677c <__pow5mult>
 8005e1a:	9003      	str	r0, [sp, #12]
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	4648      	mov	r0, r9
 8005e20:	f000 fbf4 	bl	800660c <__i2b>
 8005e24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e26:	4604      	mov	r4, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 81d8 	beq.w	80061de <_dtoa_r+0xb5e>
 8005e2e:	461a      	mov	r2, r3
 8005e30:	4601      	mov	r1, r0
 8005e32:	4648      	mov	r0, r9
 8005e34:	f000 fca2 	bl	800677c <__pow5mult>
 8005e38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	f300 809f 	bgt.w	8005f80 <_dtoa_r+0x900>
 8005e42:	9b06      	ldr	r3, [sp, #24]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f040 8097 	bne.w	8005f78 <_dtoa_r+0x8f8>
 8005e4a:	9b07      	ldr	r3, [sp, #28]
 8005e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f040 8093 	bne.w	8005f7c <_dtoa_r+0x8fc>
 8005e56:	9b07      	ldr	r3, [sp, #28]
 8005e58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e5c:	0d1b      	lsrs	r3, r3, #20
 8005e5e:	051b      	lsls	r3, r3, #20
 8005e60:	b133      	cbz	r3, 8005e70 <_dtoa_r+0x7f0>
 8005e62:	9b04      	ldr	r3, [sp, #16]
 8005e64:	3301      	adds	r3, #1
 8005e66:	9304      	str	r3, [sp, #16]
 8005e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e6e:	2301      	movs	r3, #1
 8005e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 81b8 	beq.w	80061ea <_dtoa_r+0xb6a>
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e80:	6918      	ldr	r0, [r3, #16]
 8005e82:	f000 fb77 	bl	8006574 <__hi0bits>
 8005e86:	f1c0 0020 	rsb	r0, r0, #32
 8005e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e8c:	4418      	add	r0, r3
 8005e8e:	f010 001f 	ands.w	r0, r0, #31
 8005e92:	f000 8082 	beq.w	8005f9a <_dtoa_r+0x91a>
 8005e96:	f1c0 0320 	rsb	r3, r0, #32
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	dd73      	ble.n	8005f86 <_dtoa_r+0x906>
 8005e9e:	9b04      	ldr	r3, [sp, #16]
 8005ea0:	f1c0 001c 	rsb	r0, r0, #28
 8005ea4:	4403      	add	r3, r0
 8005ea6:	9304      	str	r3, [sp, #16]
 8005ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eaa:	4406      	add	r6, r0
 8005eac:	4403      	add	r3, r0
 8005eae:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eb0:	9b04      	ldr	r3, [sp, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	dd05      	ble.n	8005ec2 <_dtoa_r+0x842>
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	4648      	mov	r0, r9
 8005eba:	9903      	ldr	r1, [sp, #12]
 8005ebc:	f000 fcb8 	bl	8006830 <__lshift>
 8005ec0:	9003      	str	r0, [sp, #12]
 8005ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	dd05      	ble.n	8005ed4 <_dtoa_r+0x854>
 8005ec8:	4621      	mov	r1, r4
 8005eca:	461a      	mov	r2, r3
 8005ecc:	4648      	mov	r0, r9
 8005ece:	f000 fcaf 	bl	8006830 <__lshift>
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d061      	beq.n	8005f9e <_dtoa_r+0x91e>
 8005eda:	4621      	mov	r1, r4
 8005edc:	9803      	ldr	r0, [sp, #12]
 8005ede:	f000 fd13 	bl	8006908 <__mcmp>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	da5b      	bge.n	8005f9e <_dtoa_r+0x91e>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	220a      	movs	r2, #10
 8005eea:	4648      	mov	r0, r9
 8005eec:	9903      	ldr	r1, [sp, #12]
 8005eee:	f000 fafb 	bl	80064e8 <__multadd>
 8005ef2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ef4:	f107 38ff 	add.w	r8, r7, #4294967295
 8005ef8:	9003      	str	r0, [sp, #12]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 8177 	beq.w	80061ee <_dtoa_r+0xb6e>
 8005f00:	4629      	mov	r1, r5
 8005f02:	2300      	movs	r3, #0
 8005f04:	220a      	movs	r2, #10
 8005f06:	4648      	mov	r0, r9
 8005f08:	f000 faee 	bl	80064e8 <__multadd>
 8005f0c:	f1bb 0f00 	cmp.w	fp, #0
 8005f10:	4605      	mov	r5, r0
 8005f12:	dc6f      	bgt.n	8005ff4 <_dtoa_r+0x974>
 8005f14:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	dc49      	bgt.n	8005fae <_dtoa_r+0x92e>
 8005f1a:	e06b      	b.n	8005ff4 <_dtoa_r+0x974>
 8005f1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f22:	e73c      	b.n	8005d9e <_dtoa_r+0x71e>
 8005f24:	3fe00000 	.word	0x3fe00000
 8005f28:	40240000 	.word	0x40240000
 8005f2c:	9b08      	ldr	r3, [sp, #32]
 8005f2e:	1e5c      	subs	r4, r3, #1
 8005f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	db09      	blt.n	8005f4a <_dtoa_r+0x8ca>
 8005f36:	1b1c      	subs	r4, r3, r4
 8005f38:	9b08      	ldr	r3, [sp, #32]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f6bf af30 	bge.w	8005da0 <_dtoa_r+0x720>
 8005f40:	9b04      	ldr	r3, [sp, #16]
 8005f42:	9a08      	ldr	r2, [sp, #32]
 8005f44:	1a9e      	subs	r6, r3, r2
 8005f46:	2300      	movs	r3, #0
 8005f48:	e72b      	b.n	8005da2 <_dtoa_r+0x722>
 8005f4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f4e:	1ae3      	subs	r3, r4, r3
 8005f50:	441a      	add	r2, r3
 8005f52:	940a      	str	r4, [sp, #40]	@ 0x28
 8005f54:	9e04      	ldr	r6, [sp, #16]
 8005f56:	2400      	movs	r4, #0
 8005f58:	9b08      	ldr	r3, [sp, #32]
 8005f5a:	920e      	str	r2, [sp, #56]	@ 0x38
 8005f5c:	e721      	b.n	8005da2 <_dtoa_r+0x722>
 8005f5e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f60:	9e04      	ldr	r6, [sp, #16]
 8005f62:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f64:	e728      	b.n	8005db8 <_dtoa_r+0x738>
 8005f66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005f6a:	e751      	b.n	8005e10 <_dtoa_r+0x790>
 8005f6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f6e:	9903      	ldr	r1, [sp, #12]
 8005f70:	e750      	b.n	8005e14 <_dtoa_r+0x794>
 8005f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f76:	e751      	b.n	8005e1c <_dtoa_r+0x79c>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	e779      	b.n	8005e70 <_dtoa_r+0x7f0>
 8005f7c:	9b06      	ldr	r3, [sp, #24]
 8005f7e:	e777      	b.n	8005e70 <_dtoa_r+0x7f0>
 8005f80:	2300      	movs	r3, #0
 8005f82:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f84:	e779      	b.n	8005e7a <_dtoa_r+0x7fa>
 8005f86:	d093      	beq.n	8005eb0 <_dtoa_r+0x830>
 8005f88:	9a04      	ldr	r2, [sp, #16]
 8005f8a:	331c      	adds	r3, #28
 8005f8c:	441a      	add	r2, r3
 8005f8e:	9204      	str	r2, [sp, #16]
 8005f90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f92:	441e      	add	r6, r3
 8005f94:	441a      	add	r2, r3
 8005f96:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f98:	e78a      	b.n	8005eb0 <_dtoa_r+0x830>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	e7f4      	b.n	8005f88 <_dtoa_r+0x908>
 8005f9e:	9b08      	ldr	r3, [sp, #32]
 8005fa0:	46b8      	mov	r8, r7
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	dc20      	bgt.n	8005fe8 <_dtoa_r+0x968>
 8005fa6:	469b      	mov	fp, r3
 8005fa8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	dd1e      	ble.n	8005fec <_dtoa_r+0x96c>
 8005fae:	f1bb 0f00 	cmp.w	fp, #0
 8005fb2:	f47f adb1 	bne.w	8005b18 <_dtoa_r+0x498>
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	465b      	mov	r3, fp
 8005fba:	2205      	movs	r2, #5
 8005fbc:	4648      	mov	r0, r9
 8005fbe:	f000 fa93 	bl	80064e8 <__multadd>
 8005fc2:	4601      	mov	r1, r0
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	9803      	ldr	r0, [sp, #12]
 8005fc8:	f000 fc9e 	bl	8006908 <__mcmp>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	f77f ada3 	ble.w	8005b18 <_dtoa_r+0x498>
 8005fd2:	4656      	mov	r6, sl
 8005fd4:	2331      	movs	r3, #49	@ 0x31
 8005fd6:	f108 0801 	add.w	r8, r8, #1
 8005fda:	f806 3b01 	strb.w	r3, [r6], #1
 8005fde:	e59f      	b.n	8005b20 <_dtoa_r+0x4a0>
 8005fe0:	46b8      	mov	r8, r7
 8005fe2:	9c08      	ldr	r4, [sp, #32]
 8005fe4:	4625      	mov	r5, r4
 8005fe6:	e7f4      	b.n	8005fd2 <_dtoa_r+0x952>
 8005fe8:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005fec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 8101 	beq.w	80061f6 <_dtoa_r+0xb76>
 8005ff4:	2e00      	cmp	r6, #0
 8005ff6:	dd05      	ble.n	8006004 <_dtoa_r+0x984>
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	4632      	mov	r2, r6
 8005ffc:	4648      	mov	r0, r9
 8005ffe:	f000 fc17 	bl	8006830 <__lshift>
 8006002:	4605      	mov	r5, r0
 8006004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006006:	2b00      	cmp	r3, #0
 8006008:	d05c      	beq.n	80060c4 <_dtoa_r+0xa44>
 800600a:	4648      	mov	r0, r9
 800600c:	6869      	ldr	r1, [r5, #4]
 800600e:	f000 fa09 	bl	8006424 <_Balloc>
 8006012:	4606      	mov	r6, r0
 8006014:	b928      	cbnz	r0, 8006022 <_dtoa_r+0x9a2>
 8006016:	4602      	mov	r2, r0
 8006018:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800601c:	4b80      	ldr	r3, [pc, #512]	@ (8006220 <_dtoa_r+0xba0>)
 800601e:	f7ff bb43 	b.w	80056a8 <_dtoa_r+0x28>
 8006022:	692a      	ldr	r2, [r5, #16]
 8006024:	f105 010c 	add.w	r1, r5, #12
 8006028:	3202      	adds	r2, #2
 800602a:	0092      	lsls	r2, r2, #2
 800602c:	300c      	adds	r0, #12
 800602e:	f7ff fa8e 	bl	800554e <memcpy>
 8006032:	2201      	movs	r2, #1
 8006034:	4631      	mov	r1, r6
 8006036:	4648      	mov	r0, r9
 8006038:	f000 fbfa 	bl	8006830 <__lshift>
 800603c:	462f      	mov	r7, r5
 800603e:	4605      	mov	r5, r0
 8006040:	f10a 0301 	add.w	r3, sl, #1
 8006044:	9304      	str	r3, [sp, #16]
 8006046:	eb0a 030b 	add.w	r3, sl, fp
 800604a:	930a      	str	r3, [sp, #40]	@ 0x28
 800604c:	9b06      	ldr	r3, [sp, #24]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	9309      	str	r3, [sp, #36]	@ 0x24
 8006054:	9b04      	ldr	r3, [sp, #16]
 8006056:	4621      	mov	r1, r4
 8006058:	9803      	ldr	r0, [sp, #12]
 800605a:	f103 3bff 	add.w	fp, r3, #4294967295
 800605e:	f7ff fa84 	bl	800556a <quorem>
 8006062:	4603      	mov	r3, r0
 8006064:	4639      	mov	r1, r7
 8006066:	3330      	adds	r3, #48	@ 0x30
 8006068:	9006      	str	r0, [sp, #24]
 800606a:	9803      	ldr	r0, [sp, #12]
 800606c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800606e:	f000 fc4b 	bl	8006908 <__mcmp>
 8006072:	462a      	mov	r2, r5
 8006074:	9008      	str	r0, [sp, #32]
 8006076:	4621      	mov	r1, r4
 8006078:	4648      	mov	r0, r9
 800607a:	f000 fc61 	bl	8006940 <__mdiff>
 800607e:	68c2      	ldr	r2, [r0, #12]
 8006080:	4606      	mov	r6, r0
 8006082:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006084:	bb02      	cbnz	r2, 80060c8 <_dtoa_r+0xa48>
 8006086:	4601      	mov	r1, r0
 8006088:	9803      	ldr	r0, [sp, #12]
 800608a:	f000 fc3d 	bl	8006908 <__mcmp>
 800608e:	4602      	mov	r2, r0
 8006090:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006092:	4631      	mov	r1, r6
 8006094:	4648      	mov	r0, r9
 8006096:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800609a:	f000 fa03 	bl	80064a4 <_Bfree>
 800609e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80060a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060a2:	9e04      	ldr	r6, [sp, #16]
 80060a4:	ea42 0103 	orr.w	r1, r2, r3
 80060a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060aa:	4319      	orrs	r1, r3
 80060ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060ae:	d10d      	bne.n	80060cc <_dtoa_r+0xa4c>
 80060b0:	2b39      	cmp	r3, #57	@ 0x39
 80060b2:	d027      	beq.n	8006104 <_dtoa_r+0xa84>
 80060b4:	9a08      	ldr	r2, [sp, #32]
 80060b6:	2a00      	cmp	r2, #0
 80060b8:	dd01      	ble.n	80060be <_dtoa_r+0xa3e>
 80060ba:	9b06      	ldr	r3, [sp, #24]
 80060bc:	3331      	adds	r3, #49	@ 0x31
 80060be:	f88b 3000 	strb.w	r3, [fp]
 80060c2:	e52e      	b.n	8005b22 <_dtoa_r+0x4a2>
 80060c4:	4628      	mov	r0, r5
 80060c6:	e7b9      	b.n	800603c <_dtoa_r+0x9bc>
 80060c8:	2201      	movs	r2, #1
 80060ca:	e7e2      	b.n	8006092 <_dtoa_r+0xa12>
 80060cc:	9908      	ldr	r1, [sp, #32]
 80060ce:	2900      	cmp	r1, #0
 80060d0:	db04      	blt.n	80060dc <_dtoa_r+0xa5c>
 80060d2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80060d4:	4301      	orrs	r1, r0
 80060d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060d8:	4301      	orrs	r1, r0
 80060da:	d120      	bne.n	800611e <_dtoa_r+0xa9e>
 80060dc:	2a00      	cmp	r2, #0
 80060de:	ddee      	ble.n	80060be <_dtoa_r+0xa3e>
 80060e0:	2201      	movs	r2, #1
 80060e2:	9903      	ldr	r1, [sp, #12]
 80060e4:	4648      	mov	r0, r9
 80060e6:	9304      	str	r3, [sp, #16]
 80060e8:	f000 fba2 	bl	8006830 <__lshift>
 80060ec:	4621      	mov	r1, r4
 80060ee:	9003      	str	r0, [sp, #12]
 80060f0:	f000 fc0a 	bl	8006908 <__mcmp>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	9b04      	ldr	r3, [sp, #16]
 80060f8:	dc02      	bgt.n	8006100 <_dtoa_r+0xa80>
 80060fa:	d1e0      	bne.n	80060be <_dtoa_r+0xa3e>
 80060fc:	07da      	lsls	r2, r3, #31
 80060fe:	d5de      	bpl.n	80060be <_dtoa_r+0xa3e>
 8006100:	2b39      	cmp	r3, #57	@ 0x39
 8006102:	d1da      	bne.n	80060ba <_dtoa_r+0xa3a>
 8006104:	2339      	movs	r3, #57	@ 0x39
 8006106:	f88b 3000 	strb.w	r3, [fp]
 800610a:	4633      	mov	r3, r6
 800610c:	461e      	mov	r6, r3
 800610e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006112:	3b01      	subs	r3, #1
 8006114:	2a39      	cmp	r2, #57	@ 0x39
 8006116:	d04e      	beq.n	80061b6 <_dtoa_r+0xb36>
 8006118:	3201      	adds	r2, #1
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	e501      	b.n	8005b22 <_dtoa_r+0x4a2>
 800611e:	2a00      	cmp	r2, #0
 8006120:	dd03      	ble.n	800612a <_dtoa_r+0xaaa>
 8006122:	2b39      	cmp	r3, #57	@ 0x39
 8006124:	d0ee      	beq.n	8006104 <_dtoa_r+0xa84>
 8006126:	3301      	adds	r3, #1
 8006128:	e7c9      	b.n	80060be <_dtoa_r+0xa3e>
 800612a:	9a04      	ldr	r2, [sp, #16]
 800612c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800612e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006132:	428a      	cmp	r2, r1
 8006134:	d028      	beq.n	8006188 <_dtoa_r+0xb08>
 8006136:	2300      	movs	r3, #0
 8006138:	220a      	movs	r2, #10
 800613a:	9903      	ldr	r1, [sp, #12]
 800613c:	4648      	mov	r0, r9
 800613e:	f000 f9d3 	bl	80064e8 <__multadd>
 8006142:	42af      	cmp	r7, r5
 8006144:	9003      	str	r0, [sp, #12]
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	f04f 020a 	mov.w	r2, #10
 800614e:	4639      	mov	r1, r7
 8006150:	4648      	mov	r0, r9
 8006152:	d107      	bne.n	8006164 <_dtoa_r+0xae4>
 8006154:	f000 f9c8 	bl	80064e8 <__multadd>
 8006158:	4607      	mov	r7, r0
 800615a:	4605      	mov	r5, r0
 800615c:	9b04      	ldr	r3, [sp, #16]
 800615e:	3301      	adds	r3, #1
 8006160:	9304      	str	r3, [sp, #16]
 8006162:	e777      	b.n	8006054 <_dtoa_r+0x9d4>
 8006164:	f000 f9c0 	bl	80064e8 <__multadd>
 8006168:	4629      	mov	r1, r5
 800616a:	4607      	mov	r7, r0
 800616c:	2300      	movs	r3, #0
 800616e:	220a      	movs	r2, #10
 8006170:	4648      	mov	r0, r9
 8006172:	f000 f9b9 	bl	80064e8 <__multadd>
 8006176:	4605      	mov	r5, r0
 8006178:	e7f0      	b.n	800615c <_dtoa_r+0xadc>
 800617a:	f1bb 0f00 	cmp.w	fp, #0
 800617e:	bfcc      	ite	gt
 8006180:	465e      	movgt	r6, fp
 8006182:	2601      	movle	r6, #1
 8006184:	2700      	movs	r7, #0
 8006186:	4456      	add	r6, sl
 8006188:	2201      	movs	r2, #1
 800618a:	9903      	ldr	r1, [sp, #12]
 800618c:	4648      	mov	r0, r9
 800618e:	9304      	str	r3, [sp, #16]
 8006190:	f000 fb4e 	bl	8006830 <__lshift>
 8006194:	4621      	mov	r1, r4
 8006196:	9003      	str	r0, [sp, #12]
 8006198:	f000 fbb6 	bl	8006908 <__mcmp>
 800619c:	2800      	cmp	r0, #0
 800619e:	dcb4      	bgt.n	800610a <_dtoa_r+0xa8a>
 80061a0:	d102      	bne.n	80061a8 <_dtoa_r+0xb28>
 80061a2:	9b04      	ldr	r3, [sp, #16]
 80061a4:	07db      	lsls	r3, r3, #31
 80061a6:	d4b0      	bmi.n	800610a <_dtoa_r+0xa8a>
 80061a8:	4633      	mov	r3, r6
 80061aa:	461e      	mov	r6, r3
 80061ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061b0:	2a30      	cmp	r2, #48	@ 0x30
 80061b2:	d0fa      	beq.n	80061aa <_dtoa_r+0xb2a>
 80061b4:	e4b5      	b.n	8005b22 <_dtoa_r+0x4a2>
 80061b6:	459a      	cmp	sl, r3
 80061b8:	d1a8      	bne.n	800610c <_dtoa_r+0xa8c>
 80061ba:	2331      	movs	r3, #49	@ 0x31
 80061bc:	f108 0801 	add.w	r8, r8, #1
 80061c0:	f88a 3000 	strb.w	r3, [sl]
 80061c4:	e4ad      	b.n	8005b22 <_dtoa_r+0x4a2>
 80061c6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80061c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006224 <_dtoa_r+0xba4>
 80061cc:	b11b      	cbz	r3, 80061d6 <_dtoa_r+0xb56>
 80061ce:	f10a 0308 	add.w	r3, sl, #8
 80061d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	4650      	mov	r0, sl
 80061d8:	b017      	add	sp, #92	@ 0x5c
 80061da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	f77f ae2e 	ble.w	8005e42 <_dtoa_r+0x7c2>
 80061e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80061ea:	2001      	movs	r0, #1
 80061ec:	e64d      	b.n	8005e8a <_dtoa_r+0x80a>
 80061ee:	f1bb 0f00 	cmp.w	fp, #0
 80061f2:	f77f aed9 	ble.w	8005fa8 <_dtoa_r+0x928>
 80061f6:	4656      	mov	r6, sl
 80061f8:	4621      	mov	r1, r4
 80061fa:	9803      	ldr	r0, [sp, #12]
 80061fc:	f7ff f9b5 	bl	800556a <quorem>
 8006200:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006204:	f806 3b01 	strb.w	r3, [r6], #1
 8006208:	eba6 020a 	sub.w	r2, r6, sl
 800620c:	4593      	cmp	fp, r2
 800620e:	ddb4      	ble.n	800617a <_dtoa_r+0xafa>
 8006210:	2300      	movs	r3, #0
 8006212:	220a      	movs	r2, #10
 8006214:	4648      	mov	r0, r9
 8006216:	9903      	ldr	r1, [sp, #12]
 8006218:	f000 f966 	bl	80064e8 <__multadd>
 800621c:	9003      	str	r0, [sp, #12]
 800621e:	e7eb      	b.n	80061f8 <_dtoa_r+0xb78>
 8006220:	08007616 	.word	0x08007616
 8006224:	0800759a 	.word	0x0800759a

08006228 <_free_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4605      	mov	r5, r0
 800622c:	2900      	cmp	r1, #0
 800622e:	d040      	beq.n	80062b2 <_free_r+0x8a>
 8006230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006234:	1f0c      	subs	r4, r1, #4
 8006236:	2b00      	cmp	r3, #0
 8006238:	bfb8      	it	lt
 800623a:	18e4      	addlt	r4, r4, r3
 800623c:	f000 f8e6 	bl	800640c <__malloc_lock>
 8006240:	4a1c      	ldr	r2, [pc, #112]	@ (80062b4 <_free_r+0x8c>)
 8006242:	6813      	ldr	r3, [r2, #0]
 8006244:	b933      	cbnz	r3, 8006254 <_free_r+0x2c>
 8006246:	6063      	str	r3, [r4, #4]
 8006248:	6014      	str	r4, [r2, #0]
 800624a:	4628      	mov	r0, r5
 800624c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006250:	f000 b8e2 	b.w	8006418 <__malloc_unlock>
 8006254:	42a3      	cmp	r3, r4
 8006256:	d908      	bls.n	800626a <_free_r+0x42>
 8006258:	6820      	ldr	r0, [r4, #0]
 800625a:	1821      	adds	r1, r4, r0
 800625c:	428b      	cmp	r3, r1
 800625e:	bf01      	itttt	eq
 8006260:	6819      	ldreq	r1, [r3, #0]
 8006262:	685b      	ldreq	r3, [r3, #4]
 8006264:	1809      	addeq	r1, r1, r0
 8006266:	6021      	streq	r1, [r4, #0]
 8006268:	e7ed      	b.n	8006246 <_free_r+0x1e>
 800626a:	461a      	mov	r2, r3
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	b10b      	cbz	r3, 8006274 <_free_r+0x4c>
 8006270:	42a3      	cmp	r3, r4
 8006272:	d9fa      	bls.n	800626a <_free_r+0x42>
 8006274:	6811      	ldr	r1, [r2, #0]
 8006276:	1850      	adds	r0, r2, r1
 8006278:	42a0      	cmp	r0, r4
 800627a:	d10b      	bne.n	8006294 <_free_r+0x6c>
 800627c:	6820      	ldr	r0, [r4, #0]
 800627e:	4401      	add	r1, r0
 8006280:	1850      	adds	r0, r2, r1
 8006282:	4283      	cmp	r3, r0
 8006284:	6011      	str	r1, [r2, #0]
 8006286:	d1e0      	bne.n	800624a <_free_r+0x22>
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	4408      	add	r0, r1
 800628e:	6010      	str	r0, [r2, #0]
 8006290:	6053      	str	r3, [r2, #4]
 8006292:	e7da      	b.n	800624a <_free_r+0x22>
 8006294:	d902      	bls.n	800629c <_free_r+0x74>
 8006296:	230c      	movs	r3, #12
 8006298:	602b      	str	r3, [r5, #0]
 800629a:	e7d6      	b.n	800624a <_free_r+0x22>
 800629c:	6820      	ldr	r0, [r4, #0]
 800629e:	1821      	adds	r1, r4, r0
 80062a0:	428b      	cmp	r3, r1
 80062a2:	bf01      	itttt	eq
 80062a4:	6819      	ldreq	r1, [r3, #0]
 80062a6:	685b      	ldreq	r3, [r3, #4]
 80062a8:	1809      	addeq	r1, r1, r0
 80062aa:	6021      	streq	r1, [r4, #0]
 80062ac:	6063      	str	r3, [r4, #4]
 80062ae:	6054      	str	r4, [r2, #4]
 80062b0:	e7cb      	b.n	800624a <_free_r+0x22>
 80062b2:	bd38      	pop	{r3, r4, r5, pc}
 80062b4:	2000052c 	.word	0x2000052c

080062b8 <malloc>:
 80062b8:	4b02      	ldr	r3, [pc, #8]	@ (80062c4 <malloc+0xc>)
 80062ba:	4601      	mov	r1, r0
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	f000 b825 	b.w	800630c <_malloc_r>
 80062c2:	bf00      	nop
 80062c4:	20000018 	.word	0x20000018

080062c8 <sbrk_aligned>:
 80062c8:	b570      	push	{r4, r5, r6, lr}
 80062ca:	4e0f      	ldr	r6, [pc, #60]	@ (8006308 <sbrk_aligned+0x40>)
 80062cc:	460c      	mov	r4, r1
 80062ce:	6831      	ldr	r1, [r6, #0]
 80062d0:	4605      	mov	r5, r0
 80062d2:	b911      	cbnz	r1, 80062da <sbrk_aligned+0x12>
 80062d4:	f000 febe 	bl	8007054 <_sbrk_r>
 80062d8:	6030      	str	r0, [r6, #0]
 80062da:	4621      	mov	r1, r4
 80062dc:	4628      	mov	r0, r5
 80062de:	f000 feb9 	bl	8007054 <_sbrk_r>
 80062e2:	1c43      	adds	r3, r0, #1
 80062e4:	d103      	bne.n	80062ee <sbrk_aligned+0x26>
 80062e6:	f04f 34ff 	mov.w	r4, #4294967295
 80062ea:	4620      	mov	r0, r4
 80062ec:	bd70      	pop	{r4, r5, r6, pc}
 80062ee:	1cc4      	adds	r4, r0, #3
 80062f0:	f024 0403 	bic.w	r4, r4, #3
 80062f4:	42a0      	cmp	r0, r4
 80062f6:	d0f8      	beq.n	80062ea <sbrk_aligned+0x22>
 80062f8:	1a21      	subs	r1, r4, r0
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 feaa 	bl	8007054 <_sbrk_r>
 8006300:	3001      	adds	r0, #1
 8006302:	d1f2      	bne.n	80062ea <sbrk_aligned+0x22>
 8006304:	e7ef      	b.n	80062e6 <sbrk_aligned+0x1e>
 8006306:	bf00      	nop
 8006308:	20000528 	.word	0x20000528

0800630c <_malloc_r>:
 800630c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006310:	1ccd      	adds	r5, r1, #3
 8006312:	f025 0503 	bic.w	r5, r5, #3
 8006316:	3508      	adds	r5, #8
 8006318:	2d0c      	cmp	r5, #12
 800631a:	bf38      	it	cc
 800631c:	250c      	movcc	r5, #12
 800631e:	2d00      	cmp	r5, #0
 8006320:	4606      	mov	r6, r0
 8006322:	db01      	blt.n	8006328 <_malloc_r+0x1c>
 8006324:	42a9      	cmp	r1, r5
 8006326:	d904      	bls.n	8006332 <_malloc_r+0x26>
 8006328:	230c      	movs	r3, #12
 800632a:	6033      	str	r3, [r6, #0]
 800632c:	2000      	movs	r0, #0
 800632e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006332:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006408 <_malloc_r+0xfc>
 8006336:	f000 f869 	bl	800640c <__malloc_lock>
 800633a:	f8d8 3000 	ldr.w	r3, [r8]
 800633e:	461c      	mov	r4, r3
 8006340:	bb44      	cbnz	r4, 8006394 <_malloc_r+0x88>
 8006342:	4629      	mov	r1, r5
 8006344:	4630      	mov	r0, r6
 8006346:	f7ff ffbf 	bl	80062c8 <sbrk_aligned>
 800634a:	1c43      	adds	r3, r0, #1
 800634c:	4604      	mov	r4, r0
 800634e:	d158      	bne.n	8006402 <_malloc_r+0xf6>
 8006350:	f8d8 4000 	ldr.w	r4, [r8]
 8006354:	4627      	mov	r7, r4
 8006356:	2f00      	cmp	r7, #0
 8006358:	d143      	bne.n	80063e2 <_malloc_r+0xd6>
 800635a:	2c00      	cmp	r4, #0
 800635c:	d04b      	beq.n	80063f6 <_malloc_r+0xea>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	4639      	mov	r1, r7
 8006362:	4630      	mov	r0, r6
 8006364:	eb04 0903 	add.w	r9, r4, r3
 8006368:	f000 fe74 	bl	8007054 <_sbrk_r>
 800636c:	4581      	cmp	r9, r0
 800636e:	d142      	bne.n	80063f6 <_malloc_r+0xea>
 8006370:	6821      	ldr	r1, [r4, #0]
 8006372:	4630      	mov	r0, r6
 8006374:	1a6d      	subs	r5, r5, r1
 8006376:	4629      	mov	r1, r5
 8006378:	f7ff ffa6 	bl	80062c8 <sbrk_aligned>
 800637c:	3001      	adds	r0, #1
 800637e:	d03a      	beq.n	80063f6 <_malloc_r+0xea>
 8006380:	6823      	ldr	r3, [r4, #0]
 8006382:	442b      	add	r3, r5
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	f8d8 3000 	ldr.w	r3, [r8]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	bb62      	cbnz	r2, 80063e8 <_malloc_r+0xdc>
 800638e:	f8c8 7000 	str.w	r7, [r8]
 8006392:	e00f      	b.n	80063b4 <_malloc_r+0xa8>
 8006394:	6822      	ldr	r2, [r4, #0]
 8006396:	1b52      	subs	r2, r2, r5
 8006398:	d420      	bmi.n	80063dc <_malloc_r+0xd0>
 800639a:	2a0b      	cmp	r2, #11
 800639c:	d917      	bls.n	80063ce <_malloc_r+0xc2>
 800639e:	1961      	adds	r1, r4, r5
 80063a0:	42a3      	cmp	r3, r4
 80063a2:	6025      	str	r5, [r4, #0]
 80063a4:	bf18      	it	ne
 80063a6:	6059      	strne	r1, [r3, #4]
 80063a8:	6863      	ldr	r3, [r4, #4]
 80063aa:	bf08      	it	eq
 80063ac:	f8c8 1000 	streq.w	r1, [r8]
 80063b0:	5162      	str	r2, [r4, r5]
 80063b2:	604b      	str	r3, [r1, #4]
 80063b4:	4630      	mov	r0, r6
 80063b6:	f000 f82f 	bl	8006418 <__malloc_unlock>
 80063ba:	f104 000b 	add.w	r0, r4, #11
 80063be:	1d23      	adds	r3, r4, #4
 80063c0:	f020 0007 	bic.w	r0, r0, #7
 80063c4:	1ac2      	subs	r2, r0, r3
 80063c6:	bf1c      	itt	ne
 80063c8:	1a1b      	subne	r3, r3, r0
 80063ca:	50a3      	strne	r3, [r4, r2]
 80063cc:	e7af      	b.n	800632e <_malloc_r+0x22>
 80063ce:	6862      	ldr	r2, [r4, #4]
 80063d0:	42a3      	cmp	r3, r4
 80063d2:	bf0c      	ite	eq
 80063d4:	f8c8 2000 	streq.w	r2, [r8]
 80063d8:	605a      	strne	r2, [r3, #4]
 80063da:	e7eb      	b.n	80063b4 <_malloc_r+0xa8>
 80063dc:	4623      	mov	r3, r4
 80063de:	6864      	ldr	r4, [r4, #4]
 80063e0:	e7ae      	b.n	8006340 <_malloc_r+0x34>
 80063e2:	463c      	mov	r4, r7
 80063e4:	687f      	ldr	r7, [r7, #4]
 80063e6:	e7b6      	b.n	8006356 <_malloc_r+0x4a>
 80063e8:	461a      	mov	r2, r3
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	42a3      	cmp	r3, r4
 80063ee:	d1fb      	bne.n	80063e8 <_malloc_r+0xdc>
 80063f0:	2300      	movs	r3, #0
 80063f2:	6053      	str	r3, [r2, #4]
 80063f4:	e7de      	b.n	80063b4 <_malloc_r+0xa8>
 80063f6:	230c      	movs	r3, #12
 80063f8:	4630      	mov	r0, r6
 80063fa:	6033      	str	r3, [r6, #0]
 80063fc:	f000 f80c 	bl	8006418 <__malloc_unlock>
 8006400:	e794      	b.n	800632c <_malloc_r+0x20>
 8006402:	6005      	str	r5, [r0, #0]
 8006404:	e7d6      	b.n	80063b4 <_malloc_r+0xa8>
 8006406:	bf00      	nop
 8006408:	2000052c 	.word	0x2000052c

0800640c <__malloc_lock>:
 800640c:	4801      	ldr	r0, [pc, #4]	@ (8006414 <__malloc_lock+0x8>)
 800640e:	f7ff b88e 	b.w	800552e <__retarget_lock_acquire_recursive>
 8006412:	bf00      	nop
 8006414:	20000524 	.word	0x20000524

08006418 <__malloc_unlock>:
 8006418:	4801      	ldr	r0, [pc, #4]	@ (8006420 <__malloc_unlock+0x8>)
 800641a:	f7ff b889 	b.w	8005530 <__retarget_lock_release_recursive>
 800641e:	bf00      	nop
 8006420:	20000524 	.word	0x20000524

08006424 <_Balloc>:
 8006424:	b570      	push	{r4, r5, r6, lr}
 8006426:	69c6      	ldr	r6, [r0, #28]
 8006428:	4604      	mov	r4, r0
 800642a:	460d      	mov	r5, r1
 800642c:	b976      	cbnz	r6, 800644c <_Balloc+0x28>
 800642e:	2010      	movs	r0, #16
 8006430:	f7ff ff42 	bl	80062b8 <malloc>
 8006434:	4602      	mov	r2, r0
 8006436:	61e0      	str	r0, [r4, #28]
 8006438:	b920      	cbnz	r0, 8006444 <_Balloc+0x20>
 800643a:	216b      	movs	r1, #107	@ 0x6b
 800643c:	4b17      	ldr	r3, [pc, #92]	@ (800649c <_Balloc+0x78>)
 800643e:	4818      	ldr	r0, [pc, #96]	@ (80064a0 <_Balloc+0x7c>)
 8006440:	f000 fe18 	bl	8007074 <__assert_func>
 8006444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006448:	6006      	str	r6, [r0, #0]
 800644a:	60c6      	str	r6, [r0, #12]
 800644c:	69e6      	ldr	r6, [r4, #28]
 800644e:	68f3      	ldr	r3, [r6, #12]
 8006450:	b183      	cbz	r3, 8006474 <_Balloc+0x50>
 8006452:	69e3      	ldr	r3, [r4, #28]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800645a:	b9b8      	cbnz	r0, 800648c <_Balloc+0x68>
 800645c:	2101      	movs	r1, #1
 800645e:	fa01 f605 	lsl.w	r6, r1, r5
 8006462:	1d72      	adds	r2, r6, #5
 8006464:	4620      	mov	r0, r4
 8006466:	0092      	lsls	r2, r2, #2
 8006468:	f000 fe22 	bl	80070b0 <_calloc_r>
 800646c:	b160      	cbz	r0, 8006488 <_Balloc+0x64>
 800646e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006472:	e00e      	b.n	8006492 <_Balloc+0x6e>
 8006474:	2221      	movs	r2, #33	@ 0x21
 8006476:	2104      	movs	r1, #4
 8006478:	4620      	mov	r0, r4
 800647a:	f000 fe19 	bl	80070b0 <_calloc_r>
 800647e:	69e3      	ldr	r3, [r4, #28]
 8006480:	60f0      	str	r0, [r6, #12]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e4      	bne.n	8006452 <_Balloc+0x2e>
 8006488:	2000      	movs	r0, #0
 800648a:	bd70      	pop	{r4, r5, r6, pc}
 800648c:	6802      	ldr	r2, [r0, #0]
 800648e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006492:	2300      	movs	r3, #0
 8006494:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006498:	e7f7      	b.n	800648a <_Balloc+0x66>
 800649a:	bf00      	nop
 800649c:	080075a7 	.word	0x080075a7
 80064a0:	08007627 	.word	0x08007627

080064a4 <_Bfree>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	69c6      	ldr	r6, [r0, #28]
 80064a8:	4605      	mov	r5, r0
 80064aa:	460c      	mov	r4, r1
 80064ac:	b976      	cbnz	r6, 80064cc <_Bfree+0x28>
 80064ae:	2010      	movs	r0, #16
 80064b0:	f7ff ff02 	bl	80062b8 <malloc>
 80064b4:	4602      	mov	r2, r0
 80064b6:	61e8      	str	r0, [r5, #28]
 80064b8:	b920      	cbnz	r0, 80064c4 <_Bfree+0x20>
 80064ba:	218f      	movs	r1, #143	@ 0x8f
 80064bc:	4b08      	ldr	r3, [pc, #32]	@ (80064e0 <_Bfree+0x3c>)
 80064be:	4809      	ldr	r0, [pc, #36]	@ (80064e4 <_Bfree+0x40>)
 80064c0:	f000 fdd8 	bl	8007074 <__assert_func>
 80064c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064c8:	6006      	str	r6, [r0, #0]
 80064ca:	60c6      	str	r6, [r0, #12]
 80064cc:	b13c      	cbz	r4, 80064de <_Bfree+0x3a>
 80064ce:	69eb      	ldr	r3, [r5, #28]
 80064d0:	6862      	ldr	r2, [r4, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064d8:	6021      	str	r1, [r4, #0]
 80064da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064de:	bd70      	pop	{r4, r5, r6, pc}
 80064e0:	080075a7 	.word	0x080075a7
 80064e4:	08007627 	.word	0x08007627

080064e8 <__multadd>:
 80064e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ec:	4607      	mov	r7, r0
 80064ee:	460c      	mov	r4, r1
 80064f0:	461e      	mov	r6, r3
 80064f2:	2000      	movs	r0, #0
 80064f4:	690d      	ldr	r5, [r1, #16]
 80064f6:	f101 0c14 	add.w	ip, r1, #20
 80064fa:	f8dc 3000 	ldr.w	r3, [ip]
 80064fe:	3001      	adds	r0, #1
 8006500:	b299      	uxth	r1, r3
 8006502:	fb02 6101 	mla	r1, r2, r1, r6
 8006506:	0c1e      	lsrs	r6, r3, #16
 8006508:	0c0b      	lsrs	r3, r1, #16
 800650a:	fb02 3306 	mla	r3, r2, r6, r3
 800650e:	b289      	uxth	r1, r1
 8006510:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006514:	4285      	cmp	r5, r0
 8006516:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800651a:	f84c 1b04 	str.w	r1, [ip], #4
 800651e:	dcec      	bgt.n	80064fa <__multadd+0x12>
 8006520:	b30e      	cbz	r6, 8006566 <__multadd+0x7e>
 8006522:	68a3      	ldr	r3, [r4, #8]
 8006524:	42ab      	cmp	r3, r5
 8006526:	dc19      	bgt.n	800655c <__multadd+0x74>
 8006528:	6861      	ldr	r1, [r4, #4]
 800652a:	4638      	mov	r0, r7
 800652c:	3101      	adds	r1, #1
 800652e:	f7ff ff79 	bl	8006424 <_Balloc>
 8006532:	4680      	mov	r8, r0
 8006534:	b928      	cbnz	r0, 8006542 <__multadd+0x5a>
 8006536:	4602      	mov	r2, r0
 8006538:	21ba      	movs	r1, #186	@ 0xba
 800653a:	4b0c      	ldr	r3, [pc, #48]	@ (800656c <__multadd+0x84>)
 800653c:	480c      	ldr	r0, [pc, #48]	@ (8006570 <__multadd+0x88>)
 800653e:	f000 fd99 	bl	8007074 <__assert_func>
 8006542:	6922      	ldr	r2, [r4, #16]
 8006544:	f104 010c 	add.w	r1, r4, #12
 8006548:	3202      	adds	r2, #2
 800654a:	0092      	lsls	r2, r2, #2
 800654c:	300c      	adds	r0, #12
 800654e:	f7fe fffe 	bl	800554e <memcpy>
 8006552:	4621      	mov	r1, r4
 8006554:	4638      	mov	r0, r7
 8006556:	f7ff ffa5 	bl	80064a4 <_Bfree>
 800655a:	4644      	mov	r4, r8
 800655c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006560:	3501      	adds	r5, #1
 8006562:	615e      	str	r6, [r3, #20]
 8006564:	6125      	str	r5, [r4, #16]
 8006566:	4620      	mov	r0, r4
 8006568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800656c:	08007616 	.word	0x08007616
 8006570:	08007627 	.word	0x08007627

08006574 <__hi0bits>:
 8006574:	4603      	mov	r3, r0
 8006576:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800657a:	bf3a      	itte	cc
 800657c:	0403      	lslcc	r3, r0, #16
 800657e:	2010      	movcc	r0, #16
 8006580:	2000      	movcs	r0, #0
 8006582:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006586:	bf3c      	itt	cc
 8006588:	021b      	lslcc	r3, r3, #8
 800658a:	3008      	addcc	r0, #8
 800658c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006590:	bf3c      	itt	cc
 8006592:	011b      	lslcc	r3, r3, #4
 8006594:	3004      	addcc	r0, #4
 8006596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800659a:	bf3c      	itt	cc
 800659c:	009b      	lslcc	r3, r3, #2
 800659e:	3002      	addcc	r0, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	db05      	blt.n	80065b0 <__hi0bits+0x3c>
 80065a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80065a8:	f100 0001 	add.w	r0, r0, #1
 80065ac:	bf08      	it	eq
 80065ae:	2020      	moveq	r0, #32
 80065b0:	4770      	bx	lr

080065b2 <__lo0bits>:
 80065b2:	6803      	ldr	r3, [r0, #0]
 80065b4:	4602      	mov	r2, r0
 80065b6:	f013 0007 	ands.w	r0, r3, #7
 80065ba:	d00b      	beq.n	80065d4 <__lo0bits+0x22>
 80065bc:	07d9      	lsls	r1, r3, #31
 80065be:	d421      	bmi.n	8006604 <__lo0bits+0x52>
 80065c0:	0798      	lsls	r0, r3, #30
 80065c2:	bf49      	itett	mi
 80065c4:	085b      	lsrmi	r3, r3, #1
 80065c6:	089b      	lsrpl	r3, r3, #2
 80065c8:	2001      	movmi	r0, #1
 80065ca:	6013      	strmi	r3, [r2, #0]
 80065cc:	bf5c      	itt	pl
 80065ce:	2002      	movpl	r0, #2
 80065d0:	6013      	strpl	r3, [r2, #0]
 80065d2:	4770      	bx	lr
 80065d4:	b299      	uxth	r1, r3
 80065d6:	b909      	cbnz	r1, 80065dc <__lo0bits+0x2a>
 80065d8:	2010      	movs	r0, #16
 80065da:	0c1b      	lsrs	r3, r3, #16
 80065dc:	b2d9      	uxtb	r1, r3
 80065de:	b909      	cbnz	r1, 80065e4 <__lo0bits+0x32>
 80065e0:	3008      	adds	r0, #8
 80065e2:	0a1b      	lsrs	r3, r3, #8
 80065e4:	0719      	lsls	r1, r3, #28
 80065e6:	bf04      	itt	eq
 80065e8:	091b      	lsreq	r3, r3, #4
 80065ea:	3004      	addeq	r0, #4
 80065ec:	0799      	lsls	r1, r3, #30
 80065ee:	bf04      	itt	eq
 80065f0:	089b      	lsreq	r3, r3, #2
 80065f2:	3002      	addeq	r0, #2
 80065f4:	07d9      	lsls	r1, r3, #31
 80065f6:	d403      	bmi.n	8006600 <__lo0bits+0x4e>
 80065f8:	085b      	lsrs	r3, r3, #1
 80065fa:	f100 0001 	add.w	r0, r0, #1
 80065fe:	d003      	beq.n	8006608 <__lo0bits+0x56>
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	4770      	bx	lr
 8006604:	2000      	movs	r0, #0
 8006606:	4770      	bx	lr
 8006608:	2020      	movs	r0, #32
 800660a:	4770      	bx	lr

0800660c <__i2b>:
 800660c:	b510      	push	{r4, lr}
 800660e:	460c      	mov	r4, r1
 8006610:	2101      	movs	r1, #1
 8006612:	f7ff ff07 	bl	8006424 <_Balloc>
 8006616:	4602      	mov	r2, r0
 8006618:	b928      	cbnz	r0, 8006626 <__i2b+0x1a>
 800661a:	f240 1145 	movw	r1, #325	@ 0x145
 800661e:	4b04      	ldr	r3, [pc, #16]	@ (8006630 <__i2b+0x24>)
 8006620:	4804      	ldr	r0, [pc, #16]	@ (8006634 <__i2b+0x28>)
 8006622:	f000 fd27 	bl	8007074 <__assert_func>
 8006626:	2301      	movs	r3, #1
 8006628:	6144      	str	r4, [r0, #20]
 800662a:	6103      	str	r3, [r0, #16]
 800662c:	bd10      	pop	{r4, pc}
 800662e:	bf00      	nop
 8006630:	08007616 	.word	0x08007616
 8006634:	08007627 	.word	0x08007627

08006638 <__multiply>:
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	4617      	mov	r7, r2
 800663e:	690a      	ldr	r2, [r1, #16]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	4689      	mov	r9, r1
 8006644:	429a      	cmp	r2, r3
 8006646:	bfa2      	ittt	ge
 8006648:	463b      	movge	r3, r7
 800664a:	460f      	movge	r7, r1
 800664c:	4699      	movge	r9, r3
 800664e:	693d      	ldr	r5, [r7, #16]
 8006650:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	6879      	ldr	r1, [r7, #4]
 8006658:	eb05 060a 	add.w	r6, r5, sl
 800665c:	42b3      	cmp	r3, r6
 800665e:	b085      	sub	sp, #20
 8006660:	bfb8      	it	lt
 8006662:	3101      	addlt	r1, #1
 8006664:	f7ff fede 	bl	8006424 <_Balloc>
 8006668:	b930      	cbnz	r0, 8006678 <__multiply+0x40>
 800666a:	4602      	mov	r2, r0
 800666c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006670:	4b40      	ldr	r3, [pc, #256]	@ (8006774 <__multiply+0x13c>)
 8006672:	4841      	ldr	r0, [pc, #260]	@ (8006778 <__multiply+0x140>)
 8006674:	f000 fcfe 	bl	8007074 <__assert_func>
 8006678:	f100 0414 	add.w	r4, r0, #20
 800667c:	4623      	mov	r3, r4
 800667e:	2200      	movs	r2, #0
 8006680:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006684:	4573      	cmp	r3, lr
 8006686:	d320      	bcc.n	80066ca <__multiply+0x92>
 8006688:	f107 0814 	add.w	r8, r7, #20
 800668c:	f109 0114 	add.w	r1, r9, #20
 8006690:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006694:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006698:	9302      	str	r3, [sp, #8]
 800669a:	1beb      	subs	r3, r5, r7
 800669c:	3b15      	subs	r3, #21
 800669e:	f023 0303 	bic.w	r3, r3, #3
 80066a2:	3304      	adds	r3, #4
 80066a4:	3715      	adds	r7, #21
 80066a6:	42bd      	cmp	r5, r7
 80066a8:	bf38      	it	cc
 80066aa:	2304      	movcc	r3, #4
 80066ac:	9301      	str	r3, [sp, #4]
 80066ae:	9b02      	ldr	r3, [sp, #8]
 80066b0:	9103      	str	r1, [sp, #12]
 80066b2:	428b      	cmp	r3, r1
 80066b4:	d80c      	bhi.n	80066d0 <__multiply+0x98>
 80066b6:	2e00      	cmp	r6, #0
 80066b8:	dd03      	ble.n	80066c2 <__multiply+0x8a>
 80066ba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d055      	beq.n	800676e <__multiply+0x136>
 80066c2:	6106      	str	r6, [r0, #16]
 80066c4:	b005      	add	sp, #20
 80066c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ca:	f843 2b04 	str.w	r2, [r3], #4
 80066ce:	e7d9      	b.n	8006684 <__multiply+0x4c>
 80066d0:	f8b1 a000 	ldrh.w	sl, [r1]
 80066d4:	f1ba 0f00 	cmp.w	sl, #0
 80066d8:	d01f      	beq.n	800671a <__multiply+0xe2>
 80066da:	46c4      	mov	ip, r8
 80066dc:	46a1      	mov	r9, r4
 80066de:	2700      	movs	r7, #0
 80066e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80066e4:	f8d9 3000 	ldr.w	r3, [r9]
 80066e8:	fa1f fb82 	uxth.w	fp, r2
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	fb0a 330b 	mla	r3, sl, fp, r3
 80066f2:	443b      	add	r3, r7
 80066f4:	f8d9 7000 	ldr.w	r7, [r9]
 80066f8:	0c12      	lsrs	r2, r2, #16
 80066fa:	0c3f      	lsrs	r7, r7, #16
 80066fc:	fb0a 7202 	mla	r2, sl, r2, r7
 8006700:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006704:	b29b      	uxth	r3, r3
 8006706:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800670a:	4565      	cmp	r5, ip
 800670c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006710:	f849 3b04 	str.w	r3, [r9], #4
 8006714:	d8e4      	bhi.n	80066e0 <__multiply+0xa8>
 8006716:	9b01      	ldr	r3, [sp, #4]
 8006718:	50e7      	str	r7, [r4, r3]
 800671a:	9b03      	ldr	r3, [sp, #12]
 800671c:	3104      	adds	r1, #4
 800671e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006722:	f1b9 0f00 	cmp.w	r9, #0
 8006726:	d020      	beq.n	800676a <__multiply+0x132>
 8006728:	4647      	mov	r7, r8
 800672a:	46a4      	mov	ip, r4
 800672c:	f04f 0a00 	mov.w	sl, #0
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	f8b7 b000 	ldrh.w	fp, [r7]
 8006736:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800673a:	b29b      	uxth	r3, r3
 800673c:	fb09 220b 	mla	r2, r9, fp, r2
 8006740:	4452      	add	r2, sl
 8006742:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006746:	f84c 3b04 	str.w	r3, [ip], #4
 800674a:	f857 3b04 	ldr.w	r3, [r7], #4
 800674e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006752:	f8bc 3000 	ldrh.w	r3, [ip]
 8006756:	42bd      	cmp	r5, r7
 8006758:	fb09 330a 	mla	r3, r9, sl, r3
 800675c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006760:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006764:	d8e5      	bhi.n	8006732 <__multiply+0xfa>
 8006766:	9a01      	ldr	r2, [sp, #4]
 8006768:	50a3      	str	r3, [r4, r2]
 800676a:	3404      	adds	r4, #4
 800676c:	e79f      	b.n	80066ae <__multiply+0x76>
 800676e:	3e01      	subs	r6, #1
 8006770:	e7a1      	b.n	80066b6 <__multiply+0x7e>
 8006772:	bf00      	nop
 8006774:	08007616 	.word	0x08007616
 8006778:	08007627 	.word	0x08007627

0800677c <__pow5mult>:
 800677c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006780:	4615      	mov	r5, r2
 8006782:	f012 0203 	ands.w	r2, r2, #3
 8006786:	4607      	mov	r7, r0
 8006788:	460e      	mov	r6, r1
 800678a:	d007      	beq.n	800679c <__pow5mult+0x20>
 800678c:	4c25      	ldr	r4, [pc, #148]	@ (8006824 <__pow5mult+0xa8>)
 800678e:	3a01      	subs	r2, #1
 8006790:	2300      	movs	r3, #0
 8006792:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006796:	f7ff fea7 	bl	80064e8 <__multadd>
 800679a:	4606      	mov	r6, r0
 800679c:	10ad      	asrs	r5, r5, #2
 800679e:	d03d      	beq.n	800681c <__pow5mult+0xa0>
 80067a0:	69fc      	ldr	r4, [r7, #28]
 80067a2:	b97c      	cbnz	r4, 80067c4 <__pow5mult+0x48>
 80067a4:	2010      	movs	r0, #16
 80067a6:	f7ff fd87 	bl	80062b8 <malloc>
 80067aa:	4602      	mov	r2, r0
 80067ac:	61f8      	str	r0, [r7, #28]
 80067ae:	b928      	cbnz	r0, 80067bc <__pow5mult+0x40>
 80067b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80067b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006828 <__pow5mult+0xac>)
 80067b6:	481d      	ldr	r0, [pc, #116]	@ (800682c <__pow5mult+0xb0>)
 80067b8:	f000 fc5c 	bl	8007074 <__assert_func>
 80067bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067c0:	6004      	str	r4, [r0, #0]
 80067c2:	60c4      	str	r4, [r0, #12]
 80067c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80067c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067cc:	b94c      	cbnz	r4, 80067e2 <__pow5mult+0x66>
 80067ce:	f240 2171 	movw	r1, #625	@ 0x271
 80067d2:	4638      	mov	r0, r7
 80067d4:	f7ff ff1a 	bl	800660c <__i2b>
 80067d8:	2300      	movs	r3, #0
 80067da:	4604      	mov	r4, r0
 80067dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80067e0:	6003      	str	r3, [r0, #0]
 80067e2:	f04f 0900 	mov.w	r9, #0
 80067e6:	07eb      	lsls	r3, r5, #31
 80067e8:	d50a      	bpl.n	8006800 <__pow5mult+0x84>
 80067ea:	4631      	mov	r1, r6
 80067ec:	4622      	mov	r2, r4
 80067ee:	4638      	mov	r0, r7
 80067f0:	f7ff ff22 	bl	8006638 <__multiply>
 80067f4:	4680      	mov	r8, r0
 80067f6:	4631      	mov	r1, r6
 80067f8:	4638      	mov	r0, r7
 80067fa:	f7ff fe53 	bl	80064a4 <_Bfree>
 80067fe:	4646      	mov	r6, r8
 8006800:	106d      	asrs	r5, r5, #1
 8006802:	d00b      	beq.n	800681c <__pow5mult+0xa0>
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	b938      	cbnz	r0, 8006818 <__pow5mult+0x9c>
 8006808:	4622      	mov	r2, r4
 800680a:	4621      	mov	r1, r4
 800680c:	4638      	mov	r0, r7
 800680e:	f7ff ff13 	bl	8006638 <__multiply>
 8006812:	6020      	str	r0, [r4, #0]
 8006814:	f8c0 9000 	str.w	r9, [r0]
 8006818:	4604      	mov	r4, r0
 800681a:	e7e4      	b.n	80067e6 <__pow5mult+0x6a>
 800681c:	4630      	mov	r0, r6
 800681e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006822:	bf00      	nop
 8006824:	080076d8 	.word	0x080076d8
 8006828:	080075a7 	.word	0x080075a7
 800682c:	08007627 	.word	0x08007627

08006830 <__lshift>:
 8006830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	460c      	mov	r4, r1
 8006836:	4607      	mov	r7, r0
 8006838:	4691      	mov	r9, r2
 800683a:	6923      	ldr	r3, [r4, #16]
 800683c:	6849      	ldr	r1, [r1, #4]
 800683e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006842:	68a3      	ldr	r3, [r4, #8]
 8006844:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006848:	f108 0601 	add.w	r6, r8, #1
 800684c:	42b3      	cmp	r3, r6
 800684e:	db0b      	blt.n	8006868 <__lshift+0x38>
 8006850:	4638      	mov	r0, r7
 8006852:	f7ff fde7 	bl	8006424 <_Balloc>
 8006856:	4605      	mov	r5, r0
 8006858:	b948      	cbnz	r0, 800686e <__lshift+0x3e>
 800685a:	4602      	mov	r2, r0
 800685c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006860:	4b27      	ldr	r3, [pc, #156]	@ (8006900 <__lshift+0xd0>)
 8006862:	4828      	ldr	r0, [pc, #160]	@ (8006904 <__lshift+0xd4>)
 8006864:	f000 fc06 	bl	8007074 <__assert_func>
 8006868:	3101      	adds	r1, #1
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	e7ee      	b.n	800684c <__lshift+0x1c>
 800686e:	2300      	movs	r3, #0
 8006870:	f100 0114 	add.w	r1, r0, #20
 8006874:	f100 0210 	add.w	r2, r0, #16
 8006878:	4618      	mov	r0, r3
 800687a:	4553      	cmp	r3, sl
 800687c:	db33      	blt.n	80068e6 <__lshift+0xb6>
 800687e:	6920      	ldr	r0, [r4, #16]
 8006880:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006884:	f104 0314 	add.w	r3, r4, #20
 8006888:	f019 091f 	ands.w	r9, r9, #31
 800688c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006890:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006894:	d02b      	beq.n	80068ee <__lshift+0xbe>
 8006896:	468a      	mov	sl, r1
 8006898:	2200      	movs	r2, #0
 800689a:	f1c9 0e20 	rsb	lr, r9, #32
 800689e:	6818      	ldr	r0, [r3, #0]
 80068a0:	fa00 f009 	lsl.w	r0, r0, r9
 80068a4:	4310      	orrs	r0, r2
 80068a6:	f84a 0b04 	str.w	r0, [sl], #4
 80068aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80068ae:	459c      	cmp	ip, r3
 80068b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80068b4:	d8f3      	bhi.n	800689e <__lshift+0x6e>
 80068b6:	ebac 0304 	sub.w	r3, ip, r4
 80068ba:	3b15      	subs	r3, #21
 80068bc:	f023 0303 	bic.w	r3, r3, #3
 80068c0:	3304      	adds	r3, #4
 80068c2:	f104 0015 	add.w	r0, r4, #21
 80068c6:	4560      	cmp	r0, ip
 80068c8:	bf88      	it	hi
 80068ca:	2304      	movhi	r3, #4
 80068cc:	50ca      	str	r2, [r1, r3]
 80068ce:	b10a      	cbz	r2, 80068d4 <__lshift+0xa4>
 80068d0:	f108 0602 	add.w	r6, r8, #2
 80068d4:	3e01      	subs	r6, #1
 80068d6:	4638      	mov	r0, r7
 80068d8:	4621      	mov	r1, r4
 80068da:	612e      	str	r6, [r5, #16]
 80068dc:	f7ff fde2 	bl	80064a4 <_Bfree>
 80068e0:	4628      	mov	r0, r5
 80068e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80068ea:	3301      	adds	r3, #1
 80068ec:	e7c5      	b.n	800687a <__lshift+0x4a>
 80068ee:	3904      	subs	r1, #4
 80068f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80068f4:	459c      	cmp	ip, r3
 80068f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80068fa:	d8f9      	bhi.n	80068f0 <__lshift+0xc0>
 80068fc:	e7ea      	b.n	80068d4 <__lshift+0xa4>
 80068fe:	bf00      	nop
 8006900:	08007616 	.word	0x08007616
 8006904:	08007627 	.word	0x08007627

08006908 <__mcmp>:
 8006908:	4603      	mov	r3, r0
 800690a:	690a      	ldr	r2, [r1, #16]
 800690c:	6900      	ldr	r0, [r0, #16]
 800690e:	b530      	push	{r4, r5, lr}
 8006910:	1a80      	subs	r0, r0, r2
 8006912:	d10e      	bne.n	8006932 <__mcmp+0x2a>
 8006914:	3314      	adds	r3, #20
 8006916:	3114      	adds	r1, #20
 8006918:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800691c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006920:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006924:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006928:	4295      	cmp	r5, r2
 800692a:	d003      	beq.n	8006934 <__mcmp+0x2c>
 800692c:	d205      	bcs.n	800693a <__mcmp+0x32>
 800692e:	f04f 30ff 	mov.w	r0, #4294967295
 8006932:	bd30      	pop	{r4, r5, pc}
 8006934:	42a3      	cmp	r3, r4
 8006936:	d3f3      	bcc.n	8006920 <__mcmp+0x18>
 8006938:	e7fb      	b.n	8006932 <__mcmp+0x2a>
 800693a:	2001      	movs	r0, #1
 800693c:	e7f9      	b.n	8006932 <__mcmp+0x2a>
	...

08006940 <__mdiff>:
 8006940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006944:	4689      	mov	r9, r1
 8006946:	4606      	mov	r6, r0
 8006948:	4611      	mov	r1, r2
 800694a:	4648      	mov	r0, r9
 800694c:	4614      	mov	r4, r2
 800694e:	f7ff ffdb 	bl	8006908 <__mcmp>
 8006952:	1e05      	subs	r5, r0, #0
 8006954:	d112      	bne.n	800697c <__mdiff+0x3c>
 8006956:	4629      	mov	r1, r5
 8006958:	4630      	mov	r0, r6
 800695a:	f7ff fd63 	bl	8006424 <_Balloc>
 800695e:	4602      	mov	r2, r0
 8006960:	b928      	cbnz	r0, 800696e <__mdiff+0x2e>
 8006962:	f240 2137 	movw	r1, #567	@ 0x237
 8006966:	4b3e      	ldr	r3, [pc, #248]	@ (8006a60 <__mdiff+0x120>)
 8006968:	483e      	ldr	r0, [pc, #248]	@ (8006a64 <__mdiff+0x124>)
 800696a:	f000 fb83 	bl	8007074 <__assert_func>
 800696e:	2301      	movs	r3, #1
 8006970:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006974:	4610      	mov	r0, r2
 8006976:	b003      	add	sp, #12
 8006978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697c:	bfbc      	itt	lt
 800697e:	464b      	movlt	r3, r9
 8006980:	46a1      	movlt	r9, r4
 8006982:	4630      	mov	r0, r6
 8006984:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006988:	bfba      	itte	lt
 800698a:	461c      	movlt	r4, r3
 800698c:	2501      	movlt	r5, #1
 800698e:	2500      	movge	r5, #0
 8006990:	f7ff fd48 	bl	8006424 <_Balloc>
 8006994:	4602      	mov	r2, r0
 8006996:	b918      	cbnz	r0, 80069a0 <__mdiff+0x60>
 8006998:	f240 2145 	movw	r1, #581	@ 0x245
 800699c:	4b30      	ldr	r3, [pc, #192]	@ (8006a60 <__mdiff+0x120>)
 800699e:	e7e3      	b.n	8006968 <__mdiff+0x28>
 80069a0:	f100 0b14 	add.w	fp, r0, #20
 80069a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80069a8:	f109 0310 	add.w	r3, r9, #16
 80069ac:	60c5      	str	r5, [r0, #12]
 80069ae:	f04f 0c00 	mov.w	ip, #0
 80069b2:	f109 0514 	add.w	r5, r9, #20
 80069b6:	46d9      	mov	r9, fp
 80069b8:	6926      	ldr	r6, [r4, #16]
 80069ba:	f104 0e14 	add.w	lr, r4, #20
 80069be:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80069c2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80069c6:	9301      	str	r3, [sp, #4]
 80069c8:	9b01      	ldr	r3, [sp, #4]
 80069ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80069ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80069d2:	b281      	uxth	r1, r0
 80069d4:	9301      	str	r3, [sp, #4]
 80069d6:	fa1f f38a 	uxth.w	r3, sl
 80069da:	1a5b      	subs	r3, r3, r1
 80069dc:	0c00      	lsrs	r0, r0, #16
 80069de:	4463      	add	r3, ip
 80069e0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80069e4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80069ee:	4576      	cmp	r6, lr
 80069f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069f4:	f849 3b04 	str.w	r3, [r9], #4
 80069f8:	d8e6      	bhi.n	80069c8 <__mdiff+0x88>
 80069fa:	1b33      	subs	r3, r6, r4
 80069fc:	3b15      	subs	r3, #21
 80069fe:	f023 0303 	bic.w	r3, r3, #3
 8006a02:	3415      	adds	r4, #21
 8006a04:	3304      	adds	r3, #4
 8006a06:	42a6      	cmp	r6, r4
 8006a08:	bf38      	it	cc
 8006a0a:	2304      	movcc	r3, #4
 8006a0c:	441d      	add	r5, r3
 8006a0e:	445b      	add	r3, fp
 8006a10:	461e      	mov	r6, r3
 8006a12:	462c      	mov	r4, r5
 8006a14:	4544      	cmp	r4, r8
 8006a16:	d30e      	bcc.n	8006a36 <__mdiff+0xf6>
 8006a18:	f108 0103 	add.w	r1, r8, #3
 8006a1c:	1b49      	subs	r1, r1, r5
 8006a1e:	f021 0103 	bic.w	r1, r1, #3
 8006a22:	3d03      	subs	r5, #3
 8006a24:	45a8      	cmp	r8, r5
 8006a26:	bf38      	it	cc
 8006a28:	2100      	movcc	r1, #0
 8006a2a:	440b      	add	r3, r1
 8006a2c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a30:	b199      	cbz	r1, 8006a5a <__mdiff+0x11a>
 8006a32:	6117      	str	r7, [r2, #16]
 8006a34:	e79e      	b.n	8006974 <__mdiff+0x34>
 8006a36:	46e6      	mov	lr, ip
 8006a38:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a3c:	fa1f fc81 	uxth.w	ip, r1
 8006a40:	44f4      	add	ip, lr
 8006a42:	0c08      	lsrs	r0, r1, #16
 8006a44:	4471      	add	r1, lr
 8006a46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a4a:	b289      	uxth	r1, r1
 8006a4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a54:	f846 1b04 	str.w	r1, [r6], #4
 8006a58:	e7dc      	b.n	8006a14 <__mdiff+0xd4>
 8006a5a:	3f01      	subs	r7, #1
 8006a5c:	e7e6      	b.n	8006a2c <__mdiff+0xec>
 8006a5e:	bf00      	nop
 8006a60:	08007616 	.word	0x08007616
 8006a64:	08007627 	.word	0x08007627

08006a68 <__d2b>:
 8006a68:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	4690      	mov	r8, r2
 8006a70:	4699      	mov	r9, r3
 8006a72:	9e08      	ldr	r6, [sp, #32]
 8006a74:	f7ff fcd6 	bl	8006424 <_Balloc>
 8006a78:	4604      	mov	r4, r0
 8006a7a:	b930      	cbnz	r0, 8006a8a <__d2b+0x22>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a82:	4b23      	ldr	r3, [pc, #140]	@ (8006b10 <__d2b+0xa8>)
 8006a84:	4823      	ldr	r0, [pc, #140]	@ (8006b14 <__d2b+0xac>)
 8006a86:	f000 faf5 	bl	8007074 <__assert_func>
 8006a8a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a8e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a92:	b10d      	cbz	r5, 8006a98 <__d2b+0x30>
 8006a94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a98:	9301      	str	r3, [sp, #4]
 8006a9a:	f1b8 0300 	subs.w	r3, r8, #0
 8006a9e:	d024      	beq.n	8006aea <__d2b+0x82>
 8006aa0:	4668      	mov	r0, sp
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	f7ff fd85 	bl	80065b2 <__lo0bits>
 8006aa8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006aac:	b1d8      	cbz	r0, 8006ae6 <__d2b+0x7e>
 8006aae:	f1c0 0320 	rsb	r3, r0, #32
 8006ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	40c2      	lsrs	r2, r0
 8006aba:	6163      	str	r3, [r4, #20]
 8006abc:	9201      	str	r2, [sp, #4]
 8006abe:	9b01      	ldr	r3, [sp, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	bf0c      	ite	eq
 8006ac4:	2201      	moveq	r2, #1
 8006ac6:	2202      	movne	r2, #2
 8006ac8:	61a3      	str	r3, [r4, #24]
 8006aca:	6122      	str	r2, [r4, #16]
 8006acc:	b1ad      	cbz	r5, 8006afa <__d2b+0x92>
 8006ace:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006ad2:	4405      	add	r5, r0
 8006ad4:	6035      	str	r5, [r6, #0]
 8006ad6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006adc:	6018      	str	r0, [r3, #0]
 8006ade:	4620      	mov	r0, r4
 8006ae0:	b002      	add	sp, #8
 8006ae2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006ae6:	6161      	str	r1, [r4, #20]
 8006ae8:	e7e9      	b.n	8006abe <__d2b+0x56>
 8006aea:	a801      	add	r0, sp, #4
 8006aec:	f7ff fd61 	bl	80065b2 <__lo0bits>
 8006af0:	9b01      	ldr	r3, [sp, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	6163      	str	r3, [r4, #20]
 8006af6:	3020      	adds	r0, #32
 8006af8:	e7e7      	b.n	8006aca <__d2b+0x62>
 8006afa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006afe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b02:	6030      	str	r0, [r6, #0]
 8006b04:	6918      	ldr	r0, [r3, #16]
 8006b06:	f7ff fd35 	bl	8006574 <__hi0bits>
 8006b0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b0e:	e7e4      	b.n	8006ada <__d2b+0x72>
 8006b10:	08007616 	.word	0x08007616
 8006b14:	08007627 	.word	0x08007627

08006b18 <__ssputs_r>:
 8006b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b1c:	461f      	mov	r7, r3
 8006b1e:	688e      	ldr	r6, [r1, #8]
 8006b20:	4682      	mov	sl, r0
 8006b22:	42be      	cmp	r6, r7
 8006b24:	460c      	mov	r4, r1
 8006b26:	4690      	mov	r8, r2
 8006b28:	680b      	ldr	r3, [r1, #0]
 8006b2a:	d82d      	bhi.n	8006b88 <__ssputs_r+0x70>
 8006b2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b34:	d026      	beq.n	8006b84 <__ssputs_r+0x6c>
 8006b36:	6965      	ldr	r5, [r4, #20]
 8006b38:	6909      	ldr	r1, [r1, #16]
 8006b3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b3e:	eba3 0901 	sub.w	r9, r3, r1
 8006b42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b46:	1c7b      	adds	r3, r7, #1
 8006b48:	444b      	add	r3, r9
 8006b4a:	106d      	asrs	r5, r5, #1
 8006b4c:	429d      	cmp	r5, r3
 8006b4e:	bf38      	it	cc
 8006b50:	461d      	movcc	r5, r3
 8006b52:	0553      	lsls	r3, r2, #21
 8006b54:	d527      	bpl.n	8006ba6 <__ssputs_r+0x8e>
 8006b56:	4629      	mov	r1, r5
 8006b58:	f7ff fbd8 	bl	800630c <_malloc_r>
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	b360      	cbz	r0, 8006bba <__ssputs_r+0xa2>
 8006b60:	464a      	mov	r2, r9
 8006b62:	6921      	ldr	r1, [r4, #16]
 8006b64:	f7fe fcf3 	bl	800554e <memcpy>
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b72:	81a3      	strh	r3, [r4, #12]
 8006b74:	6126      	str	r6, [r4, #16]
 8006b76:	444e      	add	r6, r9
 8006b78:	6026      	str	r6, [r4, #0]
 8006b7a:	463e      	mov	r6, r7
 8006b7c:	6165      	str	r5, [r4, #20]
 8006b7e:	eba5 0509 	sub.w	r5, r5, r9
 8006b82:	60a5      	str	r5, [r4, #8]
 8006b84:	42be      	cmp	r6, r7
 8006b86:	d900      	bls.n	8006b8a <__ssputs_r+0x72>
 8006b88:	463e      	mov	r6, r7
 8006b8a:	4632      	mov	r2, r6
 8006b8c:	4641      	mov	r1, r8
 8006b8e:	6820      	ldr	r0, [r4, #0]
 8006b90:	f000 fa23 	bl	8006fda <memmove>
 8006b94:	2000      	movs	r0, #0
 8006b96:	68a3      	ldr	r3, [r4, #8]
 8006b98:	1b9b      	subs	r3, r3, r6
 8006b9a:	60a3      	str	r3, [r4, #8]
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	4433      	add	r3, r6
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba6:	462a      	mov	r2, r5
 8006ba8:	f000 faa8 	bl	80070fc <_realloc_r>
 8006bac:	4606      	mov	r6, r0
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d1e0      	bne.n	8006b74 <__ssputs_r+0x5c>
 8006bb2:	4650      	mov	r0, sl
 8006bb4:	6921      	ldr	r1, [r4, #16]
 8006bb6:	f7ff fb37 	bl	8006228 <_free_r>
 8006bba:	230c      	movs	r3, #12
 8006bbc:	f8ca 3000 	str.w	r3, [sl]
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bca:	81a3      	strh	r3, [r4, #12]
 8006bcc:	e7e9      	b.n	8006ba2 <__ssputs_r+0x8a>
	...

08006bd0 <_svfiprintf_r>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	4698      	mov	r8, r3
 8006bd6:	898b      	ldrh	r3, [r1, #12]
 8006bd8:	4607      	mov	r7, r0
 8006bda:	061b      	lsls	r3, r3, #24
 8006bdc:	460d      	mov	r5, r1
 8006bde:	4614      	mov	r4, r2
 8006be0:	b09d      	sub	sp, #116	@ 0x74
 8006be2:	d510      	bpl.n	8006c06 <_svfiprintf_r+0x36>
 8006be4:	690b      	ldr	r3, [r1, #16]
 8006be6:	b973      	cbnz	r3, 8006c06 <_svfiprintf_r+0x36>
 8006be8:	2140      	movs	r1, #64	@ 0x40
 8006bea:	f7ff fb8f 	bl	800630c <_malloc_r>
 8006bee:	6028      	str	r0, [r5, #0]
 8006bf0:	6128      	str	r0, [r5, #16]
 8006bf2:	b930      	cbnz	r0, 8006c02 <_svfiprintf_r+0x32>
 8006bf4:	230c      	movs	r3, #12
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfc:	b01d      	add	sp, #116	@ 0x74
 8006bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c02:	2340      	movs	r3, #64	@ 0x40
 8006c04:	616b      	str	r3, [r5, #20]
 8006c06:	2300      	movs	r3, #0
 8006c08:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c0a:	2320      	movs	r3, #32
 8006c0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c10:	2330      	movs	r3, #48	@ 0x30
 8006c12:	f04f 0901 	mov.w	r9, #1
 8006c16:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c1a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006db4 <_svfiprintf_r+0x1e4>
 8006c1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c22:	4623      	mov	r3, r4
 8006c24:	469a      	mov	sl, r3
 8006c26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c2a:	b10a      	cbz	r2, 8006c30 <_svfiprintf_r+0x60>
 8006c2c:	2a25      	cmp	r2, #37	@ 0x25
 8006c2e:	d1f9      	bne.n	8006c24 <_svfiprintf_r+0x54>
 8006c30:	ebba 0b04 	subs.w	fp, sl, r4
 8006c34:	d00b      	beq.n	8006c4e <_svfiprintf_r+0x7e>
 8006c36:	465b      	mov	r3, fp
 8006c38:	4622      	mov	r2, r4
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	f7ff ff6b 	bl	8006b18 <__ssputs_r>
 8006c42:	3001      	adds	r0, #1
 8006c44:	f000 80a7 	beq.w	8006d96 <_svfiprintf_r+0x1c6>
 8006c48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c4a:	445a      	add	r2, fp
 8006c4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 809f 	beq.w	8006d96 <_svfiprintf_r+0x1c6>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c62:	f10a 0a01 	add.w	sl, sl, #1
 8006c66:	9304      	str	r3, [sp, #16]
 8006c68:	9307      	str	r3, [sp, #28]
 8006c6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c70:	4654      	mov	r4, sl
 8006c72:	2205      	movs	r2, #5
 8006c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c78:	484e      	ldr	r0, [pc, #312]	@ (8006db4 <_svfiprintf_r+0x1e4>)
 8006c7a:	f7fe fc5a 	bl	8005532 <memchr>
 8006c7e:	9a04      	ldr	r2, [sp, #16]
 8006c80:	b9d8      	cbnz	r0, 8006cba <_svfiprintf_r+0xea>
 8006c82:	06d0      	lsls	r0, r2, #27
 8006c84:	bf44      	itt	mi
 8006c86:	2320      	movmi	r3, #32
 8006c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c8c:	0711      	lsls	r1, r2, #28
 8006c8e:	bf44      	itt	mi
 8006c90:	232b      	movmi	r3, #43	@ 0x2b
 8006c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c96:	f89a 3000 	ldrb.w	r3, [sl]
 8006c9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c9c:	d015      	beq.n	8006cca <_svfiprintf_r+0xfa>
 8006c9e:	4654      	mov	r4, sl
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	f04f 0c0a 	mov.w	ip, #10
 8006ca6:	9a07      	ldr	r2, [sp, #28]
 8006ca8:	4621      	mov	r1, r4
 8006caa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cae:	3b30      	subs	r3, #48	@ 0x30
 8006cb0:	2b09      	cmp	r3, #9
 8006cb2:	d94b      	bls.n	8006d4c <_svfiprintf_r+0x17c>
 8006cb4:	b1b0      	cbz	r0, 8006ce4 <_svfiprintf_r+0x114>
 8006cb6:	9207      	str	r2, [sp, #28]
 8006cb8:	e014      	b.n	8006ce4 <_svfiprintf_r+0x114>
 8006cba:	eba0 0308 	sub.w	r3, r0, r8
 8006cbe:	fa09 f303 	lsl.w	r3, r9, r3
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	46a2      	mov	sl, r4
 8006cc6:	9304      	str	r3, [sp, #16]
 8006cc8:	e7d2      	b.n	8006c70 <_svfiprintf_r+0xa0>
 8006cca:	9b03      	ldr	r3, [sp, #12]
 8006ccc:	1d19      	adds	r1, r3, #4
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	9103      	str	r1, [sp, #12]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	bfbb      	ittet	lt
 8006cd6:	425b      	neglt	r3, r3
 8006cd8:	f042 0202 	orrlt.w	r2, r2, #2
 8006cdc:	9307      	strge	r3, [sp, #28]
 8006cde:	9307      	strlt	r3, [sp, #28]
 8006ce0:	bfb8      	it	lt
 8006ce2:	9204      	strlt	r2, [sp, #16]
 8006ce4:	7823      	ldrb	r3, [r4, #0]
 8006ce6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ce8:	d10a      	bne.n	8006d00 <_svfiprintf_r+0x130>
 8006cea:	7863      	ldrb	r3, [r4, #1]
 8006cec:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cee:	d132      	bne.n	8006d56 <_svfiprintf_r+0x186>
 8006cf0:	9b03      	ldr	r3, [sp, #12]
 8006cf2:	3402      	adds	r4, #2
 8006cf4:	1d1a      	adds	r2, r3, #4
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	9203      	str	r2, [sp, #12]
 8006cfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cfe:	9305      	str	r3, [sp, #20]
 8006d00:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006db8 <_svfiprintf_r+0x1e8>
 8006d04:	2203      	movs	r2, #3
 8006d06:	4650      	mov	r0, sl
 8006d08:	7821      	ldrb	r1, [r4, #0]
 8006d0a:	f7fe fc12 	bl	8005532 <memchr>
 8006d0e:	b138      	cbz	r0, 8006d20 <_svfiprintf_r+0x150>
 8006d10:	2240      	movs	r2, #64	@ 0x40
 8006d12:	9b04      	ldr	r3, [sp, #16]
 8006d14:	eba0 000a 	sub.w	r0, r0, sl
 8006d18:	4082      	lsls	r2, r0
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	3401      	adds	r4, #1
 8006d1e:	9304      	str	r3, [sp, #16]
 8006d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d24:	2206      	movs	r2, #6
 8006d26:	4825      	ldr	r0, [pc, #148]	@ (8006dbc <_svfiprintf_r+0x1ec>)
 8006d28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d2c:	f7fe fc01 	bl	8005532 <memchr>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d036      	beq.n	8006da2 <_svfiprintf_r+0x1d2>
 8006d34:	4b22      	ldr	r3, [pc, #136]	@ (8006dc0 <_svfiprintf_r+0x1f0>)
 8006d36:	bb1b      	cbnz	r3, 8006d80 <_svfiprintf_r+0x1b0>
 8006d38:	9b03      	ldr	r3, [sp, #12]
 8006d3a:	3307      	adds	r3, #7
 8006d3c:	f023 0307 	bic.w	r3, r3, #7
 8006d40:	3308      	adds	r3, #8
 8006d42:	9303      	str	r3, [sp, #12]
 8006d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d46:	4433      	add	r3, r6
 8006d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d4a:	e76a      	b.n	8006c22 <_svfiprintf_r+0x52>
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	2001      	movs	r0, #1
 8006d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d54:	e7a8      	b.n	8006ca8 <_svfiprintf_r+0xd8>
 8006d56:	2300      	movs	r3, #0
 8006d58:	f04f 0c0a 	mov.w	ip, #10
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	3401      	adds	r4, #1
 8006d60:	9305      	str	r3, [sp, #20]
 8006d62:	4620      	mov	r0, r4
 8006d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d68:	3a30      	subs	r2, #48	@ 0x30
 8006d6a:	2a09      	cmp	r2, #9
 8006d6c:	d903      	bls.n	8006d76 <_svfiprintf_r+0x1a6>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0c6      	beq.n	8006d00 <_svfiprintf_r+0x130>
 8006d72:	9105      	str	r1, [sp, #20]
 8006d74:	e7c4      	b.n	8006d00 <_svfiprintf_r+0x130>
 8006d76:	4604      	mov	r4, r0
 8006d78:	2301      	movs	r3, #1
 8006d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d7e:	e7f0      	b.n	8006d62 <_svfiprintf_r+0x192>
 8006d80:	ab03      	add	r3, sp, #12
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	462a      	mov	r2, r5
 8006d86:	4638      	mov	r0, r7
 8006d88:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc4 <_svfiprintf_r+0x1f4>)
 8006d8a:	a904      	add	r1, sp, #16
 8006d8c:	f7fd fd68 	bl	8004860 <_printf_float>
 8006d90:	1c42      	adds	r2, r0, #1
 8006d92:	4606      	mov	r6, r0
 8006d94:	d1d6      	bne.n	8006d44 <_svfiprintf_r+0x174>
 8006d96:	89ab      	ldrh	r3, [r5, #12]
 8006d98:	065b      	lsls	r3, r3, #25
 8006d9a:	f53f af2d 	bmi.w	8006bf8 <_svfiprintf_r+0x28>
 8006d9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006da0:	e72c      	b.n	8006bfc <_svfiprintf_r+0x2c>
 8006da2:	ab03      	add	r3, sp, #12
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	462a      	mov	r2, r5
 8006da8:	4638      	mov	r0, r7
 8006daa:	4b06      	ldr	r3, [pc, #24]	@ (8006dc4 <_svfiprintf_r+0x1f4>)
 8006dac:	a904      	add	r1, sp, #16
 8006dae:	f7fd fff5 	bl	8004d9c <_printf_i>
 8006db2:	e7ed      	b.n	8006d90 <_svfiprintf_r+0x1c0>
 8006db4:	08007680 	.word	0x08007680
 8006db8:	08007686 	.word	0x08007686
 8006dbc:	0800768a 	.word	0x0800768a
 8006dc0:	08004861 	.word	0x08004861
 8006dc4:	08006b19 	.word	0x08006b19

08006dc8 <__sflush_r>:
 8006dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	0716      	lsls	r6, r2, #28
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	d454      	bmi.n	8006e80 <__sflush_r+0xb8>
 8006dd6:	684b      	ldr	r3, [r1, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	dc02      	bgt.n	8006de2 <__sflush_r+0x1a>
 8006ddc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	dd48      	ble.n	8006e74 <__sflush_r+0xac>
 8006de2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006de4:	2e00      	cmp	r6, #0
 8006de6:	d045      	beq.n	8006e74 <__sflush_r+0xac>
 8006de8:	2300      	movs	r3, #0
 8006dea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006dee:	682f      	ldr	r7, [r5, #0]
 8006df0:	6a21      	ldr	r1, [r4, #32]
 8006df2:	602b      	str	r3, [r5, #0]
 8006df4:	d030      	beq.n	8006e58 <__sflush_r+0x90>
 8006df6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006df8:	89a3      	ldrh	r3, [r4, #12]
 8006dfa:	0759      	lsls	r1, r3, #29
 8006dfc:	d505      	bpl.n	8006e0a <__sflush_r+0x42>
 8006dfe:	6863      	ldr	r3, [r4, #4]
 8006e00:	1ad2      	subs	r2, r2, r3
 8006e02:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e04:	b10b      	cbz	r3, 8006e0a <__sflush_r+0x42>
 8006e06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e08:	1ad2      	subs	r2, r2, r3
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e10:	6a21      	ldr	r1, [r4, #32]
 8006e12:	47b0      	blx	r6
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	d106      	bne.n	8006e28 <__sflush_r+0x60>
 8006e1a:	6829      	ldr	r1, [r5, #0]
 8006e1c:	291d      	cmp	r1, #29
 8006e1e:	d82b      	bhi.n	8006e78 <__sflush_r+0xb0>
 8006e20:	4a28      	ldr	r2, [pc, #160]	@ (8006ec4 <__sflush_r+0xfc>)
 8006e22:	40ca      	lsrs	r2, r1
 8006e24:	07d6      	lsls	r6, r2, #31
 8006e26:	d527      	bpl.n	8006e78 <__sflush_r+0xb0>
 8006e28:	2200      	movs	r2, #0
 8006e2a:	6062      	str	r2, [r4, #4]
 8006e2c:	6922      	ldr	r2, [r4, #16]
 8006e2e:	04d9      	lsls	r1, r3, #19
 8006e30:	6022      	str	r2, [r4, #0]
 8006e32:	d504      	bpl.n	8006e3e <__sflush_r+0x76>
 8006e34:	1c42      	adds	r2, r0, #1
 8006e36:	d101      	bne.n	8006e3c <__sflush_r+0x74>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	b903      	cbnz	r3, 8006e3e <__sflush_r+0x76>
 8006e3c:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e3e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e40:	602f      	str	r7, [r5, #0]
 8006e42:	b1b9      	cbz	r1, 8006e74 <__sflush_r+0xac>
 8006e44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e48:	4299      	cmp	r1, r3
 8006e4a:	d002      	beq.n	8006e52 <__sflush_r+0x8a>
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	f7ff f9eb 	bl	8006228 <_free_r>
 8006e52:	2300      	movs	r3, #0
 8006e54:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e56:	e00d      	b.n	8006e74 <__sflush_r+0xac>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	47b0      	blx	r6
 8006e5e:	4602      	mov	r2, r0
 8006e60:	1c50      	adds	r0, r2, #1
 8006e62:	d1c9      	bne.n	8006df8 <__sflush_r+0x30>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0c6      	beq.n	8006df8 <__sflush_r+0x30>
 8006e6a:	2b1d      	cmp	r3, #29
 8006e6c:	d001      	beq.n	8006e72 <__sflush_r+0xaa>
 8006e6e:	2b16      	cmp	r3, #22
 8006e70:	d11d      	bne.n	8006eae <__sflush_r+0xe6>
 8006e72:	602f      	str	r7, [r5, #0]
 8006e74:	2000      	movs	r0, #0
 8006e76:	e021      	b.n	8006ebc <__sflush_r+0xf4>
 8006e78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e7c:	b21b      	sxth	r3, r3
 8006e7e:	e01a      	b.n	8006eb6 <__sflush_r+0xee>
 8006e80:	690f      	ldr	r7, [r1, #16]
 8006e82:	2f00      	cmp	r7, #0
 8006e84:	d0f6      	beq.n	8006e74 <__sflush_r+0xac>
 8006e86:	0793      	lsls	r3, r2, #30
 8006e88:	bf18      	it	ne
 8006e8a:	2300      	movne	r3, #0
 8006e8c:	680e      	ldr	r6, [r1, #0]
 8006e8e:	bf08      	it	eq
 8006e90:	694b      	ldreq	r3, [r1, #20]
 8006e92:	1bf6      	subs	r6, r6, r7
 8006e94:	600f      	str	r7, [r1, #0]
 8006e96:	608b      	str	r3, [r1, #8]
 8006e98:	2e00      	cmp	r6, #0
 8006e9a:	ddeb      	ble.n	8006e74 <__sflush_r+0xac>
 8006e9c:	4633      	mov	r3, r6
 8006e9e:	463a      	mov	r2, r7
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	6a21      	ldr	r1, [r4, #32]
 8006ea4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006ea8:	47e0      	blx	ip
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	dc07      	bgt.n	8006ebe <__sflush_r+0xf6>
 8006eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ebe:	4407      	add	r7, r0
 8006ec0:	1a36      	subs	r6, r6, r0
 8006ec2:	e7e9      	b.n	8006e98 <__sflush_r+0xd0>
 8006ec4:	20400001 	.word	0x20400001

08006ec8 <_fflush_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	690b      	ldr	r3, [r1, #16]
 8006ecc:	4605      	mov	r5, r0
 8006ece:	460c      	mov	r4, r1
 8006ed0:	b913      	cbnz	r3, 8006ed8 <_fflush_r+0x10>
 8006ed2:	2500      	movs	r5, #0
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	bd38      	pop	{r3, r4, r5, pc}
 8006ed8:	b118      	cbz	r0, 8006ee2 <_fflush_r+0x1a>
 8006eda:	6a03      	ldr	r3, [r0, #32]
 8006edc:	b90b      	cbnz	r3, 8006ee2 <_fflush_r+0x1a>
 8006ede:	f7fe f907 	bl	80050f0 <__sinit>
 8006ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0f3      	beq.n	8006ed2 <_fflush_r+0xa>
 8006eea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006eec:	07d0      	lsls	r0, r2, #31
 8006eee:	d404      	bmi.n	8006efa <_fflush_r+0x32>
 8006ef0:	0599      	lsls	r1, r3, #22
 8006ef2:	d402      	bmi.n	8006efa <_fflush_r+0x32>
 8006ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ef6:	f7fe fb1a 	bl	800552e <__retarget_lock_acquire_recursive>
 8006efa:	4628      	mov	r0, r5
 8006efc:	4621      	mov	r1, r4
 8006efe:	f7ff ff63 	bl	8006dc8 <__sflush_r>
 8006f02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f04:	4605      	mov	r5, r0
 8006f06:	07da      	lsls	r2, r3, #31
 8006f08:	d4e4      	bmi.n	8006ed4 <_fflush_r+0xc>
 8006f0a:	89a3      	ldrh	r3, [r4, #12]
 8006f0c:	059b      	lsls	r3, r3, #22
 8006f0e:	d4e1      	bmi.n	8006ed4 <_fflush_r+0xc>
 8006f10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f12:	f7fe fb0d 	bl	8005530 <__retarget_lock_release_recursive>
 8006f16:	e7dd      	b.n	8006ed4 <_fflush_r+0xc>

08006f18 <__swhatbuf_r>:
 8006f18:	b570      	push	{r4, r5, r6, lr}
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f20:	4615      	mov	r5, r2
 8006f22:	2900      	cmp	r1, #0
 8006f24:	461e      	mov	r6, r3
 8006f26:	b096      	sub	sp, #88	@ 0x58
 8006f28:	da0c      	bge.n	8006f44 <__swhatbuf_r+0x2c>
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f32:	bf14      	ite	ne
 8006f34:	2340      	movne	r3, #64	@ 0x40
 8006f36:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	6031      	str	r1, [r6, #0]
 8006f3e:	602b      	str	r3, [r5, #0]
 8006f40:	b016      	add	sp, #88	@ 0x58
 8006f42:	bd70      	pop	{r4, r5, r6, pc}
 8006f44:	466a      	mov	r2, sp
 8006f46:	f000 f863 	bl	8007010 <_fstat_r>
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	dbed      	blt.n	8006f2a <__swhatbuf_r+0x12>
 8006f4e:	9901      	ldr	r1, [sp, #4]
 8006f50:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f54:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f58:	4259      	negs	r1, r3
 8006f5a:	4159      	adcs	r1, r3
 8006f5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f60:	e7eb      	b.n	8006f3a <__swhatbuf_r+0x22>

08006f62 <__smakebuf_r>:
 8006f62:	898b      	ldrh	r3, [r1, #12]
 8006f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f66:	079d      	lsls	r5, r3, #30
 8006f68:	4606      	mov	r6, r0
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	d507      	bpl.n	8006f7e <__smakebuf_r+0x1c>
 8006f6e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	6123      	str	r3, [r4, #16]
 8006f76:	2301      	movs	r3, #1
 8006f78:	6163      	str	r3, [r4, #20]
 8006f7a:	b003      	add	sp, #12
 8006f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f7e:	466a      	mov	r2, sp
 8006f80:	ab01      	add	r3, sp, #4
 8006f82:	f7ff ffc9 	bl	8006f18 <__swhatbuf_r>
 8006f86:	9f00      	ldr	r7, [sp, #0]
 8006f88:	4605      	mov	r5, r0
 8006f8a:	4639      	mov	r1, r7
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f7ff f9bd 	bl	800630c <_malloc_r>
 8006f92:	b948      	cbnz	r0, 8006fa8 <__smakebuf_r+0x46>
 8006f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f98:	059a      	lsls	r2, r3, #22
 8006f9a:	d4ee      	bmi.n	8006f7a <__smakebuf_r+0x18>
 8006f9c:	f023 0303 	bic.w	r3, r3, #3
 8006fa0:	f043 0302 	orr.w	r3, r3, #2
 8006fa4:	81a3      	strh	r3, [r4, #12]
 8006fa6:	e7e2      	b.n	8006f6e <__smakebuf_r+0xc>
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fb2:	81a3      	strh	r3, [r4, #12]
 8006fb4:	9b01      	ldr	r3, [sp, #4]
 8006fb6:	6020      	str	r0, [r4, #0]
 8006fb8:	b15b      	cbz	r3, 8006fd2 <__smakebuf_r+0x70>
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fc0:	f000 f838 	bl	8007034 <_isatty_r>
 8006fc4:	b128      	cbz	r0, 8006fd2 <__smakebuf_r+0x70>
 8006fc6:	89a3      	ldrh	r3, [r4, #12]
 8006fc8:	f023 0303 	bic.w	r3, r3, #3
 8006fcc:	f043 0301 	orr.w	r3, r3, #1
 8006fd0:	81a3      	strh	r3, [r4, #12]
 8006fd2:	89a3      	ldrh	r3, [r4, #12]
 8006fd4:	431d      	orrs	r5, r3
 8006fd6:	81a5      	strh	r5, [r4, #12]
 8006fd8:	e7cf      	b.n	8006f7a <__smakebuf_r+0x18>

08006fda <memmove>:
 8006fda:	4288      	cmp	r0, r1
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	eb01 0402 	add.w	r4, r1, r2
 8006fe2:	d902      	bls.n	8006fea <memmove+0x10>
 8006fe4:	4284      	cmp	r4, r0
 8006fe6:	4623      	mov	r3, r4
 8006fe8:	d807      	bhi.n	8006ffa <memmove+0x20>
 8006fea:	1e43      	subs	r3, r0, #1
 8006fec:	42a1      	cmp	r1, r4
 8006fee:	d008      	beq.n	8007002 <memmove+0x28>
 8006ff0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ff4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ff8:	e7f8      	b.n	8006fec <memmove+0x12>
 8006ffa:	4601      	mov	r1, r0
 8006ffc:	4402      	add	r2, r0
 8006ffe:	428a      	cmp	r2, r1
 8007000:	d100      	bne.n	8007004 <memmove+0x2a>
 8007002:	bd10      	pop	{r4, pc}
 8007004:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007008:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800700c:	e7f7      	b.n	8006ffe <memmove+0x24>
	...

08007010 <_fstat_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	2300      	movs	r3, #0
 8007014:	4d06      	ldr	r5, [pc, #24]	@ (8007030 <_fstat_r+0x20>)
 8007016:	4604      	mov	r4, r0
 8007018:	4608      	mov	r0, r1
 800701a:	4611      	mov	r1, r2
 800701c:	602b      	str	r3, [r5, #0]
 800701e:	f7fa fc57 	bl	80018d0 <_fstat>
 8007022:	1c43      	adds	r3, r0, #1
 8007024:	d102      	bne.n	800702c <_fstat_r+0x1c>
 8007026:	682b      	ldr	r3, [r5, #0]
 8007028:	b103      	cbz	r3, 800702c <_fstat_r+0x1c>
 800702a:	6023      	str	r3, [r4, #0]
 800702c:	bd38      	pop	{r3, r4, r5, pc}
 800702e:	bf00      	nop
 8007030:	20000520 	.word	0x20000520

08007034 <_isatty_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	2300      	movs	r3, #0
 8007038:	4d05      	ldr	r5, [pc, #20]	@ (8007050 <_isatty_r+0x1c>)
 800703a:	4604      	mov	r4, r0
 800703c:	4608      	mov	r0, r1
 800703e:	602b      	str	r3, [r5, #0]
 8007040:	f7fa fc55 	bl	80018ee <_isatty>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	d102      	bne.n	800704e <_isatty_r+0x1a>
 8007048:	682b      	ldr	r3, [r5, #0]
 800704a:	b103      	cbz	r3, 800704e <_isatty_r+0x1a>
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	bd38      	pop	{r3, r4, r5, pc}
 8007050:	20000520 	.word	0x20000520

08007054 <_sbrk_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	2300      	movs	r3, #0
 8007058:	4d05      	ldr	r5, [pc, #20]	@ (8007070 <_sbrk_r+0x1c>)
 800705a:	4604      	mov	r4, r0
 800705c:	4608      	mov	r0, r1
 800705e:	602b      	str	r3, [r5, #0]
 8007060:	f7fa fc5c 	bl	800191c <_sbrk>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d102      	bne.n	800706e <_sbrk_r+0x1a>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	b103      	cbz	r3, 800706e <_sbrk_r+0x1a>
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	20000520 	.word	0x20000520

08007074 <__assert_func>:
 8007074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007076:	4614      	mov	r4, r2
 8007078:	461a      	mov	r2, r3
 800707a:	4b09      	ldr	r3, [pc, #36]	@ (80070a0 <__assert_func+0x2c>)
 800707c:	4605      	mov	r5, r0
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68d8      	ldr	r0, [r3, #12]
 8007082:	b14c      	cbz	r4, 8007098 <__assert_func+0x24>
 8007084:	4b07      	ldr	r3, [pc, #28]	@ (80070a4 <__assert_func+0x30>)
 8007086:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800708a:	9100      	str	r1, [sp, #0]
 800708c:	462b      	mov	r3, r5
 800708e:	4906      	ldr	r1, [pc, #24]	@ (80070a8 <__assert_func+0x34>)
 8007090:	f000 f870 	bl	8007174 <fiprintf>
 8007094:	f000 f880 	bl	8007198 <abort>
 8007098:	4b04      	ldr	r3, [pc, #16]	@ (80070ac <__assert_func+0x38>)
 800709a:	461c      	mov	r4, r3
 800709c:	e7f3      	b.n	8007086 <__assert_func+0x12>
 800709e:	bf00      	nop
 80070a0:	20000018 	.word	0x20000018
 80070a4:	0800769b 	.word	0x0800769b
 80070a8:	080076a8 	.word	0x080076a8
 80070ac:	080076d6 	.word	0x080076d6

080070b0 <_calloc_r>:
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	fba1 5402 	umull	r5, r4, r1, r2
 80070b6:	b934      	cbnz	r4, 80070c6 <_calloc_r+0x16>
 80070b8:	4629      	mov	r1, r5
 80070ba:	f7ff f927 	bl	800630c <_malloc_r>
 80070be:	4606      	mov	r6, r0
 80070c0:	b928      	cbnz	r0, 80070ce <_calloc_r+0x1e>
 80070c2:	4630      	mov	r0, r6
 80070c4:	bd70      	pop	{r4, r5, r6, pc}
 80070c6:	220c      	movs	r2, #12
 80070c8:	2600      	movs	r6, #0
 80070ca:	6002      	str	r2, [r0, #0]
 80070cc:	e7f9      	b.n	80070c2 <_calloc_r+0x12>
 80070ce:	462a      	mov	r2, r5
 80070d0:	4621      	mov	r1, r4
 80070d2:	f7fe f9af 	bl	8005434 <memset>
 80070d6:	e7f4      	b.n	80070c2 <_calloc_r+0x12>

080070d8 <__ascii_mbtowc>:
 80070d8:	b082      	sub	sp, #8
 80070da:	b901      	cbnz	r1, 80070de <__ascii_mbtowc+0x6>
 80070dc:	a901      	add	r1, sp, #4
 80070de:	b142      	cbz	r2, 80070f2 <__ascii_mbtowc+0x1a>
 80070e0:	b14b      	cbz	r3, 80070f6 <__ascii_mbtowc+0x1e>
 80070e2:	7813      	ldrb	r3, [r2, #0]
 80070e4:	600b      	str	r3, [r1, #0]
 80070e6:	7812      	ldrb	r2, [r2, #0]
 80070e8:	1e10      	subs	r0, r2, #0
 80070ea:	bf18      	it	ne
 80070ec:	2001      	movne	r0, #1
 80070ee:	b002      	add	sp, #8
 80070f0:	4770      	bx	lr
 80070f2:	4610      	mov	r0, r2
 80070f4:	e7fb      	b.n	80070ee <__ascii_mbtowc+0x16>
 80070f6:	f06f 0001 	mvn.w	r0, #1
 80070fa:	e7f8      	b.n	80070ee <__ascii_mbtowc+0x16>

080070fc <_realloc_r>:
 80070fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007100:	4607      	mov	r7, r0
 8007102:	4614      	mov	r4, r2
 8007104:	460d      	mov	r5, r1
 8007106:	b921      	cbnz	r1, 8007112 <_realloc_r+0x16>
 8007108:	4611      	mov	r1, r2
 800710a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800710e:	f7ff b8fd 	b.w	800630c <_malloc_r>
 8007112:	b92a      	cbnz	r2, 8007120 <_realloc_r+0x24>
 8007114:	f7ff f888 	bl	8006228 <_free_r>
 8007118:	4625      	mov	r5, r4
 800711a:	4628      	mov	r0, r5
 800711c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007120:	f000 f841 	bl	80071a6 <_malloc_usable_size_r>
 8007124:	4284      	cmp	r4, r0
 8007126:	4606      	mov	r6, r0
 8007128:	d802      	bhi.n	8007130 <_realloc_r+0x34>
 800712a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800712e:	d8f4      	bhi.n	800711a <_realloc_r+0x1e>
 8007130:	4621      	mov	r1, r4
 8007132:	4638      	mov	r0, r7
 8007134:	f7ff f8ea 	bl	800630c <_malloc_r>
 8007138:	4680      	mov	r8, r0
 800713a:	b908      	cbnz	r0, 8007140 <_realloc_r+0x44>
 800713c:	4645      	mov	r5, r8
 800713e:	e7ec      	b.n	800711a <_realloc_r+0x1e>
 8007140:	42b4      	cmp	r4, r6
 8007142:	4622      	mov	r2, r4
 8007144:	4629      	mov	r1, r5
 8007146:	bf28      	it	cs
 8007148:	4632      	movcs	r2, r6
 800714a:	f7fe fa00 	bl	800554e <memcpy>
 800714e:	4629      	mov	r1, r5
 8007150:	4638      	mov	r0, r7
 8007152:	f7ff f869 	bl	8006228 <_free_r>
 8007156:	e7f1      	b.n	800713c <_realloc_r+0x40>

08007158 <__ascii_wctomb>:
 8007158:	4603      	mov	r3, r0
 800715a:	4608      	mov	r0, r1
 800715c:	b141      	cbz	r1, 8007170 <__ascii_wctomb+0x18>
 800715e:	2aff      	cmp	r2, #255	@ 0xff
 8007160:	d904      	bls.n	800716c <__ascii_wctomb+0x14>
 8007162:	228a      	movs	r2, #138	@ 0x8a
 8007164:	f04f 30ff 	mov.w	r0, #4294967295
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	4770      	bx	lr
 800716c:	2001      	movs	r0, #1
 800716e:	700a      	strb	r2, [r1, #0]
 8007170:	4770      	bx	lr
	...

08007174 <fiprintf>:
 8007174:	b40e      	push	{r1, r2, r3}
 8007176:	b503      	push	{r0, r1, lr}
 8007178:	4601      	mov	r1, r0
 800717a:	ab03      	add	r3, sp, #12
 800717c:	4805      	ldr	r0, [pc, #20]	@ (8007194 <fiprintf+0x20>)
 800717e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007182:	6800      	ldr	r0, [r0, #0]
 8007184:	9301      	str	r3, [sp, #4]
 8007186:	f000 f83d 	bl	8007204 <_vfiprintf_r>
 800718a:	b002      	add	sp, #8
 800718c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007190:	b003      	add	sp, #12
 8007192:	4770      	bx	lr
 8007194:	20000018 	.word	0x20000018

08007198 <abort>:
 8007198:	2006      	movs	r0, #6
 800719a:	b508      	push	{r3, lr}
 800719c:	f000 f972 	bl	8007484 <raise>
 80071a0:	2001      	movs	r0, #1
 80071a2:	f7fa fb46 	bl	8001832 <_exit>

080071a6 <_malloc_usable_size_r>:
 80071a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071aa:	1f18      	subs	r0, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bfbc      	itt	lt
 80071b0:	580b      	ldrlt	r3, [r1, r0]
 80071b2:	18c0      	addlt	r0, r0, r3
 80071b4:	4770      	bx	lr

080071b6 <__sfputc_r>:
 80071b6:	6893      	ldr	r3, [r2, #8]
 80071b8:	b410      	push	{r4}
 80071ba:	3b01      	subs	r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	6093      	str	r3, [r2, #8]
 80071c0:	da07      	bge.n	80071d2 <__sfputc_r+0x1c>
 80071c2:	6994      	ldr	r4, [r2, #24]
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	db01      	blt.n	80071cc <__sfputc_r+0x16>
 80071c8:	290a      	cmp	r1, #10
 80071ca:	d102      	bne.n	80071d2 <__sfputc_r+0x1c>
 80071cc:	bc10      	pop	{r4}
 80071ce:	f7fe b89c 	b.w	800530a <__swbuf_r>
 80071d2:	6813      	ldr	r3, [r2, #0]
 80071d4:	1c58      	adds	r0, r3, #1
 80071d6:	6010      	str	r0, [r2, #0]
 80071d8:	7019      	strb	r1, [r3, #0]
 80071da:	4608      	mov	r0, r1
 80071dc:	bc10      	pop	{r4}
 80071de:	4770      	bx	lr

080071e0 <__sfputs_r>:
 80071e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e2:	4606      	mov	r6, r0
 80071e4:	460f      	mov	r7, r1
 80071e6:	4614      	mov	r4, r2
 80071e8:	18d5      	adds	r5, r2, r3
 80071ea:	42ac      	cmp	r4, r5
 80071ec:	d101      	bne.n	80071f2 <__sfputs_r+0x12>
 80071ee:	2000      	movs	r0, #0
 80071f0:	e007      	b.n	8007202 <__sfputs_r+0x22>
 80071f2:	463a      	mov	r2, r7
 80071f4:	4630      	mov	r0, r6
 80071f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071fa:	f7ff ffdc 	bl	80071b6 <__sfputc_r>
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	d1f3      	bne.n	80071ea <__sfputs_r+0xa>
 8007202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007204 <_vfiprintf_r>:
 8007204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007208:	460d      	mov	r5, r1
 800720a:	4614      	mov	r4, r2
 800720c:	4698      	mov	r8, r3
 800720e:	4606      	mov	r6, r0
 8007210:	b09d      	sub	sp, #116	@ 0x74
 8007212:	b118      	cbz	r0, 800721c <_vfiprintf_r+0x18>
 8007214:	6a03      	ldr	r3, [r0, #32]
 8007216:	b90b      	cbnz	r3, 800721c <_vfiprintf_r+0x18>
 8007218:	f7fd ff6a 	bl	80050f0 <__sinit>
 800721c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800721e:	07d9      	lsls	r1, r3, #31
 8007220:	d405      	bmi.n	800722e <_vfiprintf_r+0x2a>
 8007222:	89ab      	ldrh	r3, [r5, #12]
 8007224:	059a      	lsls	r2, r3, #22
 8007226:	d402      	bmi.n	800722e <_vfiprintf_r+0x2a>
 8007228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800722a:	f7fe f980 	bl	800552e <__retarget_lock_acquire_recursive>
 800722e:	89ab      	ldrh	r3, [r5, #12]
 8007230:	071b      	lsls	r3, r3, #28
 8007232:	d501      	bpl.n	8007238 <_vfiprintf_r+0x34>
 8007234:	692b      	ldr	r3, [r5, #16]
 8007236:	b99b      	cbnz	r3, 8007260 <_vfiprintf_r+0x5c>
 8007238:	4629      	mov	r1, r5
 800723a:	4630      	mov	r0, r6
 800723c:	f7fe f8a4 	bl	8005388 <__swsetup_r>
 8007240:	b170      	cbz	r0, 8007260 <_vfiprintf_r+0x5c>
 8007242:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007244:	07dc      	lsls	r4, r3, #31
 8007246:	d504      	bpl.n	8007252 <_vfiprintf_r+0x4e>
 8007248:	f04f 30ff 	mov.w	r0, #4294967295
 800724c:	b01d      	add	sp, #116	@ 0x74
 800724e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007252:	89ab      	ldrh	r3, [r5, #12]
 8007254:	0598      	lsls	r0, r3, #22
 8007256:	d4f7      	bmi.n	8007248 <_vfiprintf_r+0x44>
 8007258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800725a:	f7fe f969 	bl	8005530 <__retarget_lock_release_recursive>
 800725e:	e7f3      	b.n	8007248 <_vfiprintf_r+0x44>
 8007260:	2300      	movs	r3, #0
 8007262:	9309      	str	r3, [sp, #36]	@ 0x24
 8007264:	2320      	movs	r3, #32
 8007266:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800726a:	2330      	movs	r3, #48	@ 0x30
 800726c:	f04f 0901 	mov.w	r9, #1
 8007270:	f8cd 800c 	str.w	r8, [sp, #12]
 8007274:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007420 <_vfiprintf_r+0x21c>
 8007278:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800727c:	4623      	mov	r3, r4
 800727e:	469a      	mov	sl, r3
 8007280:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007284:	b10a      	cbz	r2, 800728a <_vfiprintf_r+0x86>
 8007286:	2a25      	cmp	r2, #37	@ 0x25
 8007288:	d1f9      	bne.n	800727e <_vfiprintf_r+0x7a>
 800728a:	ebba 0b04 	subs.w	fp, sl, r4
 800728e:	d00b      	beq.n	80072a8 <_vfiprintf_r+0xa4>
 8007290:	465b      	mov	r3, fp
 8007292:	4622      	mov	r2, r4
 8007294:	4629      	mov	r1, r5
 8007296:	4630      	mov	r0, r6
 8007298:	f7ff ffa2 	bl	80071e0 <__sfputs_r>
 800729c:	3001      	adds	r0, #1
 800729e:	f000 80a7 	beq.w	80073f0 <_vfiprintf_r+0x1ec>
 80072a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072a4:	445a      	add	r2, fp
 80072a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80072a8:	f89a 3000 	ldrb.w	r3, [sl]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f000 809f 	beq.w	80073f0 <_vfiprintf_r+0x1ec>
 80072b2:	2300      	movs	r3, #0
 80072b4:	f04f 32ff 	mov.w	r2, #4294967295
 80072b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072bc:	f10a 0a01 	add.w	sl, sl, #1
 80072c0:	9304      	str	r3, [sp, #16]
 80072c2:	9307      	str	r3, [sp, #28]
 80072c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80072ca:	4654      	mov	r4, sl
 80072cc:	2205      	movs	r2, #5
 80072ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d2:	4853      	ldr	r0, [pc, #332]	@ (8007420 <_vfiprintf_r+0x21c>)
 80072d4:	f7fe f92d 	bl	8005532 <memchr>
 80072d8:	9a04      	ldr	r2, [sp, #16]
 80072da:	b9d8      	cbnz	r0, 8007314 <_vfiprintf_r+0x110>
 80072dc:	06d1      	lsls	r1, r2, #27
 80072de:	bf44      	itt	mi
 80072e0:	2320      	movmi	r3, #32
 80072e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072e6:	0713      	lsls	r3, r2, #28
 80072e8:	bf44      	itt	mi
 80072ea:	232b      	movmi	r3, #43	@ 0x2b
 80072ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072f0:	f89a 3000 	ldrb.w	r3, [sl]
 80072f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80072f6:	d015      	beq.n	8007324 <_vfiprintf_r+0x120>
 80072f8:	4654      	mov	r4, sl
 80072fa:	2000      	movs	r0, #0
 80072fc:	f04f 0c0a 	mov.w	ip, #10
 8007300:	9a07      	ldr	r2, [sp, #28]
 8007302:	4621      	mov	r1, r4
 8007304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007308:	3b30      	subs	r3, #48	@ 0x30
 800730a:	2b09      	cmp	r3, #9
 800730c:	d94b      	bls.n	80073a6 <_vfiprintf_r+0x1a2>
 800730e:	b1b0      	cbz	r0, 800733e <_vfiprintf_r+0x13a>
 8007310:	9207      	str	r2, [sp, #28]
 8007312:	e014      	b.n	800733e <_vfiprintf_r+0x13a>
 8007314:	eba0 0308 	sub.w	r3, r0, r8
 8007318:	fa09 f303 	lsl.w	r3, r9, r3
 800731c:	4313      	orrs	r3, r2
 800731e:	46a2      	mov	sl, r4
 8007320:	9304      	str	r3, [sp, #16]
 8007322:	e7d2      	b.n	80072ca <_vfiprintf_r+0xc6>
 8007324:	9b03      	ldr	r3, [sp, #12]
 8007326:	1d19      	adds	r1, r3, #4
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	9103      	str	r1, [sp, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	bfbb      	ittet	lt
 8007330:	425b      	neglt	r3, r3
 8007332:	f042 0202 	orrlt.w	r2, r2, #2
 8007336:	9307      	strge	r3, [sp, #28]
 8007338:	9307      	strlt	r3, [sp, #28]
 800733a:	bfb8      	it	lt
 800733c:	9204      	strlt	r2, [sp, #16]
 800733e:	7823      	ldrb	r3, [r4, #0]
 8007340:	2b2e      	cmp	r3, #46	@ 0x2e
 8007342:	d10a      	bne.n	800735a <_vfiprintf_r+0x156>
 8007344:	7863      	ldrb	r3, [r4, #1]
 8007346:	2b2a      	cmp	r3, #42	@ 0x2a
 8007348:	d132      	bne.n	80073b0 <_vfiprintf_r+0x1ac>
 800734a:	9b03      	ldr	r3, [sp, #12]
 800734c:	3402      	adds	r4, #2
 800734e:	1d1a      	adds	r2, r3, #4
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	9203      	str	r2, [sp, #12]
 8007354:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007358:	9305      	str	r3, [sp, #20]
 800735a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007424 <_vfiprintf_r+0x220>
 800735e:	2203      	movs	r2, #3
 8007360:	4650      	mov	r0, sl
 8007362:	7821      	ldrb	r1, [r4, #0]
 8007364:	f7fe f8e5 	bl	8005532 <memchr>
 8007368:	b138      	cbz	r0, 800737a <_vfiprintf_r+0x176>
 800736a:	2240      	movs	r2, #64	@ 0x40
 800736c:	9b04      	ldr	r3, [sp, #16]
 800736e:	eba0 000a 	sub.w	r0, r0, sl
 8007372:	4082      	lsls	r2, r0
 8007374:	4313      	orrs	r3, r2
 8007376:	3401      	adds	r4, #1
 8007378:	9304      	str	r3, [sp, #16]
 800737a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800737e:	2206      	movs	r2, #6
 8007380:	4829      	ldr	r0, [pc, #164]	@ (8007428 <_vfiprintf_r+0x224>)
 8007382:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007386:	f7fe f8d4 	bl	8005532 <memchr>
 800738a:	2800      	cmp	r0, #0
 800738c:	d03f      	beq.n	800740e <_vfiprintf_r+0x20a>
 800738e:	4b27      	ldr	r3, [pc, #156]	@ (800742c <_vfiprintf_r+0x228>)
 8007390:	bb1b      	cbnz	r3, 80073da <_vfiprintf_r+0x1d6>
 8007392:	9b03      	ldr	r3, [sp, #12]
 8007394:	3307      	adds	r3, #7
 8007396:	f023 0307 	bic.w	r3, r3, #7
 800739a:	3308      	adds	r3, #8
 800739c:	9303      	str	r3, [sp, #12]
 800739e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a0:	443b      	add	r3, r7
 80073a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80073a4:	e76a      	b.n	800727c <_vfiprintf_r+0x78>
 80073a6:	460c      	mov	r4, r1
 80073a8:	2001      	movs	r0, #1
 80073aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ae:	e7a8      	b.n	8007302 <_vfiprintf_r+0xfe>
 80073b0:	2300      	movs	r3, #0
 80073b2:	f04f 0c0a 	mov.w	ip, #10
 80073b6:	4619      	mov	r1, r3
 80073b8:	3401      	adds	r4, #1
 80073ba:	9305      	str	r3, [sp, #20]
 80073bc:	4620      	mov	r0, r4
 80073be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073c2:	3a30      	subs	r2, #48	@ 0x30
 80073c4:	2a09      	cmp	r2, #9
 80073c6:	d903      	bls.n	80073d0 <_vfiprintf_r+0x1cc>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d0c6      	beq.n	800735a <_vfiprintf_r+0x156>
 80073cc:	9105      	str	r1, [sp, #20]
 80073ce:	e7c4      	b.n	800735a <_vfiprintf_r+0x156>
 80073d0:	4604      	mov	r4, r0
 80073d2:	2301      	movs	r3, #1
 80073d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80073d8:	e7f0      	b.n	80073bc <_vfiprintf_r+0x1b8>
 80073da:	ab03      	add	r3, sp, #12
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	462a      	mov	r2, r5
 80073e0:	4630      	mov	r0, r6
 80073e2:	4b13      	ldr	r3, [pc, #76]	@ (8007430 <_vfiprintf_r+0x22c>)
 80073e4:	a904      	add	r1, sp, #16
 80073e6:	f7fd fa3b 	bl	8004860 <_printf_float>
 80073ea:	4607      	mov	r7, r0
 80073ec:	1c78      	adds	r0, r7, #1
 80073ee:	d1d6      	bne.n	800739e <_vfiprintf_r+0x19a>
 80073f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073f2:	07d9      	lsls	r1, r3, #31
 80073f4:	d405      	bmi.n	8007402 <_vfiprintf_r+0x1fe>
 80073f6:	89ab      	ldrh	r3, [r5, #12]
 80073f8:	059a      	lsls	r2, r3, #22
 80073fa:	d402      	bmi.n	8007402 <_vfiprintf_r+0x1fe>
 80073fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073fe:	f7fe f897 	bl	8005530 <__retarget_lock_release_recursive>
 8007402:	89ab      	ldrh	r3, [r5, #12]
 8007404:	065b      	lsls	r3, r3, #25
 8007406:	f53f af1f 	bmi.w	8007248 <_vfiprintf_r+0x44>
 800740a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800740c:	e71e      	b.n	800724c <_vfiprintf_r+0x48>
 800740e:	ab03      	add	r3, sp, #12
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	462a      	mov	r2, r5
 8007414:	4630      	mov	r0, r6
 8007416:	4b06      	ldr	r3, [pc, #24]	@ (8007430 <_vfiprintf_r+0x22c>)
 8007418:	a904      	add	r1, sp, #16
 800741a:	f7fd fcbf 	bl	8004d9c <_printf_i>
 800741e:	e7e4      	b.n	80073ea <_vfiprintf_r+0x1e6>
 8007420:	08007680 	.word	0x08007680
 8007424:	08007686 	.word	0x08007686
 8007428:	0800768a 	.word	0x0800768a
 800742c:	08004861 	.word	0x08004861
 8007430:	080071e1 	.word	0x080071e1

08007434 <_raise_r>:
 8007434:	291f      	cmp	r1, #31
 8007436:	b538      	push	{r3, r4, r5, lr}
 8007438:	4605      	mov	r5, r0
 800743a:	460c      	mov	r4, r1
 800743c:	d904      	bls.n	8007448 <_raise_r+0x14>
 800743e:	2316      	movs	r3, #22
 8007440:	6003      	str	r3, [r0, #0]
 8007442:	f04f 30ff 	mov.w	r0, #4294967295
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800744a:	b112      	cbz	r2, 8007452 <_raise_r+0x1e>
 800744c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007450:	b94b      	cbnz	r3, 8007466 <_raise_r+0x32>
 8007452:	4628      	mov	r0, r5
 8007454:	f000 f830 	bl	80074b8 <_getpid_r>
 8007458:	4622      	mov	r2, r4
 800745a:	4601      	mov	r1, r0
 800745c:	4628      	mov	r0, r5
 800745e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007462:	f000 b817 	b.w	8007494 <_kill_r>
 8007466:	2b01      	cmp	r3, #1
 8007468:	d00a      	beq.n	8007480 <_raise_r+0x4c>
 800746a:	1c59      	adds	r1, r3, #1
 800746c:	d103      	bne.n	8007476 <_raise_r+0x42>
 800746e:	2316      	movs	r3, #22
 8007470:	6003      	str	r3, [r0, #0]
 8007472:	2001      	movs	r0, #1
 8007474:	e7e7      	b.n	8007446 <_raise_r+0x12>
 8007476:	2100      	movs	r1, #0
 8007478:	4620      	mov	r0, r4
 800747a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800747e:	4798      	blx	r3
 8007480:	2000      	movs	r0, #0
 8007482:	e7e0      	b.n	8007446 <_raise_r+0x12>

08007484 <raise>:
 8007484:	4b02      	ldr	r3, [pc, #8]	@ (8007490 <raise+0xc>)
 8007486:	4601      	mov	r1, r0
 8007488:	6818      	ldr	r0, [r3, #0]
 800748a:	f7ff bfd3 	b.w	8007434 <_raise_r>
 800748e:	bf00      	nop
 8007490:	20000018 	.word	0x20000018

08007494 <_kill_r>:
 8007494:	b538      	push	{r3, r4, r5, lr}
 8007496:	2300      	movs	r3, #0
 8007498:	4d06      	ldr	r5, [pc, #24]	@ (80074b4 <_kill_r+0x20>)
 800749a:	4604      	mov	r4, r0
 800749c:	4608      	mov	r0, r1
 800749e:	4611      	mov	r1, r2
 80074a0:	602b      	str	r3, [r5, #0]
 80074a2:	f7fa f9b6 	bl	8001812 <_kill>
 80074a6:	1c43      	adds	r3, r0, #1
 80074a8:	d102      	bne.n	80074b0 <_kill_r+0x1c>
 80074aa:	682b      	ldr	r3, [r5, #0]
 80074ac:	b103      	cbz	r3, 80074b0 <_kill_r+0x1c>
 80074ae:	6023      	str	r3, [r4, #0]
 80074b0:	bd38      	pop	{r3, r4, r5, pc}
 80074b2:	bf00      	nop
 80074b4:	20000520 	.word	0x20000520

080074b8 <_getpid_r>:
 80074b8:	f7fa b9a4 	b.w	8001804 <_getpid>

080074bc <_init>:
 80074bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074be:	bf00      	nop
 80074c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074c2:	bc08      	pop	{r3}
 80074c4:	469e      	mov	lr, r3
 80074c6:	4770      	bx	lr

080074c8 <_fini>:
 80074c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ca:	bf00      	nop
 80074cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ce:	bc08      	pop	{r3}
 80074d0:	469e      	mov	lr, r3
 80074d2:	4770      	bx	lr
